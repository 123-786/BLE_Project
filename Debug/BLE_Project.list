
BLE_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004998  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c80  08004c80  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000070  08004cf8  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08004cf8  00006934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de9  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0c  00000000  00000000  00019e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cec  00000000  00000000  0001dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019924  00000000  00000000  0001e90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f3b  00000000  00000000  00038230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cdb  00000000  00000000  0004d16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dee46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  000dee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e39e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004b18 	.word	0x08004b18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004b18 	.word	0x08004b18

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004dc:	2006      	movs	r0, #6
 80004de:	f001 f826 	bl	800152e <HAL_NVIC_EnableIRQ>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004ea:	2006      	movs	r0, #6
 80004ec:	f001 f82d 	bl	800154a <HAL_NVIC_DisableIRQ>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000504:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6313      	str	r3, [r2, #48]	@ 0x30
 800050c:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000518:	2301      	movs	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <HCI_TL_SPI_Init+0x94>)
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4619      	mov	r1, r3
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 800052c:	f001 f87a 	bl	8001624 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 800054a:	f001 f86b 	bl	8001624 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800054e:	2302      	movs	r3, #2
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 8000566:	f001 f85d 	bl	8001624 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 8000570:	f001 fad8 	bl	8001b24 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000574:	f000 fc4e 	bl	8000e14 <BSP_SPI1_Init>
 8000578:	4603      	mov	r3, r0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	10110000 	.word	0x10110000
 800058c:	40020000 	.word	0x40020000

08000590 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000594:	2101      	movs	r1, #1
 8000596:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 8000598:	f001 f9c8 	bl	800192c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800059c:	2102      	movs	r1, #2
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 80005a0:	f001 f9c4 	bl	800192c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 80005aa:	f001 f9bf 	bl	800192c <HAL_GPIO_DeInit>
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020000 	.word	0x40020000

080005b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005c2:	f001 faaf 	bl	8001b24 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005ce:	f001 faa9 	bl	8001b24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 fe6c 	bl	80012b0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005e0:	f001 faa0 	bl	8001b24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005e4:	2005      	movs	r0, #5
 80005e6:	f000 fe63 	bl	80012b0 <HAL_Delay>
  return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020000 	.word	0x40020000

080005f4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000604:	2300      	movs	r3, #0
 8000606:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000608:	4a26      	ldr	r2, [pc, #152]	@ (80006a4 <HCI_TL_SPI_Receive+0xb0>)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000612:	6018      	str	r0, [r3, #0]
 8000614:	3304      	adds	r3, #4
 8000616:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000618:	f7ff ff65 	bl	80004e6 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <HCI_TL_SPI_Receive+0xb4>)
 8000622:	f001 fa7f 	bl	8001b24 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000626:	f107 010c 	add.w	r1, r7, #12
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2205      	movs	r2, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fc1f 	bl	8000e74 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000636:	7c3b      	ldrb	r3, [r7, #16]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21a      	sxth	r2, r3
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b21b      	sxth	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01e      	beq.n	800068a <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800064c:	8bfa      	ldrh	r2, [r7, #30]
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	429a      	cmp	r2, r3
 8000652:	d901      	bls.n	8000658 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000658:	2300      	movs	r3, #0
 800065a:	777b      	strb	r3, [r7, #29]
 800065c:	e010      	b.n	8000680 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800065e:	f107 011b 	add.w	r1, r7, #27
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2201      	movs	r2, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fc03 	bl	8000e74 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800066e:	7f7b      	ldrb	r3, [r7, #29]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	7efa      	ldrb	r2, [r7, #27]
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800067a:	7f7b      	ldrb	r3, [r7, #29]
 800067c:	3301      	adds	r3, #1
 800067e:	777b      	strb	r3, [r7, #29]
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	b29b      	uxth	r3, r3
 8000684:	8bfa      	ldrh	r2, [r7, #30]
 8000686:	429a      	cmp	r2, r3
 8000688:	d8e9      	bhi.n	800065e <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <HCI_TL_SPI_Receive+0xb4>)
 8000690:	f001 fa48 	bl	8001b24 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8000694:	f7ff ff20 	bl	80004d8 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8000698:	7f7b      	ldrb	r3, [r7, #29]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004b30 	.word	0x08004b30
 80006a8:	40020000 	.word	0x40020000

080006ac <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006b8:	4a34      	ldr	r2, [pc, #208]	@ (800078c <HCI_TL_SPI_Send+0xe0>)
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c2:	6018      	str	r0, [r3, #0]
 80006c4:	3304      	adds	r3, #4
 80006c6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f000 fde6 	bl	8001298 <HAL_GetTick>
 80006cc:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006ce:	f7ff ff0a 	bl	80004e6 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80006d2:	f000 fde1 	bl	8001298 <HAL_GetTick>
 80006d6:	61f8      	str	r0, [r7, #28]

    result = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 80006e2:	f001 fa1f 	bl	8001b24 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80006e6:	e00a      	b.n	80006fe <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80006e8:	f000 fdd6 	bl	8001298 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d903      	bls.n	80006fe <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80006f6:	f06f 0302 	mvn.w	r3, #2
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80006fc:	e004      	b.n	8000708 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80006fe:	f000 f84b 	bl	8000798 <IsDataAvailable>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0ef      	beq.n	80006e8 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	f113 0f03 	cmn.w	r3, #3
 800070e:	d105      	bne.n	800071c <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	481e      	ldr	r0, [pc, #120]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 8000716:	f001 fa05 	bl	8001b24 <HAL_GPIO_WritePin>
      break;
 800071a:	e030      	b.n	800077e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2205      	movs	r2, #5
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fba4 	bl	8000e74 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	7b7b      	ldrb	r3, [r7, #13]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21b      	sxth	r3, r3
 800073a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800073c:	8b7a      	ldrh	r2, [r7, #26]
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	429a      	cmp	r2, r3
 8000742:	d306      	bcc.n	8000752 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	461a      	mov	r2, r3
 8000748:	4912      	ldr	r1, [pc, #72]	@ (8000794 <HCI_TL_SPI_Send+0xe8>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 fb92 	bl	8000e74 <BSP_SPI1_SendRecv>
 8000750:	e002      	b.n	8000758 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000752:	f06f 0301 	mvn.w	r3, #1
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2102      	movs	r1, #2
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 800075e:	f001 f9e1 	bl	8001b24 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000762:	f000 fd99 	bl	8001298 <HAL_GetTick>
 8000766:	4602      	mov	r2, r0
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d903      	bls.n	8000778 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000770:	f06f 0302 	mvn.w	r3, #2
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000776:	e002      	b.n	800077e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077a:	2b00      	cmp	r3, #0
 800077c:	dba9      	blt.n	80006d2 <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 800077e:	f7ff feab 	bl	80004d8 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000784:	4618      	mov	r0, r3
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08004b38 	.word	0x08004b38
 8000790:	40020000 	.word	0x40020000
 8000794:	20000094 	.word	0x20000094

08000798 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800079c:	2101      	movs	r1, #1
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <IsDataAvailable+0x1c>)
 80007a0:	f001 f9a8 	bl	8001af4 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020000 	.word	0x40020000

080007b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <hci_tl_lowlevel_init+0x54>)
 80007c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <hci_tl_lowlevel_init+0x58>)
 80007c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <hci_tl_lowlevel_init+0x5c>)
 80007c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <hci_tl_lowlevel_init+0x60>)
 80007cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <hci_tl_lowlevel_init+0x64>)
 80007d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <hci_tl_lowlevel_init+0x68>)
 80007d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fa47 	bl	8003c6c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80007de:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <hci_tl_lowlevel_init+0x6c>)
 80007e4:	f000 fee5 	bl	80015b2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <hci_tl_lowlevel_init+0x70>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <hci_tl_lowlevel_init+0x6c>)
 80007ee:	f000 fec6 	bl	800157e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2006      	movs	r0, #6
 80007f8:	f000 fe7d 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fc:	2006      	movs	r0, #6
 80007fe:	f000 fe96 	bl	800152e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	080004f5 	.word	0x080004f5
 8000810:	08000591 	.word	0x08000591
 8000814:	080006ad 	.word	0x080006ad
 8000818:	080005f5 	.word	0x080005f5
 800081c:	080005b9 	.word	0x080005b9
 8000820:	08000eb5 	.word	0x08000eb5
 8000824:	2000008c 	.word	0x2000008c
 8000828:	0800082d 	.word	0x0800082d

0800082c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000830:	e005      	b.n	800083e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000832:	2000      	movs	r0, #0
 8000834:	f003 fb52 	bl	8003edc <hci_notify_asynch_evt>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d105      	bne.n	800084a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800083e:	f7ff ffab 	bl	8000798 <IsDataAvailable>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f4      	bne.n	8000832 <hci_tl_lowlevel_isr+0x6>
 8000848:	e000      	b.n	800084c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800084a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <bluenrg_init>:
#include "hci_tl.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 8000856:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <bluenrg_init+0xd4>)
 8000858:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <bluenrg_init+0xd8>)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000864:	6018      	str	r0, [r3, #0]
 8000866:	3304      	adds	r3, #4
 8000868:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(0,0);
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f003 f9bb 	bl	8003be8 <hci_init>
	hci_reset();
 8000872:	f002 fbfd 	bl	8003070 <hci_reset>
	HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	@ 0x64
 8000878:	f000 fd1a 	bl	80012b0 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	461a      	mov	r2, r3
 8000882:	2106      	movs	r1, #6
 8000884:	2000      	movs	r0, #0
 8000886:	f003 f886 	bl	8003996 <aci_hal_write_config_data>
 800088a:	4603      	mov	r3, r0
 800088c:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 800088e:	7cfb      	ldrb	r3, [r7, #19]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <bluenrg_init+0x4a>
 8000894:	4825      	ldr	r0, [pc, #148]	@ (800092c <bluenrg_init+0xdc>)
 8000896:	f003 fd9d 	bl	80043d4 <puts>
	ret=aci_gatt_init();
 800089a:	f002 fdc2 	bl	8003422 <aci_gatt_init>
 800089e:	4603      	mov	r3, r0
 80008a0:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 80008a2:	7cfb      	ldrb	r3, [r7, #19]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <bluenrg_init+0x5e>
 80008a8:	4821      	ldr	r0, [pc, #132]	@ (8000930 <bluenrg_init+0xe0>)
 80008aa:	f003 fd93 	bl	80043d4 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 80008ae:	f107 020a 	add.w	r2, r7, #10
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	4613      	mov	r3, r2
 80008be:	2207      	movs	r2, #7
 80008c0:	2100      	movs	r1, #0
 80008c2:	2001      	movs	r0, #1
 80008c4:	f002 fd00 	bl	80032c8 <aci_gap_init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 80008cc:	7cfb      	ldrb	r3, [r7, #19]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <bluenrg_init+0x88>
 80008d2:	4818      	ldr	r0, [pc, #96]	@ (8000934 <bluenrg_init+0xe4>)
 80008d4:	f003 fd7e 	bl	80043d4 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80008d8:	897c      	ldrh	r4, [r7, #10]
 80008da:	893d      	ldrh	r5, [r7, #8]
 80008dc:	6978      	ldr	r0, [r7, #20]
 80008de:	f7ff fc7b 	bl	80001d8 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4613      	mov	r3, r2
 80008ec:	2200      	movs	r2, #0
 80008ee:	4629      	mov	r1, r5
 80008f0:	4620      	mov	r0, r4
 80008f2:	f002 ff9e 	bl	8003832 <aci_gatt_update_char_value>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bluenrg_init+0xb6>
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <bluenrg_init+0xe8>)
 8000902:	f003 fd67 	bl	80043d4 <puts>
	//add custom service
	ret = add_simple_service();
 8000906:	f000 f999 	bl	8000c3c <add_simple_service>
 800090a:	4603      	mov	r3, r0
 800090c:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 800090e:	7cfb      	ldrb	r3, [r7, #19]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d002      	beq.n	800091a <bluenrg_init+0xca>
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <bluenrg_init+0xec>)
 8000916:	f003 fd5d 	bl	80043d4 <puts>
	}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bdb0      	pop	{r4, r5, r7, pc}
 8000922:	bf00      	nop
 8000924:	08004b40 	.word	0x08004b40
 8000928:	20000000 	.word	0x20000000
 800092c:	08004b48 	.word	0x08004b48
 8000930:	08004b6c 	.word	0x08004b6c
 8000934:	08004b84 	.word	0x08004b84
 8000938:	08004b9c 	.word	0x08004b9c
 800093c:	08004bc0 	.word	0x08004bc0

08000940 <bluenrg_process>:
// to make it discoverable
void bluenrg_process(void)
		{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <bluenrg_process+0x50>)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	c303      	stmia	r3!, {r0, r1}
 800094e:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 8000950:	2300      	movs	r3, #0
 8000952:	9306      	str	r3, [sp, #24]
 8000954:	2300      	movs	r3, #0
 8000956:	9305      	str	r3, [sp, #20]
 8000958:	2300      	movs	r3, #0
 800095a:	9304      	str	r3, [sp, #16]
 800095c:	2300      	movs	r3, #0
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2309      	movs	r3, #9
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2300      	movs	r3, #0
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2000      	movs	r0, #0
 8000974:	f002 fba5 	bl	80030c2 <aci_gap_set_discoverable>
 8000978:	4603      	mov	r3, r0
 800097a:	73fb      	strb	r3, [r7, #15]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <bluenrg_process+0x48>
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <bluenrg_process+0x54>)
 8000984:	f003 fd26 	bl	80043d4 <puts>
		}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08004c00 	.word	0x08004c00
 8000994:	08004bdc 	.word	0x08004bdc

08000998 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 80009a0:	bf00      	nop
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <__io_putchar+0x2c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <__io_putchar+0x2c>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 80009b4:	687b      	ldr	r3, [r7, #4]
	}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fbfe 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f80e 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 f89e 	bl	8000b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 f872 	bl	8000ac0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <main+0x24>)
 80009de:	f003 fcf9 	bl	80043d4 <puts>
bluenrg_init();
 80009e2:	f7ff ff35 	bl	8000850 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 80009e6:	f7ff ffab 	bl	8000940 <bluenrg_process>
 80009ea:	e7fc      	b.n	80009e6 <main+0x1e>
 80009ec:	08004c0c 	.word	0x08004c0c

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	@ 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fdc8 	bl	8004594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <SystemClock_Config+0xc8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <SystemClock_Config+0xc8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <SystemClock_Config+0xc8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000a64:	2340      	movs	r3, #64	@ 0x40
 8000a66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f893 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 f8d6 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 faf5 	bl	8002090 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aac:	f000 f8c0 	bl	8000c30 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	@ 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f001 fff8 	bl	8002aec <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f895 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000194 	.word	0x20000194
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a3b      	ldr	r2, [pc, #236]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b39      	ldr	r3, [pc, #228]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b35      	ldr	r3, [pc, #212]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a34      	ldr	r2, [pc, #208]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b32      	ldr	r3, [pc, #200]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a26      	ldr	r2, [pc, #152]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_GPIO_Init+0x10c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000ba0:	4820      	ldr	r0, [pc, #128]	@ (8000c24 <MX_GPIO_Init+0x110>)
 8000ba2:	f000 ffbf 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_GPIO_Init+0x114>)
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481c      	ldr	r0, [pc, #112]	@ (8000c2c <MX_GPIO_Init+0x118>)
 8000bbc:	f000 fd32 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_GPIO_Init+0x114>)
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_GPIO_Init+0x110>)
 8000bd4:	f000 fd26 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000bd8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <MX_GPIO_Init+0x110>)
 8000bf2:	f000 fd17 	bl	8001624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f000 fc7b 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c00:	2006      	movs	r0, #6
 8000c02:	f000 fc94 	bl	800152e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2028      	movs	r0, #40	@ 0x28
 8000c0c:	f000 fc73 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c10:	2028      	movs	r0, #40	@ 0x28
 8000c12:	f000 fc8c 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <add_simple_service>:
const uint8_t char_uuid[16]  = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
uint16_t my_service_handle, my_char_handle;


tBleStatus add_simple_service(void)
	{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b08d      	sub	sp, #52	@ 0x34
 8000c40:	af06      	add	r7, sp, #24
	Service_UUID_t service_uuid;
	tBleStatus ret;
	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <add_simple_service+0x60>)
 8000c44:	1d3c      	adds	r4, r7, #4
 8000c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//add service
	ret=aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &my_service_handle);
 8000c4c:	1d39      	adds	r1, r7, #4
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <add_simple_service+0x64>)
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2307      	movs	r3, #7
 8000c54:	2201      	movs	r2, #1
 8000c56:	2002      	movs	r0, #2
 8000c58:	f002 fc0d 	bl	8003476 <aci_gatt_add_service>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	75fb      	strb	r3, [r7, #23]
	aci_gatt_add_char(my_service_handle,UUID_TYPE_128,&char_uuid,1,CHAR_PROP_NOTIFY,ATTR_PERMISSION_NONE,0,16,0,&my_char_handle);
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <add_simple_service+0x64>)
 8000c62:	8818      	ldrh	r0, [r3, #0]
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <add_simple_service+0x68>)
 8000c66:	9305      	str	r3, [sp, #20]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	2310      	movs	r3, #16
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <add_simple_service+0x6c>)
 8000c80:	2102      	movs	r1, #2
 8000c82:	f002 fcce 	bl	8003622 <aci_gatt_add_char>

	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_add_service failed\r\n");}
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <add_simple_service+0x56>
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <add_simple_service+0x70>)
 8000c8e:	f003 fba1 	bl	80043d4 <puts>
	return ret;
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
	}
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	08004c40 	.word	0x08004c40
 8000ca0:	200001d8 	.word	0x200001d8
 8000ca4:	200001da 	.word	0x200001da
 8000ca8:	08004c50 	.word	0x08004c50
 8000cac:	08004c20 	.word	0x08004c20

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 fbf6 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <HAL_UART_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d76:	f000 fc55 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	@ 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 fa43 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <EXTI0_IRQHandler+0x10>)
 8000df6:	f000 fbf1 	bl	80015dc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000008c 	.word	0x2000008c

08000e04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e0c:	f000 fea4 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <BSP_SPI1_Init+0x54>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <BSP_SPI1_Init+0x58>)
 8000e22:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <BSP_SPI1_Init+0x5c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	4911      	ldr	r1, [pc, #68]	@ (8000e70 <BSP_SPI1_Init+0x5c>)
 8000e2c:	600a      	str	r2, [r1, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d114      	bne.n	8000e5c <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000e32:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <BSP_SPI1_Init+0x54>)
 8000e34:	f001 fd81 	bl	800293a <HAL_SPI_GetState>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10e      	bne.n	8000e5c <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8000e3e:	480a      	ldr	r0, [pc, #40]	@ (8000e68 <BSP_SPI1_Init+0x54>)
 8000e40:	f000 f87c 	bl	8000f3c <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d108      	bne.n	8000e5c <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000e4a:	4807      	ldr	r0, [pc, #28]	@ (8000e68 <BSP_SPI1_Init+0x54>)
 8000e4c:	f000 f83a 	bl	8000ec4 <MX_SPI1_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8000e56:	f06f 0307 	mvn.w	r3, #7
 8000e5a:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001dc 	.word	0x200001dc
 8000e6c:	40013000 	.word	0x40013000
 8000e70:	20000234 	.word	0x20000234

08000e74 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e8c:	9200      	str	r2, [sp, #0]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	68f9      	ldr	r1, [r7, #12]
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <BSP_SPI1_SendRecv+0x3c>)
 8000e94:	f001 fbaf 	bl	80025f6 <HAL_SPI_TransmitReceive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000e9e:	f06f 0305 	mvn.w	r3, #5
 8000ea2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000ea4:	697b      	ldr	r3, [r7, #20]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001dc 	.word	0x200001dc

08000eb4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000eb8:	f000 f9ee 	bl	8001298 <HAL_GetTick>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <MX_SPI1_Init+0x74>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2228      	movs	r2, #40	@ 0x28
 8000f02:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f001 fad7 	bl	80024d0 <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013000 	.word	0x40013000

08000f3c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <SPI1_MspInit+0xc4>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000f98:	2340      	movs	r3, #64	@ 0x40
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4814      	ldr	r0, [pc, #80]	@ (8001004 <SPI1_MspInit+0xc8>)
 8000fb4:	f000 fb36 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <SPI1_MspInit+0xc8>)
 8000fd4:	f000 fb26 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <SPI1_MspInit+0xcc>)
 8000ff4:	f000 fb16 	bl	8001624 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	@ 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400

0800100c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
	}

return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc99 	bl	8000998 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f003 fa8a 	bl	8004630 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20020000 	.word	0x20020000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000238 	.word	0x20000238
 8001150:	20000938 	.word	0x20000938

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	@ (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 fa49 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fc0d 	bl	80009c8 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011bc:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 80011c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c4:	20000934 	.word	0x20000934

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f973 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fd56 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f999 	bl	8001566 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f953 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000008 	.word	0x20000008
 8001268:	20000010 	.word	0x20000010
 800126c:	2000000c 	.word	0x2000000c

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000010 	.word	0x20000010
 8001294:	2000023c 	.word	0x2000023c

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000023c 	.word	0x2000023c

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000010 	.word	0x20000010

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db12      	blt.n	80013d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	490a      	ldr	r1, [pc, #40]	@ (80013dc <__NVIC_DisableIRQ+0x44>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	3320      	adds	r3, #32
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ca:	f3bf 8f6f 	isb	sy
}
 80013ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff05 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff1a 	bl	8001340 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff0d 	bl	800135c <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff1d 	bl	8001398 <__NVIC_DisableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff94 	bl	800149c <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	460b      	mov	r3, r1
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
      break;
 800159c:	e002      	b.n	80015a4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
      break;
 80015a2:	bf00      	nop
  }

  return status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e003      	b.n	80015ce <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2201      	movs	r2, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_EXTI_IRQHandler+0x44>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_EXTI_IRQHandler+0x44>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4798      	blx	r3
    }
  }
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e159      	b.n	80018f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8148 	bne.w	80018ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a2 	beq.w	80018ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b57      	ldr	r3, [pc, #348]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a56      	ldr	r2, [pc, #344]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b54      	ldr	r3, [pc, #336]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_GPIO_Init+0x2ec>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <HAL_GPIO_Init+0x2f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x202>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a48      	ldr	r2, [pc, #288]	@ (8001918 <HAL_GPIO_Init+0x2f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x1fe>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a47      	ldr	r2, [pc, #284]	@ (800191c <HAL_GPIO_Init+0x2f8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x1fa>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a46      	ldr	r2, [pc, #280]	@ (8001920 <HAL_GPIO_Init+0x2fc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x1f6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a45      	ldr	r2, [pc, #276]	@ (8001924 <HAL_GPIO_Init+0x300>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x1f2>
 8001812:	2304      	movs	r3, #4
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001816:	2307      	movs	r3, #7
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	@ (8001910 <HAL_GPIO_Init+0x2ec>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <HAL_GPIO_Init+0x304>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_GPIO_Init+0x304>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1a      	ldr	r2, [pc, #104]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f aea2 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40013c00 	.word	0x40013c00

0800192c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e0bb      	b.n	8001ac0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	f040 80ab 	bne.w	8001aba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	4013      	ands	r3, r2
 8001984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a54      	ldr	r2, [pc, #336]	@ (8001adc <HAL_GPIO_DeInit+0x1b0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_DeInit+0x96>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a53      	ldr	r2, [pc, #332]	@ (8001ae0 <HAL_GPIO_DeInit+0x1b4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_DeInit+0x92>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	@ (8001ae4 <HAL_GPIO_DeInit+0x1b8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_DeInit+0x8e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a51      	ldr	r2, [pc, #324]	@ (8001ae8 <HAL_GPIO_DeInit+0x1bc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_DeInit+0x8a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a50      	ldr	r2, [pc, #320]	@ (8001aec <HAL_GPIO_DeInit+0x1c0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_DeInit+0x86>
 80019ae:	2304      	movs	r3, #4
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d132      	bne.n	8001a3a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019d4:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	4944      	ldr	r1, [pc, #272]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019de:	4013      	ands	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80019e2:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4941      	ldr	r1, [pc, #260]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80019f0:	4b3f      	ldr	r3, [pc, #252]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	493d      	ldr	r1, [pc, #244]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019fe:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	493a      	ldr	r1, [pc, #232]	@ (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	482a      	ldr	r0, [pc, #168]	@ (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	400a      	ands	r2, r1
 8001a34:	3302      	adds	r3, #2
 8001a36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2103      	movs	r1, #3
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	08d2      	lsrs	r2, r2, #3
 8001a70:	4019      	ands	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2103      	movs	r1, #3
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2103      	movs	r1, #3
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	f67f af40 	bls.w	8001948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f806 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e267      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d075      	beq.n	8001caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bbe:	4b88      	ldr	r3, [pc, #544]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d00c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bca:	4b85      	ldr	r3, [pc, #532]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d112      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	4b7e      	ldr	r3, [pc, #504]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d05b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x108>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d157      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e242      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x74>
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a6f      	ldr	r2, [pc, #444]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c38:	4b69      	ldr	r3, [pc, #420]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a68      	ldr	r2, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a65      	ldr	r2, [pc, #404]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb1e 	bl	8001298 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb1a 	bl	8001298 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e207      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5b      	ldr	r3, [pc, #364]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb0a 	bl	8001298 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fb06 	bl	8001298 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1f3      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0xe8>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cce:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1c7      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4937      	ldr	r1, [pc, #220]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b34      	ldr	r3, [pc, #208]	@ (8001de4 <HAL_RCC_OscConfig+0x244>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fabf 	bl	8001298 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fabb 	bl	8001298 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1a8      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4925      	ldr	r1, [pc, #148]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_RCC_OscConfig+0x244>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa9e 	bl	8001298 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa9a 	bl	8001298 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e187      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d036      	beq.n	8001df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_RCC_OscConfig+0x248>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fa7e 	bl	8001298 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fa7a 	bl	8001298 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e167      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x200>
 8001dbe:	e01b      	b.n	8001df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_OscConfig+0x248>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa67 	bl	8001298 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	e00e      	b.n	8001dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff fa63 	bl	8001298 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d907      	bls.n	8001dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e150      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	42470000 	.word	0x42470000
 8001de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b88      	ldr	r3, [pc, #544]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ea      	bne.n	8001dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8097 	beq.w	8001f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b81      	ldr	r3, [pc, #516]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e26:	4b7a      	ldr	r3, [pc, #488]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b77      	ldr	r3, [pc, #476]	@ (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e42:	4b74      	ldr	r3, [pc, #464]	@ (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a73      	ldr	r2, [pc, #460]	@ (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa23 	bl	8001298 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff fa1f 	bl	8001298 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e10c      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_OscConfig+0x474>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2ea>
 8001e7c:	4b64      	ldr	r3, [pc, #400]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e80:	4a63      	ldr	r2, [pc, #396]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x324>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x30c>
 8001e92:	4b5f      	ldr	r3, [pc, #380]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	4a5e      	ldr	r2, [pc, #376]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x324>
 8001eac:	4b58      	ldr	r3, [pc, #352]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4a57      	ldr	r2, [pc, #348]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb8:	4b55      	ldr	r3, [pc, #340]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebc:	4a54      	ldr	r2, [pc, #336]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f9e4 	bl	8001298 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f9e0 	bl	8001298 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0cb      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	4b49      	ldr	r3, [pc, #292]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0ee      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x334>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f9ce 	bl	8001298 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f9ca 	bl	8001298 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0b5      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	4b3e      	ldr	r3, [pc, #248]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ee      	bne.n	8001f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	4a38      	ldr	r2, [pc, #224]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a1 	beq.w	8002080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3e:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d05c      	beq.n	8002004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d141      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <HAL_RCC_OscConfig+0x478>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f99e 	bl	8001298 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f99a 	bl	8001298 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e087      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b27      	ldr	r3, [pc, #156]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	491b      	ldr	r1, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCC_OscConfig+0x478>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff f973 	bl	8001298 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f96f 	bl	8001298 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e05c      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x416>
 8001fd4:	e054      	b.n	8002080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_RCC_OscConfig+0x478>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f95c 	bl	8001298 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f958 	bl	8001298 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e045      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x444>
 8002002:	e03d      	b.n	8002080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e038      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x4ec>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d028      	beq.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d121      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cc      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b68      	ldr	r3, [pc, #416]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d90c      	bls.n	80020cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b65      	ldr	r3, [pc, #404]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d044      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	2b03      	cmp	r3, #3
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e067      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b37      	ldr	r3, [pc, #220]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4934      	ldr	r1, [pc, #208]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff f88a 	bl	8001298 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7ff f886 	bl	8001298 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d20c      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f821 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	490a      	ldr	r1, [pc, #40]	@ (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	@ (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ffea 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	08004c60 	.word	0x08004c60
 8002254:	20000008 	.word	0x20000008
 8002258:	2000000c 	.word	0x2000000c

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002260:	b094      	sub	sp, #80	@ 0x50
 8002262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	647b      	str	r3, [r7, #68]	@ 0x44
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002274:	4b79      	ldr	r3, [pc, #484]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d00d      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x40>
 8002280:	2b08      	cmp	r3, #8
 8002282:	f200 80e1 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 800228a:	2b04      	cmp	r3, #4
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x3a>
 800228e:	e0db      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002294:	e0db      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b73      	ldr	r3, [pc, #460]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x208>)
 8002298:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800229a:	e0d8      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800229c:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a6:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b6a      	ldr	r3, [pc, #424]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	2200      	movs	r2, #0
 80022ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e0:	0150      	lsls	r0, r2, #5
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4621      	mov	r1, r4
 80022e8:	1a51      	subs	r1, r2, r1
 80022ea:	6139      	str	r1, [r7, #16]
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb63 0301 	sbc.w	r3, r3, r1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002300:	4659      	mov	r1, fp
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	4651      	mov	r1, sl
 8002306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230a:	4651      	mov	r1, sl
 800230c:	018a      	lsls	r2, r1, #6
 800230e:	4651      	mov	r1, sl
 8002310:	ebb2 0801 	subs.w	r8, r2, r1
 8002314:	4659      	mov	r1, fp
 8002316:	eb63 0901 	sbc.w	r9, r3, r1
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232e:	4690      	mov	r8, r2
 8002330:	4699      	mov	r9, r3
 8002332:	4623      	mov	r3, r4
 8002334:	eb18 0303 	adds.w	r3, r8, r3
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	462b      	mov	r3, r5
 800233c:	eb49 0303 	adc.w	r3, r9, r3
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800234e:	4629      	mov	r1, r5
 8002350:	024b      	lsls	r3, r1, #9
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002358:	4621      	mov	r1, r4
 800235a:	024a      	lsls	r2, r1, #9
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800236c:	f7fd ff3c 	bl	80001e8 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002378:	e058      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	2200      	movs	r2, #0
 8002382:	4618      	mov	r0, r3
 8002384:	4611      	mov	r1, r2
 8002386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a6:	0150      	lsls	r0, r2, #5
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4641      	mov	r1, r8
 80023ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80023b2:	4649      	mov	r1, r9
 80023b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023cc:	ebb2 040a 	subs.w	r4, r2, sl
 80023d0:	eb63 050b 	sbc.w	r5, r3, fp
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	00eb      	lsls	r3, r5, #3
 80023de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e2:	00e2      	lsls	r2, r4, #3
 80023e4:	4614      	mov	r4, r2
 80023e6:	461d      	mov	r5, r3
 80023e8:	4643      	mov	r3, r8
 80023ea:	18e3      	adds	r3, r4, r3
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	464b      	mov	r3, r9
 80023f0:	eb45 0303 	adc.w	r3, r5, r3
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002416:	2200      	movs	r2, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	61fa      	str	r2, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	f7fd fee2 	bl	80001e8 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800243c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002450:	4618      	mov	r0, r3
 8002452:	3750      	adds	r7, #80	@ 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08004c70 	.word	0x08004c70

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffdc 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004c70 	.word	0x08004c70

080024d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07b      	b.n	80025da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f2:	d009      	beq.n	8002508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
 80024fa:	e005      	b.n	8002508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f85d 	bl	80025e2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800253e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258c:	ea42 0103 	orr.w	r1, r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0104 	and.w	r1, r3, #4
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	f003 0210 	and.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08c      	sub	sp, #48	@ 0x30
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_SPI_TransmitReceive+0x26>
 8002618:	2302      	movs	r3, #2
 800261a:	e18a      	b.n	8002932 <HAL_SPI_TransmitReceive+0x33c>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002624:	f7fe fe38 	bl	8001298 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800263e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00f      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x70>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800264c:	d107      	bne.n	800265e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_SPI_TransmitReceive+0x68>
 8002656:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800265a:	2b04      	cmp	r3, #4
 800265c:	d003      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002664:	e15b      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x82>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x82>
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800267e:	e14e      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b04      	cmp	r3, #4
 800268a:	d003      	beq.n	8002694 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2205      	movs	r2, #5
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b40      	cmp	r3, #64	@ 0x40
 80026d6:	d007      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026f0:	d178      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x10a>
 80026fa:	8b7b      	ldrh	r3, [r7, #26]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d166      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	1c9a      	adds	r2, r3, #2
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002724:	e053      	b.n	80027ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_SPI_TransmitReceive+0x176>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_SPI_TransmitReceive+0x176>
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d113      	bne.n	800276c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d119      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x1b8>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278e:	b292      	uxth	r2, r2
 8002790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	1c9a      	adds	r2, r3, #2
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027aa:	2301      	movs	r3, #1
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027ae:	f7fe fd73 	bl	8001298 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d807      	bhi.n	80027ce <HAL_SPI_TransmitReceive+0x1d8>
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d003      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80027cc:	e0a7      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1a6      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x130>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1a1      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x130>
 80027e2:	e07c      	b.n	80028de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x1fc>
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d16b      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002818:	e057      	b.n	80028ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d11c      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x26c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x26c>
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d114      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d119      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x2ae>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028a4:	f7fe fcf8 	bl	8001298 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d803      	bhi.n	80028bc <HAL_SPI_TransmitReceive+0x2c6>
 80028b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x2cc>
 80028bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80028c8:	e029      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1a2      	bne.n	800281a <HAL_SPI_TransmitReceive+0x224>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19d      	bne.n	800281a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8c0 	bl	8002a68 <SPI_EndRxTxTransaction>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80028fa:	e010      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	e000      	b.n	800291e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800291c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800292e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002932:	4618      	mov	r0, r3
 8002934:	3730      	adds	r7, #48	@ 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002948:	b2db      	uxtb	r3, r3
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002968:	f7fe fc96 	bl	8001298 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002978:	f7fe fc8e 	bl	8001298 <HAL_GetTick>
 800297c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800297e:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	015b      	lsls	r3, r3, #5
 8002984:	0d1b      	lsrs	r3, r3, #20
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800298e:	e054      	b.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d050      	beq.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002998:	f7fe fc7e 	bl	8001298 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d902      	bls.n	80029ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d13d      	bne.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c6:	d111      	bne.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d0:	d004      	beq.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d107      	bne.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f4:	d10f      	bne.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e017      	b.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d19b      	bne.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008

08002a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <SPI_EndRxTxTransaction+0x7c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <SPI_EndRxTxTransaction+0x80>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0d5b      	lsrs	r3, r3, #21
 8002a80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a92:	d112      	bne.n	8002aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2180      	movs	r1, #128	@ 0x80
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff5a 	bl	8002958 <SPI_WaitFlagStateUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e00f      	b.n	8002ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad0:	2b80      	cmp	r3, #128	@ 0x80
 8002ad2:	d0f2      	beq.n	8002aba <SPI_EndRxTxTransaction+0x52>
 8002ad4:	e000      	b.n	8002ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ad6:	bf00      	nop
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	165e9f81 	.word	0x165e9f81

08002aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e03f      	b.n	8002b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f8f4 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	@ 0x24
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f829 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0c0      	sub	sp, #256	@ 0x100
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba4:	68d9      	ldr	r1, [r3, #12]
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	ea40 0301 	orr.w	r3, r0, r1
 8002bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002be0:	f021 010c 	bic.w	r1, r1, #12
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	ea40 0301 	orr.w	r3, r0, r1
 8002c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b8f      	ldr	r3, [pc, #572]	@ (8002e54 <UART_SetConfig+0x2cc>)
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d005      	beq.n	8002c28 <UART_SetConfig+0xa0>
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b8d      	ldr	r3, [pc, #564]	@ (8002e58 <UART_SetConfig+0x2d0>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d104      	bne.n	8002c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c28:	f7ff fc3e 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8002c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c30:	e003      	b.n	8002c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7ff fc25 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8002c36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c44:	f040 810c 	bne.w	8002e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	1891      	adds	r1, r2, r2
 8002c60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c62:	415b      	adcs	r3, r3
 8002c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	eb12 0801 	adds.w	r8, r2, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb43 0901 	adc.w	r9, r3, r1
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	eb18 0303 	adds.w	r3, r8, r3
 8002c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb49 0303 	adc.w	r3, r9, r3
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	18db      	adds	r3, r3, r3
 8002cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ccc:	f7fd fa8c 	bl	80001e8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	011c      	lsls	r4, r3, #4
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d00:	4641      	mov	r1, r8
 8002d02:	eb12 0a01 	adds.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb43 0b01 	adc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d20:	4692      	mov	sl, r2
 8002d22:	469b      	mov	fp, r3
 8002d24:	4643      	mov	r3, r8
 8002d26:	eb1a 0303 	adds.w	r3, sl, r3
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	eb4b 0303 	adc.w	r3, fp, r3
 8002d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	18db      	adds	r3, r3, r3
 8002d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d52:	4613      	mov	r3, r2
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d62:	f7fd fa41 	bl	80001e8 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2264      	movs	r2, #100	@ 0x64
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	1acb      	subs	r3, r1, r3
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d82:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002d84:	fba3 2302 	umull	r2, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d90:	441c      	add	r4, r3
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dac:	415b      	adcs	r3, r3
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e08:	460b      	mov	r3, r1
 8002e0a:	18db      	adds	r3, r3, r3
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e0e:	4613      	mov	r3, r2
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e1e:	f7fd f9e3 	bl	80001e8 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	@ 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	3332      	adds	r3, #50	@ 0x32
 8002e3a:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <UART_SetConfig+0x2d4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 0207 	and.w	r2, r3, #7
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4422      	add	r2, r4
 8002e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e50:	e106      	b.n	8003060 <UART_SetConfig+0x4d8>
 8002e52:	bf00      	nop
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e72:	4642      	mov	r2, r8
 8002e74:	464b      	mov	r3, r9
 8002e76:	1891      	adds	r1, r2, r2
 8002e78:	6239      	str	r1, [r7, #32]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e82:	4641      	mov	r1, r8
 8002e84:	1854      	adds	r4, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb43 0501 	adc.w	r5, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	00eb      	lsls	r3, r5, #3
 8002e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4643      	mov	r3, r8
 8002ea2:	18e3      	adds	r3, r4, r3
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	eb45 0303 	adc.w	r3, r5, r3
 8002eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ece:	4629      	mov	r1, r5
 8002ed0:	008b      	lsls	r3, r1, #2
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed8:	4621      	mov	r1, r4
 8002eda:	008a      	lsls	r2, r1, #2
 8002edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ee0:	f7fd f982 	bl	80001e8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b60      	ldr	r3, [pc, #384]	@ (800306c <UART_SetConfig+0x4e4>)
 8002eea:	fba3 2302 	umull	r2, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	011c      	lsls	r4, r3, #4
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002efc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	61b9      	str	r1, [r7, #24]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f14:	4641      	mov	r1, r8
 8002f16:	1851      	adds	r1, r2, r1
 8002f18:	6139      	str	r1, [r7, #16]
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	414b      	adcs	r3, r1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4651      	mov	r1, sl
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4642      	mov	r2, r8
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f48:	464b      	mov	r3, r9
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	eb42 0303 	adc.w	r3, r2, r3
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	008b      	lsls	r3, r1, #2
 8002f70:	4641      	mov	r1, r8
 8002f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f76:	4641      	mov	r1, r8
 8002f78:	008a      	lsls	r2, r1, #2
 8002f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f7e:	f7fd f933 	bl	80001e8 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	4b38      	ldr	r3, [pc, #224]	@ (800306c <UART_SetConfig+0x4e4>)
 8002f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2264      	movs	r2, #100	@ 0x64
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	1acb      	subs	r3, r1, r3
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	3332      	adds	r3, #50	@ 0x32
 8002f9c:	4a33      	ldr	r2, [pc, #204]	@ (800306c <UART_SetConfig+0x4e4>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	441c      	add	r4, r3
 8002faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fae:	2200      	movs	r2, #0
 8002fb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc8:	4641      	mov	r1, r8
 8002fca:	1851      	adds	r1, r2, r1
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	4649      	mov	r1, r9
 8002fd0:	414b      	adcs	r3, r1
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4651      	mov	r1, sl
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	eb42 0303 	adc.w	r3, r2, r3
 8003002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	663b      	str	r3, [r7, #96]	@ 0x60
 800300e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800301c:	4649      	mov	r1, r9
 800301e:	008b      	lsls	r3, r1, #2
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003026:	4641      	mov	r1, r8
 8003028:	008a      	lsls	r2, r1, #2
 800302a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800302e:	f7fd f8db 	bl	80001e8 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <UART_SetConfig+0x4e4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	@ 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3332      	adds	r3, #50	@ 0x32
 800304a:	4a08      	ldr	r2, [pc, #32]	@ (800306c <UART_SetConfig+0x4e4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4422      	add	r2, r4
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003066:	46bd      	mov	sp, r7
 8003068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306c:	51eb851f 	.word	0x51eb851f

08003070 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	2218      	movs	r2, #24
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f001 fa86 	bl	8004594 <memset>
  rq.ogf = 0x03;
 8003088:	2303      	movs	r3, #3
 800308a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800308c:	2303      	movs	r3, #3
 800308e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fe04 	bl	8003cac <hci_send_req>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da01      	bge.n	80030ae <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80030aa:	23ff      	movs	r3, #255	@ 0xff
 80030ac:	e005      	b.n	80030ba <hci_reset+0x4a>
  if (status) {
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <hci_reset+0x48>
    return status;
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	e000      	b.n	80030ba <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80030c2:	b5b0      	push	{r4, r5, r7, lr}
 80030c4:	b0ce      	sub	sp, #312	@ 0x138
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4605      	mov	r5, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80030d4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80030d8:	462a      	mov	r2, r5
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80030e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030e4:	4622      	mov	r2, r4
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80030ec:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80030f0:	4602      	mov	r2, r0
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80030f8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80030fc:	460a      	mov	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003108:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800310c:	3308      	adds	r3, #8
 800310e:	f107 020c 	add.w	r2, r7, #12
 8003112:	4413      	add	r3, r2
 8003114:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003118:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800311c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8003120:	4413      	add	r3, r2
 8003122:	3309      	adds	r3, #9
 8003124:	f107 020c 	add.w	r2, r7, #12
 8003128:	4413      	add	r3, r2
 800312a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800312e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003132:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8003140:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003144:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003148:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003150:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003154:	3301      	adds	r3, #1
 8003156:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800315a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800315e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003162:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800316c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003170:	3302      	adds	r3, #2
 8003172:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8003176:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800317a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800317e:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003188:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800318c:	3302      	adds	r3, #2
 800318e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8003192:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003196:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800319a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80031a2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80031a6:	3301      	adds	r3, #1
 80031a8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 80031ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80031b0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80031b4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80031b6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80031ba:	3301      	adds	r3, #1
 80031bc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 80031c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80031c4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80031c8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80031ca:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80031ce:	3301      	adds	r3, #1
 80031d0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 80031d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80031d8:	3308      	adds	r3, #8
 80031da:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80031de:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fa51 	bl	800468a <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80031e8:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80031ec:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80031f0:	4413      	add	r3, r2
 80031f2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80031f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80031fa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80031fe:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003200:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003204:	3301      	adds	r3, #1
 8003206:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800320a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800320e:	3301      	adds	r3, #1
 8003210:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8003214:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8003218:	4618      	mov	r0, r3
 800321a:	f001 fa36 	bl	800468a <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800321e:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8003222:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8003226:	4413      	add	r3, r2
 8003228:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800322c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003230:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8003234:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003236:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800323a:	3302      	adds	r3, #2
 800323c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8003240:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003244:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8003248:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800324a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800324e:	3302      	adds	r3, #2
 8003250:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003258:	2218      	movs	r2, #24
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f001 f999 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 8003262:	233f      	movs	r3, #63	@ 0x3f
 8003264:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8003268:	2383      	movs	r3, #131	@ 0x83
 800326a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8003276:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800327a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800327e:	f107 030b 	add.w	r3, r7, #11
 8003282:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800328c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fd0a 	bl	8003cac <hci_send_req>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	da01      	bge.n	80032a2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800329e:	23ff      	movs	r3, #255	@ 0xff
 80032a0:	e00d      	b.n	80032be <aci_gap_set_discoverable+0x1fc>
  if (status) {
 80032a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80032a6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <aci_gap_set_discoverable+0x1fa>
    return status;
 80032b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80032b4:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	e000      	b.n	80032be <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdb0      	pop	{r4, r5, r7, pc}

080032c8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b0cf      	sub	sp, #316	@ 0x13c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4604      	mov	r4, r0
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80032d8:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80032e2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80032e6:	4622      	mov	r2, r4
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80032ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80032f2:	4602      	mov	r2, r0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80032fa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80032fe:	460a      	mov	r2, r1
 8003300:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	2207      	movs	r2, #7
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f93e 	bl	8004594 <memset>
  uint8_t index_input = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 800331e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003322:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003326:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800332e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003332:	3301      	adds	r3, #1
 8003334:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8003338:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800333c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003340:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003348:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800334c:	3301      	adds	r3, #1
 800334e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8003352:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003356:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800335a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003362:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003366:	3301      	adds	r3, #1
 8003368:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800336c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003370:	2218      	movs	r2, #24
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f001 f90d 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 800337a:	233f      	movs	r3, #63	@ 0x3f
 800337c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 8003380:	238a      	movs	r3, #138	@ 0x8a
 8003382:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800338e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003392:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800339e:	2307      	movs	r3, #7
 80033a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80033a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fc7e 	bl	8003cac <hci_send_req>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	da01      	bge.n	80033ba <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80033b6:	23ff      	movs	r3, #255	@ 0xff
 80033b8:	e02e      	b.n	8003418 <aci_gap_init+0x150>
  if (resp.Status) {
 80033ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80033be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <aci_gap_init+0x10c>
    return resp.Status;
 80033c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80033cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	e021      	b.n	8003418 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80033d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80033d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80033e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80033ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80033f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003400:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8003402:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003406:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800340a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800340e:	b29a      	uxth	r2, r3
 8003410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003414:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800341e:	46bd      	mov	sp, r7
 8003420:	bd90      	pop	{r4, r7, pc}

08003422 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b088      	sub	sp, #32
 8003426:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	2218      	movs	r2, #24
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f001 f8ad 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 800343a:	233f      	movs	r3, #63	@ 0x3f
 800343c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800343e:	f240 1301 	movw	r3, #257	@ 0x101
 8003442:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003448:	2301      	movs	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc2a 	bl	8003cac <hci_send_req>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	da01      	bge.n	8003462 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800345e:	23ff      	movs	r3, #255	@ 0xff
 8003460:	e005      	b.n	800346e <aci_gatt_init+0x4c>
  if (status) {
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <aci_gatt_init+0x4a>
    return status;
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	e000      	b.n	800346e <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b0cf      	sub	sp, #316	@ 0x13c
 800347a:	af00      	add	r7, sp, #0
 800347c:	4604      	mov	r4, r0
 800347e:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8003482:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8003486:	6001      	str	r1, [r0, #0]
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003490:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003494:	4622      	mov	r2, r4
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800349c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80034a0:	4602      	mov	r2, r0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80034a8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80034ac:	460a      	mov	r2, r1
 80034ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80034b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80034bc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00a      	beq.n	80034dc <aci_gatt_add_service+0x66>
 80034c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80034ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d101      	bne.n	80034d8 <aci_gatt_add_service+0x62>
 80034d4:	2311      	movs	r3, #17
 80034d6:	e002      	b.n	80034de <aci_gatt_add_service+0x68>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <aci_gatt_add_service+0x68>
 80034dc:	2303      	movs	r3, #3
 80034de:	f107 020c 	add.w	r2, r7, #12
 80034e2:	4413      	add	r3, r2
 80034e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	2203      	movs	r2, #3
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 f84f 	bl	8004594 <memset>
  uint8_t index_input = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80034fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003500:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003504:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800350c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003510:	3301      	adds	r3, #1
 8003512:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8003516:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800351a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d002      	beq.n	800352a <aci_gatt_add_service+0xb4>
 8003524:	2b02      	cmp	r3, #2
 8003526:	d004      	beq.n	8003532 <aci_gatt_add_service+0xbc>
 8003528:	e007      	b.n	800353a <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 800352a:	2302      	movs	r3, #2
 800352c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8003530:	e005      	b.n	800353e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8003532:	2310      	movs	r3, #16
 8003534:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8003538:	e001      	b.n	800353e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800353a:	2347      	movs	r3, #71	@ 0x47
 800353c:	e06c      	b.n	8003618 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800353e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003542:	1c58      	adds	r0, r3, #1
 8003544:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8003548:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800354c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	f001 f89a 	bl	800468a <memcpy>
    index_input += size;
 8003556:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800355a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800355e:	4413      	add	r3, r2
 8003560:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8003564:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003568:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800356c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003574:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003578:	3301      	adds	r3, #1
 800357a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800357e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003582:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003586:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800358e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003592:	3301      	adds	r3, #1
 8003594:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003598:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800359c:	2218      	movs	r2, #24
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fff7 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 80035a6:	233f      	movs	r3, #63	@ 0x3f
 80035a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80035ac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80035b0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80035bc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80035c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80035cc:	2303      	movs	r3, #3
 80035ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80035d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fb67 	bl	8003cac <hci_send_req>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da01      	bge.n	80035e8 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80035e4:	23ff      	movs	r3, #255	@ 0xff
 80035e6:	e017      	b.n	8003618 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80035e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80035ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80035f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80035fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	e00a      	b.n	8003618 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003602:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003606:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800360a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800360e:	b29a      	uxth	r2, r3
 8003610:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003614:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}

08003622 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8003622:	b590      	push	{r4, r7, lr}
 8003624:	b0d1      	sub	sp, #324	@ 0x144
 8003626:	af00      	add	r7, sp, #0
 8003628:	4604      	mov	r4, r0
 800362a:	4608      	mov	r0, r1
 800362c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8003630:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8003634:	600a      	str	r2, [r1, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800363c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8003640:	4622      	mov	r2, r4
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003648:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800364c:	4602      	mov	r2, r0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003654:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8003658:	460a      	mov	r2, r1
 800365a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8003664:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003668:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d00a      	beq.n	8003688 <aci_gatt_add_char+0x66>
 8003672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003676:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d101      	bne.n	8003684 <aci_gatt_add_char+0x62>
 8003680:	2313      	movs	r3, #19
 8003682:	e002      	b.n	800368a <aci_gatt_add_char+0x68>
 8003684:	2303      	movs	r3, #3
 8003686:	e000      	b.n	800368a <aci_gatt_add_char+0x68>
 8003688:	2305      	movs	r3, #5
 800368a:	f107 0214 	add.w	r2, r7, #20
 800368e:	4413      	add	r3, r2
 8003690:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	2203      	movs	r2, #3
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 ff79 	bl	8004594 <memset>
  uint8_t index_input = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80036a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80036ac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80036b0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80036b4:	8812      	ldrh	r2, [r2, #0]
 80036b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80036b8:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80036bc:	3302      	adds	r3, #2
 80036be:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80036c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80036c6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80036ca:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80036d2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80036d6:	3301      	adds	r3, #1
 80036d8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80036dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80036e0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d002      	beq.n	80036f0 <aci_gatt_add_char+0xce>
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d004      	beq.n	80036f8 <aci_gatt_add_char+0xd6>
 80036ee:	e007      	b.n	8003700 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80036f6:	e005      	b.n	8003704 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80036f8:	2310      	movs	r3, #16
 80036fa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80036fe:	e001      	b.n	8003704 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8003700:	2347      	movs	r3, #71	@ 0x47
 8003702:	e091      	b.n	8003828 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8003704:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003708:	1cd8      	adds	r0, r3, #3
 800370a:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800370e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003712:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	f000 ffb7 	bl	800468a <memcpy>
    index_input += size;
 800371c:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8003720:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8003724:	4413      	add	r3, r2
 8003726:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800372a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800372e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003732:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8003736:	8812      	ldrh	r2, [r2, #0]
 8003738:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800373a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800373e:	3302      	adds	r3, #2
 8003740:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8003744:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003748:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800374c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800374e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003752:	3301      	adds	r3, #1
 8003754:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8003758:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800375c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8003760:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8003762:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003766:	3301      	adds	r3, #1
 8003768:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800376c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003770:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8003774:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8003776:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800377a:	3301      	adds	r3, #1
 800377c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8003780:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003784:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8003788:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800378a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800378e:	3301      	adds	r3, #1
 8003790:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8003794:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003798:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800379c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800379e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80037a2:	3301      	adds	r3, #1
 80037a4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80037ac:	2218      	movs	r2, #24
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 feef 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 80037b6:	233f      	movs	r3, #63	@ 0x3f
 80037b8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80037bc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80037c0:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80037cc:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80037d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80037dc:	2303      	movs	r3, #3
 80037de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80037e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fa5f 	bl	8003cac <hci_send_req>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da01      	bge.n	80037f8 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80037f4:	23ff      	movs	r3, #255	@ 0xff
 80037f6:	e017      	b.n	8003828 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80037f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8003806:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800380a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	e00a      	b.n	8003828 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8003812:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003816:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800381a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800381e:	b29a      	uxth	r2, r3
 8003820:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003824:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800382e:	46bd      	mov	sp, r7
 8003830:	bd90      	pop	{r4, r7, pc}

08003832 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8003832:	b5b0      	push	{r4, r5, r7, lr}
 8003834:	b0cc      	sub	sp, #304	@ 0x130
 8003836:	af00      	add	r7, sp, #0
 8003838:	4605      	mov	r5, r0
 800383a:	460c      	mov	r4, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003844:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8003848:	462a      	mov	r2, r5
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003850:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003854:	4622      	mov	r2, r4
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800385c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003860:	4602      	mov	r2, r0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003868:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800386c:	460a      	mov	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8003878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800387c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800388a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800388e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8003892:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800389a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800389e:	3302      	adds	r3, #2
 80038a0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80038a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80038ac:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80038b0:	8812      	ldrh	r2, [r2, #0]
 80038b2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80038b4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80038b8:	3302      	adds	r3, #2
 80038ba:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80038be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80038c6:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80038ce:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80038d2:	3301      	adds	r3, #1
 80038d4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80038d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80038e0:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80038e8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80038ec:	3301      	adds	r3, #1
 80038ee:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80038f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038f6:	1d98      	adds	r0, r3, #6
 80038f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80038fc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003908:	f000 febf 	bl	800468a <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800390c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003910:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8003914:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4413      	add	r3, r2
 800391c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003924:	2218      	movs	r2, #24
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fe33 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 800392e:	233f      	movs	r3, #63	@ 0x3f
 8003930:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8003934:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003938:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8003944:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003948:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800394c:	f107 030b 	add.w	r3, r7, #11
 8003950:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8003954:	2301      	movs	r3, #1
 8003956:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800395a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f9a3 	bl	8003cac <hci_send_req>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	da01      	bge.n	8003970 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800396c:	23ff      	movs	r3, #255	@ 0xff
 800396e:	e00d      	b.n	800398c <aci_gatt_update_char_value+0x15a>
  if (status) {
 8003970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003974:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <aci_gatt_update_char_value+0x158>
    return status;
 800397e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003982:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	e000      	b.n	800398c <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003992:	46bd      	mov	sp, r7
 8003994:	bdb0      	pop	{r4, r5, r7, pc}

08003996 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b0cc      	sub	sp, #304	@ 0x130
 800399a:	af00      	add	r7, sp, #0
 800399c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039aa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80039ae:	4602      	mov	r2, r0
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80039ba:	460a      	mov	r2, r1
 80039bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80039c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039ca:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 80039d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80039dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80039e0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80039e8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80039ec:	3301      	adds	r3, #1
 80039ee:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 80039f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80039f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80039fa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003a02:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003a06:	3301      	adds	r3, #1
 8003a08:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8003a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003a10:	1c98      	adds	r0, r3, #2
 8003a12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a16:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	f000 fe30 	bl	800468a <memcpy>
    index_input += Length*sizeof(uint8_t);
 8003a2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8003a32:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a42:	2218      	movs	r2, #24
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fda4 	bl	8004594 <memset>
  rq.ogf = 0x3f;
 8003a4c:	233f      	movs	r3, #63	@ 0x3f
 8003a4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8003a52:	230c      	movs	r3, #12
 8003a54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8003a60:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003a64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8003a68:	f107 030b 	add.w	r3, r7, #11
 8003a6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f915 	bl	8003cac <hci_send_req>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da01      	bge.n	8003a8c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003a88:	23ff      	movs	r3, #255	@ 0xff
 8003a8a:	e00d      	b.n	8003aa8 <aci_hal_write_config_data+0x112>
  if (status) {
 8003a8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a90:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <aci_hal_write_config_data+0x110>
    return status;
 8003a9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a9e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	e000      	b.n	8003aa8 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3308      	adds	r3, #8
 8003abe:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d001      	beq.n	8003acc <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e00c      	b.n	8003ae6 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3302      	adds	r3, #2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003ada:	3b03      	subs	r3, #3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e000      	b.n	8003ae6 <verify_packet+0x34>
  
  return 0;      
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0a6      	sub	sp, #152	@ 0x98
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	4603      	mov	r3, r0
 8003afe:	81fb      	strh	r3, [r7, #14]
 8003b00:	460b      	mov	r3, r1
 8003b02:	81bb      	strh	r3, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b10:	b21a      	sxth	r2, r3
 8003b12:	89fb      	ldrh	r3, [r7, #14]
 8003b14:	029b      	lsls	r3, r3, #10
 8003b16:	b21b      	sxth	r3, r3
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003b24:	2301      	movs	r3, #1
 8003b26:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003b28:	f107 0318 	add.w	r3, r7, #24
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	8819      	ldrh	r1, [r3, #0]
 8003b36:	789b      	ldrb	r3, [r3, #2]
 8003b38:	8011      	strh	r1, [r2, #0]
 8003b3a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003b3c:	f107 0318 	add.w	r3, r7, #24
 8003b40:	3304      	adds	r3, #4
 8003b42:	7afa      	ldrb	r2, [r7, #11]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fd9f 	bl	800468a <memcpy>
  
  if (hciContext.io.Send)
 8003b4c:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <send_cmd+0x7c>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <send_cmd+0x7c>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	7afa      	ldrb	r2, [r7, #11]
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	3204      	adds	r2, #4
 8003b5e:	b291      	uxth	r1, r2
 8003b60:	f107 0218 	add.w	r2, r7, #24
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3798      	adds	r7, #152	@ 0x98
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200007c8 	.word	0x200007c8

08003b74 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003b7e:	e00a      	b.n	8003b96 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4619      	mov	r1, r3
 8003b86:	6838      	ldr	r0, [r7, #0]
 8003b88:	f000 fabc 	bl	8004104 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa23 	bl	8003fdc <list_insert_head>
  while (!list_is_empty(src_list))
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f000 f9fe 	bl	8003f98 <list_is_empty>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <move_list+0xc>
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003bb2:	e009      	b.n	8003bc8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4809      	ldr	r0, [pc, #36]	@ (8003be0 <free_event_list+0x34>)
 8003bba:	f000 fa7c 	bl	80040b6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4808      	ldr	r0, [pc, #32]	@ (8003be4 <free_event_list+0x38>)
 8003bc4:	f000 fa30 	bl	8004028 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003bc8:	4806      	ldr	r0, [pc, #24]	@ (8003be4 <free_event_list+0x38>)
 8003bca:	f000 fac2 	bl	8004152 <list_get_size>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	ddef      	ble.n	8003bb4 <free_event_list+0x8>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000248 	.word	0x20000248
 8003be4:	20000240 	.word	0x20000240

08003be8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <hci_init+0x74>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003bfe:	4818      	ldr	r0, [pc, #96]	@ (8003c60 <hci_init+0x78>)
 8003c00:	f000 f9ba 	bl	8003f78 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003c04:	4817      	ldr	r0, [pc, #92]	@ (8003c64 <hci_init+0x7c>)
 8003c06:	f000 f9b7 	bl	8003f78 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003c0a:	f7fc fdd5 	bl	80007b8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	e00c      	b.n	8003c2e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	228c      	movs	r2, #140	@ 0x8c
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <hci_init+0x80>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	480f      	ldr	r0, [pc, #60]	@ (8003c60 <hci_init+0x78>)
 8003c24:	f000 fa00 	bl	8004028 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	d9ef      	bls.n	8003c14 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <hci_init+0x74>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <hci_init+0x5c>
 8003c3c:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <hci_init+0x74>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2000      	movs	r0, #0
 8003c42:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <hci_init+0x74>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <hci_init+0x6a>
 8003c4c:	4b03      	ldr	r3, [pc, #12]	@ (8003c5c <hci_init+0x74>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4798      	blx	r3
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200007c8 	.word	0x200007c8
 8003c60:	20000240 	.word	0x20000240
 8003c64:	20000248 	.word	0x20000248
 8003c68:	20000250 	.word	0x20000250

08003c6c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <hci_register_io_bus+0x3c>)
 8003c7a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a09      	ldr	r2, [pc, #36]	@ (8003ca8 <hci_register_io_bus+0x3c>)
 8003c82:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	4a07      	ldr	r2, [pc, #28]	@ (8003ca8 <hci_register_io_bus+0x3c>)
 8003c8a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a05      	ldr	r2, [pc, #20]	@ (8003ca8 <hci_register_io_bus+0x3c>)
 8003c92:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a03      	ldr	r2, [pc, #12]	@ (8003ca8 <hci_register_io_bus+0x3c>)
 8003c9a:	6093      	str	r3, [r2, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	200007c8 	.word	0x200007c8

08003cac <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08e      	sub	sp, #56	@ 0x38
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	885b      	ldrh	r3, [r3, #2]
 8003cbc:	b21b      	sxth	r3, r3
 8003cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc2:	b21a      	sxth	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	b21b      	sxth	r3, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b21b      	sxth	r3, r3
 8003cd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f94c 	bl	8003f78 <list_init_head>

  free_event_list();
 8003ce0:	f7ff ff64 	bl	8003bac <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8818      	ldrh	r0, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8859      	ldrh	r1, [r3, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f7ff fefd 	bl	8003af4 <send_cmd>
  
  if (async)
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <hci_send_req+0x58>
  {
    return 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e0e2      	b.n	8003eca <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003d04:	f7fd fac8 	bl	8001298 <HAL_GetTick>
 8003d08:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003d0a:	f7fd fac5 	bl	8001298 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d18:	f200 80b3 	bhi.w	8003e82 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003d1c:	486d      	ldr	r0, [pc, #436]	@ (8003ed4 <hci_send_req+0x228>)
 8003d1e:	f000 f93b 	bl	8003f98 <list_is_empty>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d000      	beq.n	8003d2a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003d28:	e7ef      	b.n	8003d0a <hci_send_req+0x5e>
      {
        break;
 8003d2a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	4619      	mov	r1, r3
 8003d32:	4868      	ldr	r0, [pc, #416]	@ (8003ed4 <hci_send_req+0x228>)
 8003d34:	f000 f9bf 	bl	80040b6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d17f      	bne.n	8003e46 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d48:	3301      	adds	r3, #1
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	3303      	adds	r3, #3
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003d5a:	3b03      	subs	r3, #3
 8003d5c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d64:	d04c      	beq.n	8003e00 <hci_send_req+0x154>
 8003d66:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d68:	dc68      	bgt.n	8003e3c <hci_send_req+0x190>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	f000 808b 	beq.w	8003e86 <hci_send_req+0x1da>
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	dc63      	bgt.n	8003e3c <hci_send_req+0x190>
 8003d74:	2b0e      	cmp	r3, #14
 8003d76:	d023      	beq.n	8003dc0 <hci_send_req+0x114>
 8003d78:	2b0f      	cmp	r3, #15
 8003d7a:	d15f      	bne.n	8003e3c <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	885b      	ldrh	r3, [r3, #2]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d17e      	bne.n	8003e8a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d004      	beq.n	8003d9e <hci_send_req+0xf2>
          if (cs->status) {
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d051      	beq.n	8003e40 <hci_send_req+0x194>
            goto failed;
 8003d9c:	e078      	b.n	8003e90 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	bf28      	it	cs
 8003da8:	461a      	movcs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6918      	ldr	r0, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dba:	f000 fc66 	bl	800468a <memcpy>
        goto done;
 8003dbe:	e078      	b.n	8003eb2 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d15d      	bne.n	8003e8e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3b03      	subs	r3, #3
 8003ddc:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	bf28      	it	cs
 8003de8:	461a      	movcs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6918      	ldr	r0, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dfa:	f000 fc46 	bl	800468a <memcpy>
        goto done;
 8003dfe:	e058      	b.n	8003eb2 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d118      	bne.n	8003e44 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf28      	it	cs
 8003e22:	461a      	movcs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6918      	ldr	r0, [r3, #16]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	1c59      	adds	r1, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f000 fc28 	bl	800468a <memcpy>
        goto done;
 8003e3a:	e03a      	b.n	8003eb2 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <hci_send_req+0x19a>
          break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <hci_send_req+0x19a>
          break;
 8003e44:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003e46:	4824      	ldr	r0, [pc, #144]	@ (8003ed8 <hci_send_req+0x22c>)
 8003e48:	f000 f8a6 	bl	8003f98 <list_is_empty>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <hci_send_req+0x1c2>
 8003e52:	4820      	ldr	r0, [pc, #128]	@ (8003ed4 <hci_send_req+0x228>)
 8003e54:	f000 f8a0 	bl	8003f98 <list_is_empty>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4619      	mov	r1, r3
 8003e62:	481d      	ldr	r0, [pc, #116]	@ (8003ed8 <hci_send_req+0x22c>)
 8003e64:	f000 f8e0 	bl	8004028 <list_insert_tail>
      hciReadPacket=NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e008      	b.n	8003e80 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f8d6 	bl	8004028 <list_insert_tail>
      hciReadPacket=NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  {
 8003e80:	e740      	b.n	8003d04 <hci_send_req+0x58>
        goto failed;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <hci_send_req+0x1e4>
        goto failed;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <hci_send_req+0x1e4>
          goto failed;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <hci_send_req+0x1e4>
          goto failed;
 8003e8e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480f      	ldr	r0, [pc, #60]	@ (8003ed8 <hci_send_req+0x22c>)
 8003e9c:	f000 f89e 	bl	8003fdc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003ea0:	f107 0308 	add.w	r3, r7, #8
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	480b      	ldr	r0, [pc, #44]	@ (8003ed4 <hci_send_req+0x228>)
 8003ea8:	f7ff fe64 	bl	8003b74 <move_list>

  return -1;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e00b      	b.n	8003eca <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4808      	ldr	r0, [pc, #32]	@ (8003ed8 <hci_send_req+0x22c>)
 8003eb8:	f000 f890 	bl	8003fdc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4804      	ldr	r0, [pc, #16]	@ (8003ed4 <hci_send_req+0x228>)
 8003ec4:	f7ff fe56 	bl	8003b74 <move_list>

  return 0;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3738      	adds	r7, #56	@ 0x38
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000248 	.word	0x20000248
 8003ed8:	20000240 	.word	0x20000240

08003edc <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003eec:	481f      	ldr	r0, [pc, #124]	@ (8003f6c <hci_notify_asynch_evt+0x90>)
 8003eee:	f000 f853 	bl	8003f98 <list_is_empty>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d132      	bne.n	8003f5e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	4619      	mov	r1, r3
 8003efe:	481b      	ldr	r0, [pc, #108]	@ (8003f6c <hci_notify_asynch_evt+0x90>)
 8003f00:	f000 f8d9 	bl	80040b6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003f04:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <hci_notify_asynch_evt+0x94>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02a      	beq.n	8003f62 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003f0c:	4b18      	ldr	r3, [pc, #96]	@ (8003f70 <hci_notify_asynch_evt+0x94>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	3208      	adds	r2, #8
 8003f14:	2180      	movs	r1, #128	@ 0x80
 8003f16:	4610      	mov	r0, r2
 8003f18:	4798      	blx	r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d016      	beq.n	8003f52 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	7cfa      	ldrb	r2, [r7, #19]
 8003f28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fdbf 	bl	8003ab2 <verify_packet>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	480d      	ldr	r0, [pc, #52]	@ (8003f74 <hci_notify_asynch_evt+0x98>)
 8003f40:	f000 f872 	bl	8004028 <list_insert_tail>
 8003f44:	e00d      	b.n	8003f62 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4808      	ldr	r0, [pc, #32]	@ (8003f6c <hci_notify_asynch_evt+0x90>)
 8003f4c:	f000 f846 	bl	8003fdc <list_insert_head>
 8003f50:	e007      	b.n	8003f62 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4805      	ldr	r0, [pc, #20]	@ (8003f6c <hci_notify_asynch_evt+0x90>)
 8003f58:	f000 f840 	bl	8003fdc <list_insert_head>
 8003f5c:	e001      	b.n	8003f62 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003f62:	697b      	ldr	r3, [r7, #20]
  
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000240 	.word	0x20000240
 8003f70:	200007c8 	.word	0x200007c8
 8003f74:	20000248 	.word	0x20000248

08003f78 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003faa:	b672      	cpsid	i
}
 8003fac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d102      	bne.n	8003fbe <list_is_empty+0x26>
  {
    return_value = 1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
 8003fbc:	e001      	b.n	8003fc2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fec:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003fee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff0:	b672      	cpsid	i
}
 8003ff2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	60fb      	str	r3, [r7, #12]
  return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800403a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800403c:	b672      	cpsid	i
}
 800403e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	60fb      	str	r3, [r7, #12]
  return(result);
 8004082:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004086:	b672      	cpsid	i
}
 8004088:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6852      	ldr	r2, [r2, #4]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ca:	b672      	cpsid	i
}
 80040cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ffca 	bl	8004074 <list_remove_node>
  (*node)->next = NULL;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80040fc:	bf00      	nop
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	60fb      	str	r3, [r7, #12]
  return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ffa3 	bl	8004074 <list_remove_node>
  (*node)->next = NULL;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8004152:	b480      	push	{r7}
 8004154:	b089      	sub	sp, #36	@ 0x24
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  int size = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8310 	mrs	r3, PRIMASK
 8004162:	613b      	str	r3, [r7, #16]
  return(result);
 8004164:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004168:	b672      	cpsid	i
}
 800416a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004172:	e005      	b.n	8004180 <list_get_size+0x2e>
  {
    size++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d1f5      	bne.n	8004174 <list_get_size+0x22>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f383 8810 	msr	PRIMASK, r3
}
 8004192:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004194:	69fb      	ldr	r3, [r7, #28]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	@ 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <std>:
 80041a4:	2300      	movs	r3, #0
 80041a6:	b510      	push	{r4, lr}
 80041a8:	4604      	mov	r4, r0
 80041aa:	e9c0 3300 	strd	r3, r3, [r0]
 80041ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041b2:	6083      	str	r3, [r0, #8]
 80041b4:	8181      	strh	r1, [r0, #12]
 80041b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80041b8:	81c2      	strh	r2, [r0, #14]
 80041ba:	6183      	str	r3, [r0, #24]
 80041bc:	4619      	mov	r1, r3
 80041be:	2208      	movs	r2, #8
 80041c0:	305c      	adds	r0, #92	@ 0x5c
 80041c2:	f000 f9e7 	bl	8004594 <memset>
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <std+0x58>)
 80041c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <std+0x5c>)
 80041cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <std+0x60>)
 80041d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <std+0x64>)
 80041d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <std+0x68>)
 80041d8:	6224      	str	r4, [r4, #32]
 80041da:	429c      	cmp	r4, r3
 80041dc:	d006      	beq.n	80041ec <std+0x48>
 80041de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041e2:	4294      	cmp	r4, r2
 80041e4:	d002      	beq.n	80041ec <std+0x48>
 80041e6:	33d0      	adds	r3, #208	@ 0xd0
 80041e8:	429c      	cmp	r4, r3
 80041ea:	d105      	bne.n	80041f8 <std+0x54>
 80041ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	f000 ba46 	b.w	8004684 <__retarget_lock_init_recursive>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	bf00      	nop
 80041fc:	080043e5 	.word	0x080043e5
 8004200:	08004407 	.word	0x08004407
 8004204:	0800443f 	.word	0x0800443f
 8004208:	08004463 	.word	0x08004463
 800420c:	200007e8 	.word	0x200007e8

08004210 <stdio_exit_handler>:
 8004210:	4a02      	ldr	r2, [pc, #8]	@ (800421c <stdio_exit_handler+0xc>)
 8004212:	4903      	ldr	r1, [pc, #12]	@ (8004220 <stdio_exit_handler+0x10>)
 8004214:	4803      	ldr	r0, [pc, #12]	@ (8004224 <stdio_exit_handler+0x14>)
 8004216:	f000 b869 	b.w	80042ec <_fwalk_sglue>
 800421a:	bf00      	nop
 800421c:	20000014 	.word	0x20000014
 8004220:	080049a1 	.word	0x080049a1
 8004224:	20000024 	.word	0x20000024

08004228 <cleanup_stdio>:
 8004228:	6841      	ldr	r1, [r0, #4]
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <cleanup_stdio+0x34>)
 800422c:	4299      	cmp	r1, r3
 800422e:	b510      	push	{r4, lr}
 8004230:	4604      	mov	r4, r0
 8004232:	d001      	beq.n	8004238 <cleanup_stdio+0x10>
 8004234:	f000 fbb4 	bl	80049a0 <_fflush_r>
 8004238:	68a1      	ldr	r1, [r4, #8]
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <cleanup_stdio+0x38>)
 800423c:	4299      	cmp	r1, r3
 800423e:	d002      	beq.n	8004246 <cleanup_stdio+0x1e>
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fbad 	bl	80049a0 <_fflush_r>
 8004246:	68e1      	ldr	r1, [r4, #12]
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <cleanup_stdio+0x3c>)
 800424a:	4299      	cmp	r1, r3
 800424c:	d004      	beq.n	8004258 <cleanup_stdio+0x30>
 800424e:	4620      	mov	r0, r4
 8004250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004254:	f000 bba4 	b.w	80049a0 <_fflush_r>
 8004258:	bd10      	pop	{r4, pc}
 800425a:	bf00      	nop
 800425c:	200007e8 	.word	0x200007e8
 8004260:	20000850 	.word	0x20000850
 8004264:	200008b8 	.word	0x200008b8

08004268 <global_stdio_init.part.0>:
 8004268:	b510      	push	{r4, lr}
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <global_stdio_init.part.0+0x30>)
 800426c:	4c0b      	ldr	r4, [pc, #44]	@ (800429c <global_stdio_init.part.0+0x34>)
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <global_stdio_init.part.0+0x38>)
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	4620      	mov	r0, r4
 8004274:	2200      	movs	r2, #0
 8004276:	2104      	movs	r1, #4
 8004278:	f7ff ff94 	bl	80041a4 <std>
 800427c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004280:	2201      	movs	r2, #1
 8004282:	2109      	movs	r1, #9
 8004284:	f7ff ff8e 	bl	80041a4 <std>
 8004288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800428c:	2202      	movs	r2, #2
 800428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004292:	2112      	movs	r1, #18
 8004294:	f7ff bf86 	b.w	80041a4 <std>
 8004298:	20000920 	.word	0x20000920
 800429c:	200007e8 	.word	0x200007e8
 80042a0:	08004211 	.word	0x08004211

080042a4 <__sfp_lock_acquire>:
 80042a4:	4801      	ldr	r0, [pc, #4]	@ (80042ac <__sfp_lock_acquire+0x8>)
 80042a6:	f000 b9ee 	b.w	8004686 <__retarget_lock_acquire_recursive>
 80042aa:	bf00      	nop
 80042ac:	20000929 	.word	0x20000929

080042b0 <__sfp_lock_release>:
 80042b0:	4801      	ldr	r0, [pc, #4]	@ (80042b8 <__sfp_lock_release+0x8>)
 80042b2:	f000 b9e9 	b.w	8004688 <__retarget_lock_release_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000929 	.word	0x20000929

080042bc <__sinit>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	4604      	mov	r4, r0
 80042c0:	f7ff fff0 	bl	80042a4 <__sfp_lock_acquire>
 80042c4:	6a23      	ldr	r3, [r4, #32]
 80042c6:	b11b      	cbz	r3, 80042d0 <__sinit+0x14>
 80042c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042cc:	f7ff bff0 	b.w	80042b0 <__sfp_lock_release>
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <__sinit+0x28>)
 80042d2:	6223      	str	r3, [r4, #32]
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <__sinit+0x2c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f5      	bne.n	80042c8 <__sinit+0xc>
 80042dc:	f7ff ffc4 	bl	8004268 <global_stdio_init.part.0>
 80042e0:	e7f2      	b.n	80042c8 <__sinit+0xc>
 80042e2:	bf00      	nop
 80042e4:	08004229 	.word	0x08004229
 80042e8:	20000920 	.word	0x20000920

080042ec <_fwalk_sglue>:
 80042ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4607      	mov	r7, r0
 80042f2:	4688      	mov	r8, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	2600      	movs	r6, #0
 80042f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004300:	d505      	bpl.n	800430e <_fwalk_sglue+0x22>
 8004302:	6824      	ldr	r4, [r4, #0]
 8004304:	2c00      	cmp	r4, #0
 8004306:	d1f7      	bne.n	80042f8 <_fwalk_sglue+0xc>
 8004308:	4630      	mov	r0, r6
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	89ab      	ldrh	r3, [r5, #12]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d907      	bls.n	8004324 <_fwalk_sglue+0x38>
 8004314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004318:	3301      	adds	r3, #1
 800431a:	d003      	beq.n	8004324 <_fwalk_sglue+0x38>
 800431c:	4629      	mov	r1, r5
 800431e:	4638      	mov	r0, r7
 8004320:	47c0      	blx	r8
 8004322:	4306      	orrs	r6, r0
 8004324:	3568      	adds	r5, #104	@ 0x68
 8004326:	e7e9      	b.n	80042fc <_fwalk_sglue+0x10>

08004328 <_puts_r>:
 8004328:	6a03      	ldr	r3, [r0, #32]
 800432a:	b570      	push	{r4, r5, r6, lr}
 800432c:	6884      	ldr	r4, [r0, #8]
 800432e:	4605      	mov	r5, r0
 8004330:	460e      	mov	r6, r1
 8004332:	b90b      	cbnz	r3, 8004338 <_puts_r+0x10>
 8004334:	f7ff ffc2 	bl	80042bc <__sinit>
 8004338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800433a:	07db      	lsls	r3, r3, #31
 800433c:	d405      	bmi.n	800434a <_puts_r+0x22>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	0598      	lsls	r0, r3, #22
 8004342:	d402      	bmi.n	800434a <_puts_r+0x22>
 8004344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004346:	f000 f99e 	bl	8004686 <__retarget_lock_acquire_recursive>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	0719      	lsls	r1, r3, #28
 800434e:	d502      	bpl.n	8004356 <_puts_r+0x2e>
 8004350:	6923      	ldr	r3, [r4, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d135      	bne.n	80043c2 <_puts_r+0x9a>
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	f000 f8c5 	bl	80044e8 <__swsetup_r>
 800435e:	b380      	cbz	r0, 80043c2 <_puts_r+0x9a>
 8004360:	f04f 35ff 	mov.w	r5, #4294967295
 8004364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004366:	07da      	lsls	r2, r3, #31
 8004368:	d405      	bmi.n	8004376 <_puts_r+0x4e>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	059b      	lsls	r3, r3, #22
 800436e:	d402      	bmi.n	8004376 <_puts_r+0x4e>
 8004370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004372:	f000 f989 	bl	8004688 <__retarget_lock_release_recursive>
 8004376:	4628      	mov	r0, r5
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	2b00      	cmp	r3, #0
 800437c:	da04      	bge.n	8004388 <_puts_r+0x60>
 800437e:	69a2      	ldr	r2, [r4, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	dc17      	bgt.n	80043b4 <_puts_r+0x8c>
 8004384:	290a      	cmp	r1, #10
 8004386:	d015      	beq.n	80043b4 <_puts_r+0x8c>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	6022      	str	r2, [r4, #0]
 800438e:	7019      	strb	r1, [r3, #0]
 8004390:	68a3      	ldr	r3, [r4, #8]
 8004392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004396:	3b01      	subs	r3, #1
 8004398:	60a3      	str	r3, [r4, #8]
 800439a:	2900      	cmp	r1, #0
 800439c:	d1ed      	bne.n	800437a <_puts_r+0x52>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da11      	bge.n	80043c6 <_puts_r+0x9e>
 80043a2:	4622      	mov	r2, r4
 80043a4:	210a      	movs	r1, #10
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f85f 	bl	800446a <__swbuf_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d0d7      	beq.n	8004360 <_puts_r+0x38>
 80043b0:	250a      	movs	r5, #10
 80043b2:	e7d7      	b.n	8004364 <_puts_r+0x3c>
 80043b4:	4622      	mov	r2, r4
 80043b6:	4628      	mov	r0, r5
 80043b8:	f000 f857 	bl	800446a <__swbuf_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	d1e7      	bne.n	8004390 <_puts_r+0x68>
 80043c0:	e7ce      	b.n	8004360 <_puts_r+0x38>
 80043c2:	3e01      	subs	r6, #1
 80043c4:	e7e4      	b.n	8004390 <_puts_r+0x68>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	6022      	str	r2, [r4, #0]
 80043cc:	220a      	movs	r2, #10
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	e7ee      	b.n	80043b0 <_puts_r+0x88>
	...

080043d4 <puts>:
 80043d4:	4b02      	ldr	r3, [pc, #8]	@ (80043e0 <puts+0xc>)
 80043d6:	4601      	mov	r1, r0
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f7ff bfa5 	b.w	8004328 <_puts_r>
 80043de:	bf00      	nop
 80043e0:	20000020 	.word	0x20000020

080043e4 <__sread>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	460c      	mov	r4, r1
 80043e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ec:	f000 f8fc 	bl	80045e8 <_read_r>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	bfab      	itete	ge
 80043f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043f6:	89a3      	ldrhlt	r3, [r4, #12]
 80043f8:	181b      	addge	r3, r3, r0
 80043fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043fe:	bfac      	ite	ge
 8004400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004402:	81a3      	strhlt	r3, [r4, #12]
 8004404:	bd10      	pop	{r4, pc}

08004406 <__swrite>:
 8004406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440a:	461f      	mov	r7, r3
 800440c:	898b      	ldrh	r3, [r1, #12]
 800440e:	05db      	lsls	r3, r3, #23
 8004410:	4605      	mov	r5, r0
 8004412:	460c      	mov	r4, r1
 8004414:	4616      	mov	r6, r2
 8004416:	d505      	bpl.n	8004424 <__swrite+0x1e>
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	2302      	movs	r3, #2
 800441e:	2200      	movs	r2, #0
 8004420:	f000 f8d0 	bl	80045c4 <_lseek_r>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800442a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	4632      	mov	r2, r6
 8004432:	463b      	mov	r3, r7
 8004434:	4628      	mov	r0, r5
 8004436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	f000 b8e7 	b.w	800460c <_write_r>

0800443e <__sseek>:
 800443e:	b510      	push	{r4, lr}
 8004440:	460c      	mov	r4, r1
 8004442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004446:	f000 f8bd 	bl	80045c4 <_lseek_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	bf15      	itete	ne
 8004450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800445a:	81a3      	strheq	r3, [r4, #12]
 800445c:	bf18      	it	ne
 800445e:	81a3      	strhne	r3, [r4, #12]
 8004460:	bd10      	pop	{r4, pc}

08004462 <__sclose>:
 8004462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004466:	f000 b89d 	b.w	80045a4 <_close_r>

0800446a <__swbuf_r>:
 800446a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446c:	460e      	mov	r6, r1
 800446e:	4614      	mov	r4, r2
 8004470:	4605      	mov	r5, r0
 8004472:	b118      	cbz	r0, 800447c <__swbuf_r+0x12>
 8004474:	6a03      	ldr	r3, [r0, #32]
 8004476:	b90b      	cbnz	r3, 800447c <__swbuf_r+0x12>
 8004478:	f7ff ff20 	bl	80042bc <__sinit>
 800447c:	69a3      	ldr	r3, [r4, #24]
 800447e:	60a3      	str	r3, [r4, #8]
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	071a      	lsls	r2, r3, #28
 8004484:	d501      	bpl.n	800448a <__swbuf_r+0x20>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	b943      	cbnz	r3, 800449c <__swbuf_r+0x32>
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f82b 	bl	80044e8 <__swsetup_r>
 8004492:	b118      	cbz	r0, 800449c <__swbuf_r+0x32>
 8004494:	f04f 37ff 	mov.w	r7, #4294967295
 8004498:	4638      	mov	r0, r7
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	6922      	ldr	r2, [r4, #16]
 80044a0:	1a98      	subs	r0, r3, r2
 80044a2:	6963      	ldr	r3, [r4, #20]
 80044a4:	b2f6      	uxtb	r6, r6
 80044a6:	4283      	cmp	r3, r0
 80044a8:	4637      	mov	r7, r6
 80044aa:	dc05      	bgt.n	80044b8 <__swbuf_r+0x4e>
 80044ac:	4621      	mov	r1, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 fa76 	bl	80049a0 <_fflush_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d1ed      	bne.n	8004494 <__swbuf_r+0x2a>
 80044b8:	68a3      	ldr	r3, [r4, #8]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	60a3      	str	r3, [r4, #8]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	701e      	strb	r6, [r3, #0]
 80044c6:	6962      	ldr	r2, [r4, #20]
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d004      	beq.n	80044d8 <__swbuf_r+0x6e>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	07db      	lsls	r3, r3, #31
 80044d2:	d5e1      	bpl.n	8004498 <__swbuf_r+0x2e>
 80044d4:	2e0a      	cmp	r6, #10
 80044d6:	d1df      	bne.n	8004498 <__swbuf_r+0x2e>
 80044d8:	4621      	mov	r1, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fa60 	bl	80049a0 <_fflush_r>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d0d9      	beq.n	8004498 <__swbuf_r+0x2e>
 80044e4:	e7d6      	b.n	8004494 <__swbuf_r+0x2a>
	...

080044e8 <__swsetup_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4b29      	ldr	r3, [pc, #164]	@ (8004590 <__swsetup_r+0xa8>)
 80044ec:	4605      	mov	r5, r0
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	460c      	mov	r4, r1
 80044f2:	b118      	cbz	r0, 80044fc <__swsetup_r+0x14>
 80044f4:	6a03      	ldr	r3, [r0, #32]
 80044f6:	b90b      	cbnz	r3, 80044fc <__swsetup_r+0x14>
 80044f8:	f7ff fee0 	bl	80042bc <__sinit>
 80044fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004500:	0719      	lsls	r1, r3, #28
 8004502:	d422      	bmi.n	800454a <__swsetup_r+0x62>
 8004504:	06da      	lsls	r2, r3, #27
 8004506:	d407      	bmi.n	8004518 <__swsetup_r+0x30>
 8004508:	2209      	movs	r2, #9
 800450a:	602a      	str	r2, [r5, #0]
 800450c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	e033      	b.n	8004580 <__swsetup_r+0x98>
 8004518:	0758      	lsls	r0, r3, #29
 800451a:	d512      	bpl.n	8004542 <__swsetup_r+0x5a>
 800451c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800451e:	b141      	cbz	r1, 8004532 <__swsetup_r+0x4a>
 8004520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004524:	4299      	cmp	r1, r3
 8004526:	d002      	beq.n	800452e <__swsetup_r+0x46>
 8004528:	4628      	mov	r0, r5
 800452a:	f000 f8bd 	bl	80046a8 <_free_r>
 800452e:	2300      	movs	r3, #0
 8004530:	6363      	str	r3, [r4, #52]	@ 0x34
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	2300      	movs	r3, #0
 800453c:	6063      	str	r3, [r4, #4]
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	b94b      	cbnz	r3, 8004562 <__swsetup_r+0x7a>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004558:	d003      	beq.n	8004562 <__swsetup_r+0x7a>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 fa6d 	bl	8004a3c <__smakebuf_r>
 8004562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004566:	f013 0201 	ands.w	r2, r3, #1
 800456a:	d00a      	beq.n	8004582 <__swsetup_r+0x9a>
 800456c:	2200      	movs	r2, #0
 800456e:	60a2      	str	r2, [r4, #8]
 8004570:	6962      	ldr	r2, [r4, #20]
 8004572:	4252      	negs	r2, r2
 8004574:	61a2      	str	r2, [r4, #24]
 8004576:	6922      	ldr	r2, [r4, #16]
 8004578:	b942      	cbnz	r2, 800458c <__swsetup_r+0xa4>
 800457a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800457e:	d1c5      	bne.n	800450c <__swsetup_r+0x24>
 8004580:	bd38      	pop	{r3, r4, r5, pc}
 8004582:	0799      	lsls	r1, r3, #30
 8004584:	bf58      	it	pl
 8004586:	6962      	ldrpl	r2, [r4, #20]
 8004588:	60a2      	str	r2, [r4, #8]
 800458a:	e7f4      	b.n	8004576 <__swsetup_r+0x8e>
 800458c:	2000      	movs	r0, #0
 800458e:	e7f7      	b.n	8004580 <__swsetup_r+0x98>
 8004590:	20000020 	.word	0x20000020

08004594 <memset>:
 8004594:	4402      	add	r2, r0
 8004596:	4603      	mov	r3, r0
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <memset+0xa>
 800459c:	4770      	bx	lr
 800459e:	f803 1b01 	strb.w	r1, [r3], #1
 80045a2:	e7f9      	b.n	8004598 <memset+0x4>

080045a4 <_close_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d06      	ldr	r5, [pc, #24]	@ (80045c0 <_close_r+0x1c>)
 80045a8:	2300      	movs	r3, #0
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fc fd65 	bl	800107e <_close>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_close_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_close_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000924 	.word	0x20000924

080045c4 <_lseek_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	@ (80045e4 <_lseek_r+0x20>)
 80045c8:	4604      	mov	r4, r0
 80045ca:	4608      	mov	r0, r1
 80045cc:	4611      	mov	r1, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fc fd7a 	bl	80010cc <_lseek>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_lseek_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_lseek_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000924 	.word	0x20000924

080045e8 <_read_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	@ (8004608 <_read_r+0x20>)
 80045ec:	4604      	mov	r4, r0
 80045ee:	4608      	mov	r0, r1
 80045f0:	4611      	mov	r1, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fc fd08 	bl	800100c <_read>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_read_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_read_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000924 	.word	0x20000924

0800460c <_write_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	@ (800462c <_write_r+0x20>)
 8004610:	4604      	mov	r4, r0
 8004612:	4608      	mov	r0, r1
 8004614:	4611      	mov	r1, r2
 8004616:	2200      	movs	r2, #0
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fc fd13 	bl	8001046 <_write>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_write_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_write_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000924 	.word	0x20000924

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	@ (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000020 	.word	0x20000020

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	4d0d      	ldr	r5, [pc, #52]	@ (8004674 <__libc_init_array+0x38>)
 8004640:	4c0d      	ldr	r4, [pc, #52]	@ (8004678 <__libc_init_array+0x3c>)
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	2600      	movs	r6, #0
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	4d0b      	ldr	r5, [pc, #44]	@ (800467c <__libc_init_array+0x40>)
 800464e:	4c0c      	ldr	r4, [pc, #48]	@ (8004680 <__libc_init_array+0x44>)
 8004650:	f000 fa62 	bl	8004b18 <_init>
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	2600      	movs	r6, #0
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08004c80 	.word	0x08004c80
 8004678:	08004c80 	.word	0x08004c80
 800467c:	08004c80 	.word	0x08004c80
 8004680:	08004c84 	.word	0x08004c84

08004684 <__retarget_lock_init_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_acquire_recursive>:
 8004686:	4770      	bx	lr

08004688 <__retarget_lock_release_recursive>:
 8004688:	4770      	bx	lr

0800468a <memcpy>:
 800468a:	440a      	add	r2, r1
 800468c:	4291      	cmp	r1, r2
 800468e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004692:	d100      	bne.n	8004696 <memcpy+0xc>
 8004694:	4770      	bx	lr
 8004696:	b510      	push	{r4, lr}
 8004698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a0:	4291      	cmp	r1, r2
 80046a2:	d1f9      	bne.n	8004698 <memcpy+0xe>
 80046a4:	bd10      	pop	{r4, pc}
	...

080046a8 <_free_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4605      	mov	r5, r0
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d041      	beq.n	8004734 <_free_r+0x8c>
 80046b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b4:	1f0c      	subs	r4, r1, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfb8      	it	lt
 80046ba:	18e4      	addlt	r4, r4, r3
 80046bc:	f000 f8e0 	bl	8004880 <__malloc_lock>
 80046c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004738 <_free_r+0x90>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	b933      	cbnz	r3, 80046d4 <_free_r+0x2c>
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	6014      	str	r4, [r2, #0]
 80046ca:	4628      	mov	r0, r5
 80046cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046d0:	f000 b8dc 	b.w	800488c <__malloc_unlock>
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d908      	bls.n	80046ea <_free_r+0x42>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	1821      	adds	r1, r4, r0
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf01      	itttt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	1809      	addeq	r1, r1, r0
 80046e6:	6021      	streq	r1, [r4, #0]
 80046e8:	e7ed      	b.n	80046c6 <_free_r+0x1e>
 80046ea:	461a      	mov	r2, r3
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b10b      	cbz	r3, 80046f4 <_free_r+0x4c>
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d9fa      	bls.n	80046ea <_free_r+0x42>
 80046f4:	6811      	ldr	r1, [r2, #0]
 80046f6:	1850      	adds	r0, r2, r1
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d10b      	bne.n	8004714 <_free_r+0x6c>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	4401      	add	r1, r0
 8004700:	1850      	adds	r0, r2, r1
 8004702:	4283      	cmp	r3, r0
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	d1e0      	bne.n	80046ca <_free_r+0x22>
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	6053      	str	r3, [r2, #4]
 800470e:	4408      	add	r0, r1
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e7da      	b.n	80046ca <_free_r+0x22>
 8004714:	d902      	bls.n	800471c <_free_r+0x74>
 8004716:	230c      	movs	r3, #12
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	e7d6      	b.n	80046ca <_free_r+0x22>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	1821      	adds	r1, r4, r0
 8004720:	428b      	cmp	r3, r1
 8004722:	bf04      	itt	eq
 8004724:	6819      	ldreq	r1, [r3, #0]
 8004726:	685b      	ldreq	r3, [r3, #4]
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	bf04      	itt	eq
 800472c:	1809      	addeq	r1, r1, r0
 800472e:	6021      	streq	r1, [r4, #0]
 8004730:	6054      	str	r4, [r2, #4]
 8004732:	e7ca      	b.n	80046ca <_free_r+0x22>
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	bf00      	nop
 8004738:	20000930 	.word	0x20000930

0800473c <sbrk_aligned>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4e0f      	ldr	r6, [pc, #60]	@ (800477c <sbrk_aligned+0x40>)
 8004740:	460c      	mov	r4, r1
 8004742:	6831      	ldr	r1, [r6, #0]
 8004744:	4605      	mov	r5, r0
 8004746:	b911      	cbnz	r1, 800474e <sbrk_aligned+0x12>
 8004748:	f000 f9d6 	bl	8004af8 <_sbrk_r>
 800474c:	6030      	str	r0, [r6, #0]
 800474e:	4621      	mov	r1, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 f9d1 	bl	8004af8 <_sbrk_r>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	d103      	bne.n	8004762 <sbrk_aligned+0x26>
 800475a:	f04f 34ff 	mov.w	r4, #4294967295
 800475e:	4620      	mov	r0, r4
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d0f8      	beq.n	800475e <sbrk_aligned+0x22>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f9c2 	bl	8004af8 <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d1f2      	bne.n	800475e <sbrk_aligned+0x22>
 8004778:	e7ef      	b.n	800475a <sbrk_aligned+0x1e>
 800477a:	bf00      	nop
 800477c:	2000092c 	.word	0x2000092c

08004780 <_malloc_r>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	1ccd      	adds	r5, r1, #3
 8004786:	f025 0503 	bic.w	r5, r5, #3
 800478a:	3508      	adds	r5, #8
 800478c:	2d0c      	cmp	r5, #12
 800478e:	bf38      	it	cc
 8004790:	250c      	movcc	r5, #12
 8004792:	2d00      	cmp	r5, #0
 8004794:	4606      	mov	r6, r0
 8004796:	db01      	blt.n	800479c <_malloc_r+0x1c>
 8004798:	42a9      	cmp	r1, r5
 800479a:	d904      	bls.n	80047a6 <_malloc_r+0x26>
 800479c:	230c      	movs	r3, #12
 800479e:	6033      	str	r3, [r6, #0]
 80047a0:	2000      	movs	r0, #0
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800487c <_malloc_r+0xfc>
 80047aa:	f000 f869 	bl	8004880 <__malloc_lock>
 80047ae:	f8d8 3000 	ldr.w	r3, [r8]
 80047b2:	461c      	mov	r4, r3
 80047b4:	bb44      	cbnz	r4, 8004808 <_malloc_r+0x88>
 80047b6:	4629      	mov	r1, r5
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7ff ffbf 	bl	800473c <sbrk_aligned>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	4604      	mov	r4, r0
 80047c2:	d158      	bne.n	8004876 <_malloc_r+0xf6>
 80047c4:	f8d8 4000 	ldr.w	r4, [r8]
 80047c8:	4627      	mov	r7, r4
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	d143      	bne.n	8004856 <_malloc_r+0xd6>
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d04b      	beq.n	800486a <_malloc_r+0xea>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	4639      	mov	r1, r7
 80047d6:	4630      	mov	r0, r6
 80047d8:	eb04 0903 	add.w	r9, r4, r3
 80047dc:	f000 f98c 	bl	8004af8 <_sbrk_r>
 80047e0:	4581      	cmp	r9, r0
 80047e2:	d142      	bne.n	800486a <_malloc_r+0xea>
 80047e4:	6821      	ldr	r1, [r4, #0]
 80047e6:	1a6d      	subs	r5, r5, r1
 80047e8:	4629      	mov	r1, r5
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7ff ffa6 	bl	800473c <sbrk_aligned>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d03a      	beq.n	800486a <_malloc_r+0xea>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	442b      	add	r3, r5
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	f8d8 3000 	ldr.w	r3, [r8]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	bb62      	cbnz	r2, 800485c <_malloc_r+0xdc>
 8004802:	f8c8 7000 	str.w	r7, [r8]
 8004806:	e00f      	b.n	8004828 <_malloc_r+0xa8>
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	1b52      	subs	r2, r2, r5
 800480c:	d420      	bmi.n	8004850 <_malloc_r+0xd0>
 800480e:	2a0b      	cmp	r2, #11
 8004810:	d917      	bls.n	8004842 <_malloc_r+0xc2>
 8004812:	1961      	adds	r1, r4, r5
 8004814:	42a3      	cmp	r3, r4
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	bf18      	it	ne
 800481a:	6059      	strne	r1, [r3, #4]
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	bf08      	it	eq
 8004820:	f8c8 1000 	streq.w	r1, [r8]
 8004824:	5162      	str	r2, [r4, r5]
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f82f 	bl	800488c <__malloc_unlock>
 800482e:	f104 000b 	add.w	r0, r4, #11
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	f020 0007 	bic.w	r0, r0, #7
 8004838:	1ac2      	subs	r2, r0, r3
 800483a:	bf1c      	itt	ne
 800483c:	1a1b      	subne	r3, r3, r0
 800483e:	50a3      	strne	r3, [r4, r2]
 8004840:	e7af      	b.n	80047a2 <_malloc_r+0x22>
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	42a3      	cmp	r3, r4
 8004846:	bf0c      	ite	eq
 8004848:	f8c8 2000 	streq.w	r2, [r8]
 800484c:	605a      	strne	r2, [r3, #4]
 800484e:	e7eb      	b.n	8004828 <_malloc_r+0xa8>
 8004850:	4623      	mov	r3, r4
 8004852:	6864      	ldr	r4, [r4, #4]
 8004854:	e7ae      	b.n	80047b4 <_malloc_r+0x34>
 8004856:	463c      	mov	r4, r7
 8004858:	687f      	ldr	r7, [r7, #4]
 800485a:	e7b6      	b.n	80047ca <_malloc_r+0x4a>
 800485c:	461a      	mov	r2, r3
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	42a3      	cmp	r3, r4
 8004862:	d1fb      	bne.n	800485c <_malloc_r+0xdc>
 8004864:	2300      	movs	r3, #0
 8004866:	6053      	str	r3, [r2, #4]
 8004868:	e7de      	b.n	8004828 <_malloc_r+0xa8>
 800486a:	230c      	movs	r3, #12
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	4630      	mov	r0, r6
 8004870:	f000 f80c 	bl	800488c <__malloc_unlock>
 8004874:	e794      	b.n	80047a0 <_malloc_r+0x20>
 8004876:	6005      	str	r5, [r0, #0]
 8004878:	e7d6      	b.n	8004828 <_malloc_r+0xa8>
 800487a:	bf00      	nop
 800487c:	20000930 	.word	0x20000930

08004880 <__malloc_lock>:
 8004880:	4801      	ldr	r0, [pc, #4]	@ (8004888 <__malloc_lock+0x8>)
 8004882:	f7ff bf00 	b.w	8004686 <__retarget_lock_acquire_recursive>
 8004886:	bf00      	nop
 8004888:	20000928 	.word	0x20000928

0800488c <__malloc_unlock>:
 800488c:	4801      	ldr	r0, [pc, #4]	@ (8004894 <__malloc_unlock+0x8>)
 800488e:	f7ff befb 	b.w	8004688 <__retarget_lock_release_recursive>
 8004892:	bf00      	nop
 8004894:	20000928 	.word	0x20000928

08004898 <__sflush_r>:
 8004898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a0:	0716      	lsls	r6, r2, #28
 80048a2:	4605      	mov	r5, r0
 80048a4:	460c      	mov	r4, r1
 80048a6:	d454      	bmi.n	8004952 <__sflush_r+0xba>
 80048a8:	684b      	ldr	r3, [r1, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dc02      	bgt.n	80048b4 <__sflush_r+0x1c>
 80048ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dd48      	ble.n	8004946 <__sflush_r+0xae>
 80048b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d045      	beq.n	8004946 <__sflush_r+0xae>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048c0:	682f      	ldr	r7, [r5, #0]
 80048c2:	6a21      	ldr	r1, [r4, #32]
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	d030      	beq.n	800492a <__sflush_r+0x92>
 80048c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	0759      	lsls	r1, r3, #29
 80048ce:	d505      	bpl.n	80048dc <__sflush_r+0x44>
 80048d0:	6863      	ldr	r3, [r4, #4]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048d6:	b10b      	cbz	r3, 80048dc <__sflush_r+0x44>
 80048d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048e0:	6a21      	ldr	r1, [r4, #32]
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b0      	blx	r6
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	d106      	bne.n	80048fa <__sflush_r+0x62>
 80048ec:	6829      	ldr	r1, [r5, #0]
 80048ee:	291d      	cmp	r1, #29
 80048f0:	d82b      	bhi.n	800494a <__sflush_r+0xb2>
 80048f2:	4a2a      	ldr	r2, [pc, #168]	@ (800499c <__sflush_r+0x104>)
 80048f4:	410a      	asrs	r2, r1
 80048f6:	07d6      	lsls	r6, r2, #31
 80048f8:	d427      	bmi.n	800494a <__sflush_r+0xb2>
 80048fa:	2200      	movs	r2, #0
 80048fc:	6062      	str	r2, [r4, #4]
 80048fe:	04d9      	lsls	r1, r3, #19
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	6022      	str	r2, [r4, #0]
 8004904:	d504      	bpl.n	8004910 <__sflush_r+0x78>
 8004906:	1c42      	adds	r2, r0, #1
 8004908:	d101      	bne.n	800490e <__sflush_r+0x76>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	b903      	cbnz	r3, 8004910 <__sflush_r+0x78>
 800490e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004912:	602f      	str	r7, [r5, #0]
 8004914:	b1b9      	cbz	r1, 8004946 <__sflush_r+0xae>
 8004916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800491a:	4299      	cmp	r1, r3
 800491c:	d002      	beq.n	8004924 <__sflush_r+0x8c>
 800491e:	4628      	mov	r0, r5
 8004920:	f7ff fec2 	bl	80046a8 <_free_r>
 8004924:	2300      	movs	r3, #0
 8004926:	6363      	str	r3, [r4, #52]	@ 0x34
 8004928:	e00d      	b.n	8004946 <__sflush_r+0xae>
 800492a:	2301      	movs	r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	4602      	mov	r2, r0
 8004932:	1c50      	adds	r0, r2, #1
 8004934:	d1c9      	bne.n	80048ca <__sflush_r+0x32>
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c6      	beq.n	80048ca <__sflush_r+0x32>
 800493c:	2b1d      	cmp	r3, #29
 800493e:	d001      	beq.n	8004944 <__sflush_r+0xac>
 8004940:	2b16      	cmp	r3, #22
 8004942:	d11e      	bne.n	8004982 <__sflush_r+0xea>
 8004944:	602f      	str	r7, [r5, #0]
 8004946:	2000      	movs	r0, #0
 8004948:	e022      	b.n	8004990 <__sflush_r+0xf8>
 800494a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800494e:	b21b      	sxth	r3, r3
 8004950:	e01b      	b.n	800498a <__sflush_r+0xf2>
 8004952:	690f      	ldr	r7, [r1, #16]
 8004954:	2f00      	cmp	r7, #0
 8004956:	d0f6      	beq.n	8004946 <__sflush_r+0xae>
 8004958:	0793      	lsls	r3, r2, #30
 800495a:	680e      	ldr	r6, [r1, #0]
 800495c:	bf08      	it	eq
 800495e:	694b      	ldreq	r3, [r1, #20]
 8004960:	600f      	str	r7, [r1, #0]
 8004962:	bf18      	it	ne
 8004964:	2300      	movne	r3, #0
 8004966:	eba6 0807 	sub.w	r8, r6, r7
 800496a:	608b      	str	r3, [r1, #8]
 800496c:	f1b8 0f00 	cmp.w	r8, #0
 8004970:	dde9      	ble.n	8004946 <__sflush_r+0xae>
 8004972:	6a21      	ldr	r1, [r4, #32]
 8004974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004976:	4643      	mov	r3, r8
 8004978:	463a      	mov	r2, r7
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	2800      	cmp	r0, #0
 8004980:	dc08      	bgt.n	8004994 <__sflush_r+0xfc>
 8004982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004994:	4407      	add	r7, r0
 8004996:	eba8 0800 	sub.w	r8, r8, r0
 800499a:	e7e7      	b.n	800496c <__sflush_r+0xd4>
 800499c:	dfbffffe 	.word	0xdfbffffe

080049a0 <_fflush_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	690b      	ldr	r3, [r1, #16]
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b913      	cbnz	r3, 80049b0 <_fflush_r+0x10>
 80049aa:	2500      	movs	r5, #0
 80049ac:	4628      	mov	r0, r5
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	b118      	cbz	r0, 80049ba <_fflush_r+0x1a>
 80049b2:	6a03      	ldr	r3, [r0, #32]
 80049b4:	b90b      	cbnz	r3, 80049ba <_fflush_r+0x1a>
 80049b6:	f7ff fc81 	bl	80042bc <__sinit>
 80049ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f3      	beq.n	80049aa <_fflush_r+0xa>
 80049c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049c4:	07d0      	lsls	r0, r2, #31
 80049c6:	d404      	bmi.n	80049d2 <_fflush_r+0x32>
 80049c8:	0599      	lsls	r1, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_fflush_r+0x32>
 80049cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ce:	f7ff fe5a 	bl	8004686 <__retarget_lock_acquire_recursive>
 80049d2:	4628      	mov	r0, r5
 80049d4:	4621      	mov	r1, r4
 80049d6:	f7ff ff5f 	bl	8004898 <__sflush_r>
 80049da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049dc:	07da      	lsls	r2, r3, #31
 80049de:	4605      	mov	r5, r0
 80049e0:	d4e4      	bmi.n	80049ac <_fflush_r+0xc>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	059b      	lsls	r3, r3, #22
 80049e6:	d4e1      	bmi.n	80049ac <_fflush_r+0xc>
 80049e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ea:	f7ff fe4d 	bl	8004688 <__retarget_lock_release_recursive>
 80049ee:	e7dd      	b.n	80049ac <_fflush_r+0xc>

080049f0 <__swhatbuf_r>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	460c      	mov	r4, r1
 80049f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f8:	2900      	cmp	r1, #0
 80049fa:	b096      	sub	sp, #88	@ 0x58
 80049fc:	4615      	mov	r5, r2
 80049fe:	461e      	mov	r6, r3
 8004a00:	da0d      	bge.n	8004a1e <__swhatbuf_r+0x2e>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2340      	movne	r3, #64	@ 0x40
 8004a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a14:	2000      	movs	r0, #0
 8004a16:	6031      	str	r1, [r6, #0]
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	b016      	add	sp, #88	@ 0x58
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	466a      	mov	r2, sp
 8004a20:	f000 f848 	bl	8004ab4 <_fstat_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	dbec      	blt.n	8004a02 <__swhatbuf_r+0x12>
 8004a28:	9901      	ldr	r1, [sp, #4]
 8004a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a32:	4259      	negs	r1, r3
 8004a34:	4159      	adcs	r1, r3
 8004a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a3a:	e7eb      	b.n	8004a14 <__swhatbuf_r+0x24>

08004a3c <__smakebuf_r>:
 8004a3c:	898b      	ldrh	r3, [r1, #12]
 8004a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a40:	079d      	lsls	r5, r3, #30
 8004a42:	4606      	mov	r6, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	d507      	bpl.n	8004a58 <__smakebuf_r+0x1c>
 8004a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	6123      	str	r3, [r4, #16]
 8004a50:	2301      	movs	r3, #1
 8004a52:	6163      	str	r3, [r4, #20]
 8004a54:	b003      	add	sp, #12
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a58:	ab01      	add	r3, sp, #4
 8004a5a:	466a      	mov	r2, sp
 8004a5c:	f7ff ffc8 	bl	80049f0 <__swhatbuf_r>
 8004a60:	9f00      	ldr	r7, [sp, #0]
 8004a62:	4605      	mov	r5, r0
 8004a64:	4639      	mov	r1, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff fe8a 	bl	8004780 <_malloc_r>
 8004a6c:	b948      	cbnz	r0, 8004a82 <__smakebuf_r+0x46>
 8004a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a72:	059a      	lsls	r2, r3, #22
 8004a74:	d4ee      	bmi.n	8004a54 <__smakebuf_r+0x18>
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	f043 0302 	orr.w	r3, r3, #2
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	e7e2      	b.n	8004a48 <__smakebuf_r+0xc>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	6020      	str	r0, [r4, #0]
 8004a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	9b01      	ldr	r3, [sp, #4]
 8004a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a92:	b15b      	cbz	r3, 8004aac <__smakebuf_r+0x70>
 8004a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f000 f81d 	bl	8004ad8 <_isatty_r>
 8004a9e:	b128      	cbz	r0, 8004aac <__smakebuf_r+0x70>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	431d      	orrs	r5, r3
 8004ab0:	81a5      	strh	r5, [r4, #12]
 8004ab2:	e7cf      	b.n	8004a54 <__smakebuf_r+0x18>

08004ab4 <_fstat_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	@ (8004ad4 <_fstat_r+0x20>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	f7fc fae8 	bl	8001096 <_fstat>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	d102      	bne.n	8004ad0 <_fstat_r+0x1c>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	b103      	cbz	r3, 8004ad0 <_fstat_r+0x1c>
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000924 	.word	0x20000924

08004ad8 <_isatty_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d06      	ldr	r5, [pc, #24]	@ (8004af4 <_isatty_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fc fae7 	bl	80010b6 <_isatty>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_isatty_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_isatty_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20000924 	.word	0x20000924

08004af8 <_sbrk_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d06      	ldr	r5, [pc, #24]	@ (8004b14 <_sbrk_r+0x1c>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f7fc faf0 	bl	80010e8 <_sbrk>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_sbrk_r+0x1a>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_sbrk_r+0x1a>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20000924 	.word	0x20000924

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
