
BLE_sending_data_to_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006cec  08006cec  00007cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007138  08007138  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007140  08007140  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007148  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000070  080071b8  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  080071b8  00009938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018538  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  000215d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  000247c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  00025c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a095  00000000  00000000  00026c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001745e  00000000  00000000  00040d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094696  00000000  00000000  00058176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec80c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  000ec850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f2a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cd4 	.word	0x08006cd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006cd4 	.word	0x08006cd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000584:	2006      	movs	r0, #6
 8000586:	f001 f952 	bl	800182e <HAL_NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000592:	2006      	movs	r0, #6
 8000594:	f001 f959 	bl	800184a <HAL_NVIC_DisableIRQ>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b20      	ldr	r3, [pc, #128]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ac:	4a1f      	ldr	r2, [pc, #124]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b4:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c0:	2301      	movs	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <HCI_TL_SPI_Init+0x94>)
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	4818      	ldr	r0, [pc, #96]	@ (8000634 <HCI_TL_SPI_Init+0x98>)
 80005d4:	f001 f9a6 	bl	8001924 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4810      	ldr	r0, [pc, #64]	@ (8000634 <HCI_TL_SPI_Init+0x98>)
 80005f2:	f001 f997 	bl	8001924 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <HCI_TL_SPI_Init+0x98>)
 800060e:	f001 f989 	bl	8001924 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2102      	movs	r1, #2
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <HCI_TL_SPI_Init+0x98>)
 8000618:	f001 fc04 	bl	8001e24 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800061c:	f000 fd58 	bl	80010d0 <BSP_SPI1_Init>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	10110000 	.word	0x10110000
 8000634:	40020000 	.word	0x40020000

08000638 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800063c:	2101      	movs	r1, #1
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <HCI_TL_SPI_DeInit+0x24>)
 8000640:	f001 faf4 	bl	8001c2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000644:	2102      	movs	r1, #2
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <HCI_TL_SPI_DeInit+0x24>)
 8000648:	f001 faf0 	bl	8001c2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800064c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <HCI_TL_SPI_DeInit+0x24>)
 8000652:	f001 faeb 	bl	8001c2c <HAL_GPIO_DeInit>
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020000 	.word	0x40020000

08000660 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2102      	movs	r1, #2
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <HCI_TL_SPI_Reset+0x38>)
 800066a:	f001 fbdb 	bl	8001e24 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <HCI_TL_SPI_Reset+0x38>)
 8000676:	f001 fbd5 	bl	8001e24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f000 ff98 	bl	80015b0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <HCI_TL_SPI_Reset+0x38>)
 8000688:	f001 fbcc 	bl	8001e24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800068c:	2005      	movs	r0, #5
 800068e:	f000 ff8f 	bl	80015b0 <HAL_Delay>
  return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020000 	.word	0x40020000

0800069c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006ac:	2300      	movs	r3, #0
 80006ae:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <HCI_TL_SPI_Receive+0xb0>)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006c0:	f7ff ff65 	bl	800058e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <HCI_TL_SPI_Receive+0xb4>)
 80006ca:	f001 fbab 	bl	8001e24 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006ce:	f107 010c 	add.w	r1, r7, #12
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2205      	movs	r2, #5
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fd29 	bl	8001130 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006de:	7c3b      	ldrb	r3, [r7, #16]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006ee:	8bfb      	ldrh	r3, [r7, #30]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d01e      	beq.n	8000732 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006f4:	8bfa      	ldrh	r2, [r7, #30]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d901      	bls.n	8000700 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000700:	2300      	movs	r3, #0
 8000702:	777b      	strb	r3, [r7, #29]
 8000704:	e010      	b.n	8000728 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000706:	f107 011b 	add.w	r1, r7, #27
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2201      	movs	r2, #1
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd0d 	bl	8001130 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	7efa      	ldrb	r2, [r7, #27]
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000722:	7f7b      	ldrb	r3, [r7, #29]
 8000724:	3301      	adds	r3, #1
 8000726:	777b      	strb	r3, [r7, #29]
 8000728:	7f7b      	ldrb	r3, [r7, #29]
 800072a:	b29b      	uxth	r3, r3
 800072c:	8bfa      	ldrh	r2, [r7, #30]
 800072e:	429a      	cmp	r2, r3
 8000730:	d8e9      	bhi.n	8000706 <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2102      	movs	r1, #2
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <HCI_TL_SPI_Receive+0xb4>)
 8000738:	f001 fb74 	bl	8001e24 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 800073c:	f7ff ff20 	bl	8000580 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8000740:	7f7b      	ldrb	r3, [r7, #29]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	08006cec 	.word	0x08006cec
 8000750:	40020000 	.word	0x40020000

08000754 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000760:	4a34      	ldr	r2, [pc, #208]	@ (8000834 <HCI_TL_SPI_Send+0xe0>)
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076a:	6018      	str	r0, [r3, #0]
 800076c:	3304      	adds	r3, #4
 800076e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000770:	f000 ff12 	bl	8001598 <HAL_GetTick>
 8000774:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8000776:	f7ff ff0a 	bl	800058e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800077a:	f000 ff0d 	bl	8001598 <HAL_GetTick>
 800077e:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2102      	movs	r1, #2
 8000788:	482b      	ldr	r0, [pc, #172]	@ (8000838 <HCI_TL_SPI_Send+0xe4>)
 800078a:	f001 fb4b 	bl	8001e24 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800078e:	e00a      	b.n	80007a6 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000790:	f000 ff02 	bl	8001598 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b0f      	cmp	r3, #15
 800079c:	d903      	bls.n	80007a6 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 800079e:	f06f 0302 	mvn.w	r3, #2
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80007a4:	e004      	b.n	80007b0 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007a6:	f000 f84b 	bl	8000840 <IsDataAvailable>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0ef      	beq.n	8000790 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	f113 0f03 	cmn.w	r3, #3
 80007b6:	d105      	bne.n	80007c4 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2102      	movs	r1, #2
 80007bc:	481e      	ldr	r0, [pc, #120]	@ (8000838 <HCI_TL_SPI_Send+0xe4>)
 80007be:	f001 fb31 	bl	8001e24 <HAL_GPIO_WritePin>
      break;
 80007c2:	e030      	b.n	8000826 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2205      	movs	r2, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fcae 	bl	8001130 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80007e4:	8b7a      	ldrh	r2, [r7, #26]
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d306      	bcc.n	80007fa <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4912      	ldr	r1, [pc, #72]	@ (800083c <HCI_TL_SPI_Send+0xe8>)
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 fc9c 	bl	8001130 <BSP_SPI1_SendRecv>
 80007f8:	e002      	b.n	8000800 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80007fa:	f06f 0301 	mvn.w	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2102      	movs	r1, #2
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <HCI_TL_SPI_Send+0xe4>)
 8000806:	f001 fb0d 	bl	8001e24 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800080a:	f000 fec5 	bl	8001598 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d903      	bls.n	8000820 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000818:	f06f 0302 	mvn.w	r3, #2
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800081e:	e002      	b.n	8000826 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	2b00      	cmp	r3, #0
 8000824:	dba9      	blt.n	800077a <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 8000826:	f7ff feab 	bl	8000580 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800082c:	4618      	mov	r0, r3
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08006cf4 	.word	0x08006cf4
 8000838:	40020000 	.word	0x40020000
 800083c:	20000094 	.word	0x20000094

08000840 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000844:	2101      	movs	r1, #1
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <IsDataAvailable+0x1c>)
 8000848:	f001 fad4 	bl	8001df4 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020000 	.word	0x40020000

08000860 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <hci_tl_lowlevel_init+0x54>)
 8000868:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <hci_tl_lowlevel_init+0x58>)
 800086c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <hci_tl_lowlevel_init+0x5c>)
 8000870:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <hci_tl_lowlevel_init+0x60>)
 8000874:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <hci_tl_lowlevel_init+0x64>)
 8000878:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <hci_tl_lowlevel_init+0x68>)
 800087c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f004 ff01 	bl	8005688 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000886:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <hci_tl_lowlevel_init+0x6c>)
 800088c:	f001 f811 	bl	80018b2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000890:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <hci_tl_lowlevel_init+0x70>)
 8000892:	2100      	movs	r1, #0
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <hci_tl_lowlevel_init+0x6c>)
 8000896:	f000 fff2 	bl	800187e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2006      	movs	r0, #6
 80008a0:	f000 ffa9 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008a4:	2006      	movs	r0, #6
 80008a6:	f000 ffc2 	bl	800182e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	0800059d 	.word	0x0800059d
 80008b8:	08000639 	.word	0x08000639
 80008bc:	08000755 	.word	0x08000755
 80008c0:	0800069d 	.word	0x0800069d
 80008c4:	08000661 	.word	0x08000661
 80008c8:	08001171 	.word	0x08001171
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	080008d5 	.word	0x080008d5

080008d4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80008d8:	e005      	b.n	80008e6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80008da:	2000      	movs	r0, #0
 80008dc:	f005 f838 	bl	8005950 <hci_notify_asynch_evt>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d105      	bne.n	80008f2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80008e6:	f7ff ffab 	bl	8000840 <IsDataAvailable>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f4      	bne.n	80008da <hci_tl_lowlevel_isr+0x6>
 80008f0:	e000      	b.n	80008f4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008f2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <bluenrg_init>:
#include "hci_tl.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 80008f8:	b5b0      	push	{r4, r5, r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 80008fe:	4b33      	ldr	r3, [pc, #204]	@ (80009cc <bluenrg_init+0xd4>)
 8000900:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 8000902:	4a33      	ldr	r2, [pc, #204]	@ (80009d0 <bluenrg_init+0xd8>)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	6018      	str	r0, [r3, #0]
 800090e:	3304      	adds	r3, #4
 8000910:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(APP_UserEvtRx,0);
 8000912:	2100      	movs	r1, #0
 8000914:	482f      	ldr	r0, [pc, #188]	@ (80009d4 <bluenrg_init+0xdc>)
 8000916:	f004 fe75 	bl	8005604 <hci_init>
	hci_reset();
 800091a:	f004 f859 	bl	80049d0 <hci_reset>
	HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	@ 0x64
 8000920:	f000 fe46 	bl	80015b0 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	461a      	mov	r2, r3
 800092a:	2106      	movs	r1, #6
 800092c:	2000      	movs	r0, #0
 800092e:	f004 fd40 	bl	80053b2 <aci_hal_write_config_data>
 8000932:	4603      	mov	r3, r0
 8000934:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <bluenrg_init+0x4a>
 800093c:	4826      	ldr	r0, [pc, #152]	@ (80009d8 <bluenrg_init+0xe0>)
 800093e:	f005 fad3 	bl	8005ee8 <puts>
	ret=aci_gatt_init();
 8000942:	f004 fa1e 	bl	8004d82 <aci_gatt_init>
 8000946:	4603      	mov	r3, r0
 8000948:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 800094a:	7cfb      	ldrb	r3, [r7, #19]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <bluenrg_init+0x5e>
 8000950:	4822      	ldr	r0, [pc, #136]	@ (80009dc <bluenrg_init+0xe4>)
 8000952:	f005 fac9 	bl	8005ee8 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 8000956:	f107 020a 	add.w	r2, r7, #10
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4613      	mov	r3, r2
 8000966:	2207      	movs	r2, #7
 8000968:	2100      	movs	r1, #0
 800096a:	2001      	movs	r0, #1
 800096c:	f004 f95c 	bl	8004c28 <aci_gap_init>
 8000970:	4603      	mov	r3, r0
 8000972:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 8000974:	7cfb      	ldrb	r3, [r7, #19]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <bluenrg_init+0x88>
 800097a:	4819      	ldr	r0, [pc, #100]	@ (80009e0 <bluenrg_init+0xe8>)
 800097c:	f005 fab4 	bl	8005ee8 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000980:	897c      	ldrh	r4, [r7, #10]
 8000982:	893d      	ldrh	r5, [r7, #8]
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f7ff fc2b 	bl	80001e0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b2da      	uxtb	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4613      	mov	r3, r2
 8000994:	2200      	movs	r2, #0
 8000996:	4629      	mov	r1, r5
 8000998:	4620      	mov	r0, r4
 800099a:	f004 fbfa 	bl	8005192 <aci_gatt_update_char_value>
 800099e:	4603      	mov	r3, r0
 80009a0:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <bluenrg_init+0xb6>
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <bluenrg_init+0xec>)
 80009aa:	f005 fa9d 	bl	8005ee8 <puts>
	//add custom service
	ret = add_simple_service();
 80009ae:	f000 f99d 	bl	8000cec <add_simple_service>
 80009b2:	4603      	mov	r3, r0
 80009b4:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 80009b6:	7cfb      	ldrb	r3, [r7, #19]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <bluenrg_init+0xca>
 80009bc:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <bluenrg_init+0xf0>)
 80009be:	f005 fa93 	bl	8005ee8 <puts>
	}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08006cfc 	.word	0x08006cfc
 80009d0:	20000000 	.word	0x20000000
 80009d4:	08000e7d 	.word	0x08000e7d
 80009d8:	08006d04 	.word	0x08006d04
 80009dc:	08006d28 	.word	0x08006d28
 80009e0:	08006d40 	.word	0x08006d40
 80009e4:	08006d58 	.word	0x08006d58
 80009e8:	08006d7c 	.word	0x08006d7c

080009ec <bluenrg_process>:

void bluenrg_process(void)
		{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <bluenrg_process+0x54>)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f8:	c303      	stmia	r3!, {r0, r1}
 80009fa:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 80009fc:	2300      	movs	r3, #0
 80009fe:	9306      	str	r3, [sp, #24]
 8000a00:	2300      	movs	r3, #0
 8000a02:	9305      	str	r3, [sp, #20]
 8000a04:	2300      	movs	r3, #0
 8000a06:	9304      	str	r3, [sp, #16]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	9303      	str	r3, [sp, #12]
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	2309      	movs	r3, #9
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f003 ffff 	bl	8004a22 <aci_gap_set_discoverable>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <bluenrg_process+0x48>
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <bluenrg_process+0x58>)
 8000a30:	f005 fa5a 	bl	8005ee8 <puts>

			//process user events

			hci_user_evt_proc();
 8000a34:	f004 ff60 	bl	80058f8 <hci_user_evt_proc>
		}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08006dbc 	.word	0x08006dbc
 8000a44:	08006d98 	.word	0x08006d98

08000a48 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 8000a50:	bf00      	nop
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <__io_putchar+0x2c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f9      	beq.n	8000a52 <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <__io_putchar+0x2c>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 8000a64:	687b      	ldr	r3, [r7, #4]
	}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fd26 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f80e 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f89e 	bl	8000bc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a88:	f000 f872 	bl	8000b70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <main+0x24>)
 8000a8e:	f005 fa2b 	bl	8005ee8 <puts>
bluenrg_init();
 8000a92:	f7ff ff31 	bl	80008f8 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 8000a96:	f7ff ffa9 	bl	80009ec <bluenrg_process>
 8000a9a:	e7fc      	b.n	8000a96 <main+0x1e>
 8000a9c:	08006dc8 	.word	0x08006dc8

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	@ 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2230      	movs	r2, #48	@ 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f005 fafa 	bl	80060a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <SystemClock_Config+0xc8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <SystemClock_Config+0xc8>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <SystemClock_Config+0xc8>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemClock_Config+0xcc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a20      	ldr	r2, [pc, #128]	@ (8000b6c <SystemClock_Config+0xcc>)
 8000aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemClock_Config+0xcc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b00:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f9bb 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b30:	f000 f8d6 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fc1d 	bl	8002390 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b5c:	f000 f8c0 	bl	8000ce0 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	@ 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	@ (8000bc0 <MX_USART2_UART_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f002 f920 	bl	8002dec <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f895 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000194 	.word	0x20000194
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a34      	ldr	r2, [pc, #208]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_GPIO_Init+0x10c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000c50:	4820      	ldr	r0, [pc, #128]	@ (8000cd4 <MX_GPIO_Init+0x110>)
 8000c52:	f001 f8e7 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_GPIO_Init+0x114>)
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <MX_GPIO_Init+0x118>)
 8000c6c:	f000 fe5a 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_GPIO_Init+0x114>)
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <MX_GPIO_Init+0x110>)
 8000c84:	f000 fe4e 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000c88:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_GPIO_Init+0x110>)
 8000ca2:	f000 fe3f 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2006      	movs	r0, #6
 8000cac:	f000 fda3 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f000 fdbc 	bl	800182e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2028      	movs	r0, #40	@ 0x28
 8000cbc:	f000 fd9b 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc0:	2028      	movs	r0, #40	@ 0x28
 8000cc2:	f000 fdb4 	bl	800182e <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <add_simple_service>:
uint16_t connection_handle=0;
uint8_t  notification_enabled=0;


tBleStatus add_simple_service(void)
	{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b091      	sub	sp, #68	@ 0x44
 8000cf0:	af06      	add	r7, sp, #24
	Service_UUID_t service_uuid;
	Char_UUID_t char_uuid;
	tBleStatus ret;
	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <add_simple_service+0x68>)
 8000cf4:	f107 0414 	add.w	r4, r7, #20
 8000cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//add service
	ret=aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &my_service_handle);
 8000cfe:	f107 0114 	add.w	r1, r7, #20
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <add_simple_service+0x6c>)
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2307      	movs	r3, #7
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f004 f863 	bl	8004dd6 <aci_gatt_add_service>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BLUENRG_memcpy(char_uuid.Char_UUID_128,CHAR_UUID,16);
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <add_simple_service+0x70>)
 8000d18:	1d3c      	adds	r4, r7, #4
 8000d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//add char

	aci_gatt_add_char(my_service_handle,UUID_TYPE_128,&char_uuid,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&my_char_handle);
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <add_simple_service+0x6c>)
 8000d22:	8818      	ldrh	r0, [r3, #0]
 8000d24:	1d3a      	adds	r2, r7, #4
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <add_simple_service+0x74>)
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9304      	str	r3, [sp, #16]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9303      	str	r3, [sp, #12]
 8000d32:	2304      	movs	r3, #4
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2300      	movs	r3, #0
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	2102      	movs	r1, #2
 8000d42:	f004 f91e 	bl	8004f82 <aci_gatt_add_char>


	return ret;
 8000d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	372c      	adds	r7, #44	@ 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08006e40 	.word	0x08006e40
 8000d58:	200001d8 	.word	0x200001d8
 8000d5c:	08006e50 	.word	0x08006e50
 8000d60:	200001da 	.word	0x200001da

08000d64 <update_data>:

void update_data(int16_t new_data)
	{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(my_service_handle, my_char_handle, 0, 2, (uint8_t *)&new_data);
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <update_data+0x38>)
 8000d70:	8818      	ldrh	r0, [r3, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <update_data+0x3c>)
 8000d74:	8819      	ldrh	r1, [r3, #0]
 8000d76:	1dbb      	adds	r3, r7, #6
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f004 fa08 	bl	8005192 <aci_gatt_update_char_value>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <update_data+0x2e>
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <update_data+0x40>)
 8000d8e:	f005 f8ab 	bl	8005ee8 <puts>

	}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001d8 	.word	0x200001d8
 8000da0:	200001da 	.word	0x200001da
 8000da4:	08006ddc 	.word	0x08006ddc

08000da8 <Read_Request_CB>:



void Read_Request_CB(uint16_t handle)
	{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	int data;
	data=450+((uint16_t)rand()*100)/1000;
 8000db2:	f004 ff31 	bl	8005c18 <rand>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <Read_Request_CB+0x50>)
 8000dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc0:	1092      	asrs	r2, r2, #2
 8000dc2:	17db      	asrs	r3, r3, #31
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 8000dca:	60fb      	str	r3, [r7, #12]
	printf("the hex data to be sent is 0x%.8X\r\n",data);
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <Read_Request_CB+0x54>)
 8000dd0:	f005 f822 	bl	8005e18 <iprintf>
	update_data(data);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffc3 	bl	8000d64 <update_data>
	if(connection_handle !=0)
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <Read_Request_CB+0x58>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <Read_Request_CB+0x48>
		{
		aci_gatt_allow_read(connection_handle);
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <Read_Request_CB+0x58>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 fa83 	bl	80052f6 <aci_gatt_allow_read>
		}
	}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	66666667 	.word	0x66666667
 8000dfc:	08006e00 	.word	0x08006e00
 8000e00:	200001de 	.word	0x200001de

08000e04 <aci_gatt_read_permit_req_event>:

void aci_gatt_read_permit_req_event(uint16_t Connection_Hanlde,
									uint16_t Atrribute_Handle,
									uint16_t Offset
									)
	{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	807b      	strh	r3, [r7, #2]
	Read_Request_CB(Atrribute_Handle);
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ffc5 	bl	8000da8 <Read_Request_CB>
	}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <hci_le_connection_complete_event>:
									uint16_t Conn_Latency,
									uint16_t Supervision_Timeout,
									uint8_t Master_Clock_Accuracy
									)

	{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	70fb      	strb	r3, [r7, #3]
	connected=1;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <hci_le_connection_complete_event+0x44>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
	connection_handle=Connection_Handle;
 8000e4c:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <hci_le_connection_complete_event+0x48>)
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2120      	movs	r1, #32
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <hci_le_connection_complete_event+0x4c>)
 8000e58:	f000 ffe4 	bl	8001e24 <HAL_GPIO_WritePin>
	printf("Connected \r\n");
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <hci_le_connection_complete_event+0x50>)
 8000e5e:	f005 f843 	bl	8005ee8 <puts>
	}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001dc 	.word	0x200001dc
 8000e70:	200001de 	.word	0x200001de
 8000e74:	40020000 	.word	0x40020000
 8000e78:	08006e24 	.word	0x08006e24

08000e7c <APP_UserEvtRx>:
	printf("Disconnected \r\n");
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}

void APP_UserEvtRx(void *pData)
	{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	uint32_t i;
	hci_spi_pckt *hci_pckt =(hci_spi_pckt *)pData;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
	if(hci_pckt->type==HCI_EVENT_PKT)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d163      	bne.n	8000f58 <APP_UserEvtRx+0xdc>
		{
		//Get data from packet
		hci_event_pckt *event_pckt =(hci_event_pckt*)hci_pckt->data;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
		//process meta data
		if(event_pckt->evt ==EVT_LE_META_EVENT)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e9c:	d11e      	bne.n	8000edc <APP_UserEvtRx+0x60>
			{
			//get meta data
			evt_le_meta_event *evt =(void *)event_pckt->data;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
			//process each meta data;
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e014      	b.n	8000ed4 <APP_UserEvtRx+0x58>
				{
					if(evt->subevent ==hci_le_meta_events_table[i].evt_code)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f60 <APP_UserEvtRx+0xe4>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d108      	bne.n	8000ece <APP_UserEvtRx+0x52>
					{
						hci_le_meta_events_table[i].process((void *)evt->data);
 8000ebc:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <APP_UserEvtRx+0xe4>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	3201      	adds	r2, #1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4798      	blx	r3
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b09      	cmp	r3, #9
 8000ed8:	d9e7      	bls.n	8000eaa <APP_UserEvtRx+0x2e>
		}

	// process other events


	}
 8000eda:	e03d      	b.n	8000f58 <APP_UserEvtRx+0xdc>
		else if(event_pckt->evt==EVT_VENDOR)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d11e      	bne.n	8000f22 <APP_UserEvtRx+0xa6>
				evt_blue_aci *blue_evt= (void *)event_pckt->data;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e014      	b.n	8000f1a <APP_UserEvtRx+0x9e>
					if(blue_evt->ecode==hci_vendor_specific_events_table[i].evt_code)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	491b      	ldr	r1, [pc, #108]	@ (8000f64 <APP_UserEvtRx+0xe8>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d108      	bne.n	8000f14 <APP_UserEvtRx+0x98>
						hci_vendor_specific_events_table[i].process((void*)blue_evt->data);
 8000f02:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <APP_UserEvtRx+0xe8>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	3202      	adds	r2, #2
 8000f10:	4610      	mov	r0, r2
 8000f12:	4798      	blx	r3
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f1e:	d9e7      	bls.n	8000ef0 <APP_UserEvtRx+0x74>
	}
 8000f20:	e01a      	b.n	8000f58 <APP_UserEvtRx+0xdc>
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e014      	b.n	8000f52 <APP_UserEvtRx+0xd6>
					if(event_pckt->evt==hci_events_table[i].evt_code)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f68 <APP_UserEvtRx+0xec>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000f36:	4299      	cmp	r1, r3
 8000f38:	d108      	bne.n	8000f4c <APP_UserEvtRx+0xd0>
						hci_events_table[i].process((void*)event_pckt->data);
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <APP_UserEvtRx+0xec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	3202      	adds	r2, #2
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4798      	blx	r3
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d9e7      	bls.n	8000f28 <APP_UserEvtRx+0xac>
	}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08006eb0 	.word	0x08006eb0
 8000f64:	08006f00 	.word	0x08006f00
 8000f68:	08006e78 	.word	0x08006e78

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fc18 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_UART_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001026:	2307      	movs	r3, #7
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UART_MspInit+0x8c>)
 8001032:	f000 fc77 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fa65 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <EXTI0_IRQHandler+0x10>)
 80010b2:	f000 fc13 	bl	80018dc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000008c 	.word	0x2000008c

080010c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010c8:	f000 fec6 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <BSP_SPI1_Init+0x58>)
 80010de:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <BSP_SPI1_Init+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4911      	ldr	r1, [pc, #68]	@ (800112c <BSP_SPI1_Init+0x5c>)
 80010e8:	600a      	str	r2, [r1, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d114      	bne.n	8001118 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010f0:	f001 fda3 	bl	8002c3a <HAL_SPI_GetState>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10e      	bne.n	8001118 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010fc:	f000 f87c 	bl	80011f8 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <BSP_SPI1_Init+0x54>)
 8001108:	f000 f83a 	bl	8001180 <MX_SPI1_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8001112:	f06f 0307 	mvn.w	r3, #7
 8001116:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001e0 	.word	0x200001e0
 8001128:	40013000 	.word	0x40013000
 800112c:	20000238 	.word	0x20000238

08001130 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	4807      	ldr	r0, [pc, #28]	@ (800116c <BSP_SPI1_SendRecv+0x3c>)
 8001150:	f001 fbd1 	bl	80028f6 <HAL_SPI_TransmitReceive>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800115a:	f06f 0305 	mvn.w	r3, #5
 800115e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001160:	697b      	ldr	r3, [r7, #20]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001e0 	.word	0x200001e0

08001170 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001174:	f000 fa10 	bl	8001598 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <MX_SPI1_Init+0x74>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2228      	movs	r2, #40	@ 0x28
 80011be:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 faf9 	bl	80027d0 <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013000 	.word	0x40013000

080011f8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <SPI1_MspInit+0xc4>)
 800120a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800120e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6313      	str	r3, [r2, #48]	@ 0x30
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <SPI1_MspInit+0xc4>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <SPI1_MspInit+0xc4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <SPI1_MspInit+0xc4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001254:	2340      	movs	r3, #64	@ 0x40
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001264:	2305      	movs	r3, #5
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <SPI1_MspInit+0xc8>)
 8001270:	f000 fb58 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001284:	2305      	movs	r3, #5
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <SPI1_MspInit+0xc8>)
 8001290:	f000 fb48 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001294:	2308      	movs	r3, #8
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80012a4:	2305      	movs	r3, #5
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <SPI1_MspInit+0xcc>)
 80012b0:	f000 fb38 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400

080012c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_kill>:

int _kill(int pid, int sig)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012e2:	f004 ff2f 	bl	8006144 <__errno>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2216      	movs	r2, #22
 80012ea:	601a      	str	r2, [r3, #0]
	return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_exit>:

void _exit (int status)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffe7 	bl	80012d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800130a:	bf00      	nop
 800130c:	e7fd      	b.n	800130a <_exit+0x12>

0800130e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e00a      	b.n	8001336 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001320:	f3af 8000 	nop.w
 8001324:	4601      	mov	r1, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbf0      	blt.n	8001320 <_read+0x12>
	}

return len;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e009      	b.n	800136e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb70 	bl	8000a48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	dbf1      	blt.n	800135a <_write+0x12>
	}
	return len;
 8001376:	687b      	ldr	r3, [r7, #4]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_close>:

int _close(int file)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a8:	605a      	str	r2, [r3, #4]
	return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_isatty>:

int _isatty(int file)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f004 fe94 	bl	8006144 <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20020000 	.word	0x20020000
 8001448:	00000400 	.word	0x00000400
 800144c:	2000023c 	.word	0x2000023c
 8001450:	20000938 	.word	0x20000938

08001454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	@ (80014b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	@ (80014c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014a2:	f7ff ffd7 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f004 fe53 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff fae5 	bl	8000a78 <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014bc:	08007148 	.word	0x08007148
  ldr r2, =_sbss
 80014c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014c4:	20000938 	.word	0x20000938

080014c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <HAL_Init+0x40>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <HAL_Init+0x40>)
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	@ (800150c <HAL_Init+0x40>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f973 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fd34 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f999 	bl	8001866 <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f953 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000008 	.word	0x20000008
 8001568:	20000010 	.word	0x20000010
 800156c:	2000000c 	.word	0x2000000c

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000010 	.word	0x20000010
 8001594:	20000240 	.word	0x20000240

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000240 	.word	0x20000240

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffde 	bl	8001598 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000010 	.word	0x20000010

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	@ (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	@ (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db12      	blt.n	80016d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	490a      	ldr	r1, [pc, #40]	@ (80016dc <__NVIC_DisableIRQ+0x44>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	3320      	adds	r3, #32
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016c4:	f3bf 8f4f 	dsb	sy
}
 80016c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ca:	f3bf 8f6f 	isb	sy
}
 80016ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	@ (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	@ (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	@ 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	@ 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff05 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff1a 	bl	8001640 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff8e 	bl	8001734 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5d 	bl	80016e0 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff0d 	bl	800165c <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff1d 	bl	8001698 <__NVIC_DisableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff94 	bl	800179c <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800187e:	b480      	push	{r7}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	460b      	mov	r3, r1
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]
      break;
 800189c:	e002      	b.n	80018a4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
      break;
 80018a2:	bf00      	nop
  }

  return status;
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e003      	b.n	80018ce <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
  }
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2201      	movs	r2, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_EXTI_IRQHandler+0x44>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_EXTI_IRQHandler+0x44>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4798      	blx	r3
    }
  }
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e159      	b.n	8001bf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8148 	bne.w	8001bee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a2 	beq.w	8001bee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	@ (8001c14 <HAL_GPIO_Init+0x2f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x202>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_GPIO_Init+0x2f4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x1fe>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a47      	ldr	r2, [pc, #284]	@ (8001c1c <HAL_GPIO_Init+0x2f8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x1fa>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x1f6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <HAL_GPIO_Init+0x300>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x1f2>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b16:	2307      	movs	r3, #7
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b94:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f aea2 	bls.w	8001940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e0bb      	b.n	8001dc0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	f040 80ab 	bne.w	8001dba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c64:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd8 <HAL_GPIO_DeInit+0x1ac>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4013      	ands	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a54      	ldr	r2, [pc, #336]	@ (8001ddc <HAL_GPIO_DeInit+0x1b0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_DeInit+0x96>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a53      	ldr	r2, [pc, #332]	@ (8001de0 <HAL_GPIO_DeInit+0x1b4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_DeInit+0x92>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a52      	ldr	r2, [pc, #328]	@ (8001de4 <HAL_GPIO_DeInit+0x1b8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_DeInit+0x8e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	@ (8001de8 <HAL_GPIO_DeInit+0x1bc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_DeInit+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a50      	ldr	r2, [pc, #320]	@ (8001dec <HAL_GPIO_DeInit+0x1c0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_DeInit+0x86>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_DeInit+0x98>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_DeInit+0x98>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_DeInit+0x98>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_DeInit+0x98>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_DeInit+0x98>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d132      	bne.n	8001d3a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001cd4:	4b46      	ldr	r3, [pc, #280]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4944      	ldr	r1, [pc, #272]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ce2:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4941      	ldr	r1, [pc, #260]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	493d      	ldr	r1, [pc, #244]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	493a      	ldr	r1, [pc, #232]	@ (8001df0 <HAL_GPIO_DeInit+0x1c4>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd8 <HAL_GPIO_DeInit+0x1ac>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	482a      	ldr	r0, [pc, #168]	@ (8001dd8 <HAL_GPIO_DeInit+0x1ac>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	400a      	ands	r2, r1
 8001d34:	3302      	adds	r3, #2
 8001d36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2103      	movs	r1, #3
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	08d2      	lsrs	r2, r2, #3
 8001d70:	4019      	ands	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2103      	movs	r1, #3
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2103      	movs	r1, #3
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f af40 	bls.w	8001c48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f806 	bl	8001e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e267      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b85      	ldr	r3, [pc, #532]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e242      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b70      	ldr	r3, [pc, #448]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6f      	ldr	r2, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b69      	ldr	r3, [pc, #420]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a65      	ldr	r2, [pc, #404]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fb1e 	bl	8001598 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fb1a 	bl	8001598 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e207      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5b      	ldr	r3, [pc, #364]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb0a 	bl	8001598 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fb06 	bl	8001598 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f3      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b44      	ldr	r3, [pc, #272]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c7      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4937      	ldr	r1, [pc, #220]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff fabf 	bl	8001598 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff fabb 	bl	8001598 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a8      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4925      	ldr	r1, [pc, #148]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fa9e 	bl	8001598 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fa9a 	bl	8001598 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e187      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d036      	beq.n	80020f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_RCC_OscConfig+0x248>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff fa7e 	bl	8001598 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fa7a 	bl	8001598 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e167      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 80020be:	e01b      	b.n	80020f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_RCC_OscConfig+0x248>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fa67 	bl	8001598 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00e      	b.n	80020ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff fa63 	bl	8001598 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d907      	bls.n	80020ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e150      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b88      	ldr	r3, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ea      	bne.n	80020ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b81      	ldr	r3, [pc, #516]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b7d      	ldr	r3, [pc, #500]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	4a7c      	ldr	r2, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	@ 0x40
 8002126:	4b7a      	ldr	r3, [pc, #488]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b77      	ldr	r3, [pc, #476]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a73      	ldr	r2, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fa23 	bl	8001598 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fa1f 	bl	8001598 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e10c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b6a      	ldr	r3, [pc, #424]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x2ea>
 800217c:	4b64      	ldr	r3, [pc, #400]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a63      	ldr	r2, [pc, #396]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x30c>
 8002192:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	@ 0x70
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 80021ac:	4b58      	ldr	r3, [pc, #352]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a57      	ldr	r2, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b8:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a54      	ldr	r2, [pc, #336]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f9e4 	bl	8001598 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff f9e0 	bl	8001598 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0cb      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	4b49      	ldr	r3, [pc, #292]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff f9ce 	bl	8001598 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff f9ca 	bl	8001598 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0b5      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223e:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d141      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f99e 	bl	8001598 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f99a 	bl	8001598 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	491b      	ldr	r1, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff f973 	bl	8001598 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b6:	f7ff f96f 	bl	8001598 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x416>
 80022d4:	e054      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f95c 	bl	8001598 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff f958 	bl	8001598 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e045      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e038      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4ec>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff f88a 	bl	8001598 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f886 	bl	8001598 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe ffea 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08006e60 	.word	0x08006e60
 8002554:	20000008 	.word	0x20000008
 8002558:	2000000c 	.word	0x2000000c

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b094      	sub	sp, #80	@ 0x50
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	647b      	str	r3, [r7, #68]	@ 0x44
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b79      	ldr	r3, [pc, #484]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80e1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0db      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b73      	ldr	r3, [pc, #460]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002594:	e0db      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b73      	ldr	r3, [pc, #460]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x208>)
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259a:	e0d8      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002600:	4659      	mov	r1, fp
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4651      	mov	r1, sl
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ebb2 0801 	subs.w	r8, r2, r1
 8002614:	4659      	mov	r1, fp
 8002616:	eb63 0901 	sbc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	462b      	mov	r3, r5
 800263c:	eb49 0303 	adc.w	r3, r9, r3
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264e:	4629      	mov	r1, r5
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002658:	4621      	mov	r1, r4
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800266c:	f7fd fe10 	bl	8000290 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002678:	e058      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	4611      	mov	r1, r2
 8002686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	f7fd fdb6 	bl	8000290 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800273c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800273e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 800274a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002750:	4618      	mov	r0, r3
 8002752:	3750      	adds	r7, #80	@ 0x50
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08006e70 	.word	0x08006e70

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08006e70 	.word	0x08006e70

080027d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07b      	b.n	80028da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027f2:	d009      	beq.n	8002808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	e005      	b.n	8002808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f85d 	bl	80028e2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800283e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0104 	and.w	r1, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	f003 0210 	and.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08c      	sub	sp, #48	@ 0x30
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002904:	2301      	movs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_SPI_TransmitReceive+0x26>
 8002918:	2302      	movs	r3, #2
 800291a:	e18a      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x33c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002924:	f7fe fe38 	bl	8001598 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800293e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002942:	2b01      	cmp	r3, #1
 8002944:	d00f      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x70>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800294c:	d107      	bne.n	800295e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_SPI_TransmitReceive+0x68>
 8002956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800295a:	2b04      	cmp	r3, #4
 800295c:	d003      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002964:	e15b      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x82>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x82>
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800297e:	e14e      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b04      	cmp	r3, #4
 800298a:	d003      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2205      	movs	r2, #5
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d007      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f0:	d178      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x10a>
 80029fa:	8b7b      	ldrh	r3, [r7, #26]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d166      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	1c9a      	adds	r2, r3, #2
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a24:	e053      	b.n	8002ace <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d11b      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x176>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x176>
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d113      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	1c9a      	adds	r2, r3, #2
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d119      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x1b8>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d014      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	1c9a      	adds	r2, r3, #2
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002aae:	f7fe fd73 	bl	8001598 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d807      	bhi.n	8002ace <HAL_SPI_TransmitReceive+0x1d8>
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d003      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002acc:	e0a7      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1a6      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x130>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1a1      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x130>
 8002ae2:	e07c      	b.n	8002bde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_TransmitReceive+0x1fc>
 8002aec:	8b7b      	ldrh	r3, [r7, #26]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d16b      	bne.n	8002bca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b18:	e057      	b.n	8002bca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11c      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x26c>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x26c>
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d114      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	7812      	ldrb	r2, [r2, #0]
 8002b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d119      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x2ae>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ba4:	f7fe fcf8 	bl	8001598 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d803      	bhi.n	8002bbc <HAL_SPI_TransmitReceive+0x2c6>
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d102      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x2cc>
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002bc8:	e029      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1a2      	bne.n	8002b1a <HAL_SPI_TransmitReceive+0x224>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d19d      	bne.n	8002b1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8c0 	bl	8002d68 <SPI_EndRxTxTransaction>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002bfa:	e010      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	e000      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3730      	adds	r7, #48	@ 0x30
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c48:	b2db      	uxtb	r3, r3
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c68:	f7fe fc96 	bl	8001598 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c78:	f7fe fc8e 	bl	8001598 <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8e:	e054      	b.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d050      	beq.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c98:	f7fe fc7e 	bl	8001598 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d902      	bls.n	8002cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d13d      	bne.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cc6:	d111      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd0:	d004      	beq.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cda:	d107      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf4:	d10f      	bne.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e017      	b.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d19b      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000008 	.word	0x20000008

08002d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <SPI_EndRxTxTransaction+0x7c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <SPI_EndRxTxTransaction+0x80>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0d5b      	lsrs	r3, r3, #21
 8002d80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d92:	d112      	bne.n	8002dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff5a 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b80      	cmp	r3, #128	@ 0x80
 8002dd2:	d0f2      	beq.n	8002dba <SPI_EndRxTxTransaction+0x52>
 8002dd4:	e000      	b.n	8002dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dd6:	bf00      	nop
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008
 8002de8:	165e9f81 	.word	0x165e9f81

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e03f      	b.n	8002e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f8d2 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f829 	bl	8002e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0c0      	sub	sp, #256	@ 0x100
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	ea40 0301 	orr.w	r3, r0, r1
 8002eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ee0:	f021 010c 	bic.w	r1, r1, #12
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f02:	6999      	ldr	r1, [r3, #24]
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	ea40 0301 	orr.w	r3, r0, r1
 8002f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b8f      	ldr	r3, [pc, #572]	@ (8003154 <UART_SetConfig+0x2cc>)
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d005      	beq.n	8002f28 <UART_SetConfig+0xa0>
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b8d      	ldr	r3, [pc, #564]	@ (8003158 <UART_SetConfig+0x2d0>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d104      	bne.n	8002f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7ff fc3e 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f30:	e003      	b.n	8002f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7ff fc25 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8002f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f44:	f040 810c 	bne.w	8003160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	1891      	adds	r1, r2, r2
 8002f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f62:	415b      	adcs	r3, r3
 8002f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	eb12 0801 	adds.w	r8, r2, r1
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb43 0901 	adc.w	r9, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb18 0303 	adds.w	r3, r8, r3
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f98:	462b      	mov	r3, r5
 8002f9a:	eb49 0303 	adc.w	r3, r9, r3
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	18db      	adds	r3, r3, r3
 8002fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	eb42 0303 	adc.w	r3, r2, r3
 8002fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fcc:	f7fd f960 	bl	8000290 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4b61      	ldr	r3, [pc, #388]	@ (800315c <UART_SetConfig+0x2d4>)
 8002fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	011c      	lsls	r4, r3, #4
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003000:	4641      	mov	r1, r8
 8003002:	eb12 0a01 	adds.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb43 0b01 	adc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800301c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003020:	4692      	mov	sl, r2
 8003022:	469b      	mov	fp, r3
 8003024:	4643      	mov	r3, r8
 8003026:	eb1a 0303 	adds.w	r3, sl, r3
 800302a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800302e:	464b      	mov	r3, r9
 8003030:	eb4b 0303 	adc.w	r3, fp, r3
 8003034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800304c:	460b      	mov	r3, r1
 800304e:	18db      	adds	r3, r3, r3
 8003050:	643b      	str	r3, [r7, #64]	@ 0x40
 8003052:	4613      	mov	r3, r2
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	647b      	str	r3, [r7, #68]	@ 0x44
 800305a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800305e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003062:	f7fd f915 	bl	8000290 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4611      	mov	r1, r2
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <UART_SetConfig+0x2d4>)
 800306e:	fba3 2301 	umull	r2, r3, r3, r1
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2264      	movs	r2, #100	@ 0x64
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	1acb      	subs	r3, r1, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003082:	4b36      	ldr	r3, [pc, #216]	@ (800315c <UART_SetConfig+0x2d4>)
 8003084:	fba3 2302 	umull	r2, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003090:	441c      	add	r4, r3
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800309c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030ac:	415b      	adcs	r3, r3
 80030ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030b4:	4641      	mov	r1, r8
 80030b6:	1851      	adds	r1, r2, r1
 80030b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80030ba:	4649      	mov	r1, r9
 80030bc:	414b      	adcs	r3, r1
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030cc:	4659      	mov	r1, fp
 80030ce:	00cb      	lsls	r3, r1, #3
 80030d0:	4651      	mov	r1, sl
 80030d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d6:	4651      	mov	r1, sl
 80030d8:	00ca      	lsls	r2, r1, #3
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	4642      	mov	r2, r8
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e8:	464b      	mov	r3, r9
 80030ea:	460a      	mov	r2, r1
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003108:	460b      	mov	r3, r1
 800310a:	18db      	adds	r3, r3, r3
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310e:	4613      	mov	r3, r2
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800311a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800311e:	f7fd f8b7 	bl	8000290 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <UART_SetConfig+0x2d4>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2164      	movs	r1, #100	@ 0x64
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3332      	adds	r3, #50	@ 0x32
 800313a:	4a08      	ldr	r2, [pc, #32]	@ (800315c <UART_SetConfig+0x2d4>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4422      	add	r2, r4
 800314e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003150:	e106      	b.n	8003360 <UART_SetConfig+0x4d8>
 8003152:	bf00      	nop
 8003154:	40011000 	.word	0x40011000
 8003158:	40011400 	.word	0x40011400
 800315c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800316a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800316e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003172:	4642      	mov	r2, r8
 8003174:	464b      	mov	r3, r9
 8003176:	1891      	adds	r1, r2, r2
 8003178:	6239      	str	r1, [r7, #32]
 800317a:	415b      	adcs	r3, r3
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
 800317e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003182:	4641      	mov	r1, r8
 8003184:	1854      	adds	r4, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb43 0501 	adc.w	r5, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a8:	464b      	mov	r3, r9
 80031aa:	eb45 0303 	adc.w	r3, r5, r3
 80031ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031ce:	4629      	mov	r1, r5
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d8:	4621      	mov	r1, r4
 80031da:	008a      	lsls	r2, r1, #2
 80031dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031e0:	f7fd f856 	bl	8000290 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4b60      	ldr	r3, [pc, #384]	@ (800336c <UART_SetConfig+0x4e4>)
 80031ea:	fba3 2302 	umull	r2, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	011c      	lsls	r4, r3, #4
 80031f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	1891      	adds	r1, r2, r2
 800320a:	61b9      	str	r1, [r7, #24]
 800320c:	415b      	adcs	r3, r3
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003214:	4641      	mov	r1, r8
 8003216:	1851      	adds	r1, r2, r1
 8003218:	6139      	str	r1, [r7, #16]
 800321a:	4649      	mov	r1, r9
 800321c:	414b      	adcs	r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003236:	4651      	mov	r1, sl
 8003238:	00ca      	lsls	r2, r1, #3
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	4603      	mov	r3, r0
 8003240:	4642      	mov	r2, r8
 8003242:	189b      	adds	r3, r3, r2
 8003244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003248:	464b      	mov	r3, r9
 800324a:	460a      	mov	r2, r1
 800324c:	eb42 0303 	adc.w	r3, r2, r3
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800325e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800326c:	4649      	mov	r1, r9
 800326e:	008b      	lsls	r3, r1, #2
 8003270:	4641      	mov	r1, r8
 8003272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003276:	4641      	mov	r1, r8
 8003278:	008a      	lsls	r2, r1, #2
 800327a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800327e:	f7fd f807 	bl	8000290 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4611      	mov	r1, r2
 8003288:	4b38      	ldr	r3, [pc, #224]	@ (800336c <UART_SetConfig+0x4e4>)
 800328a:	fba3 2301 	umull	r2, r3, r3, r1
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2264      	movs	r2, #100	@ 0x64
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	1acb      	subs	r3, r1, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	@ 0x32
 800329c:	4a33      	ldr	r2, [pc, #204]	@ (800336c <UART_SetConfig+0x4e4>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a8:	441c      	add	r4, r3
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80032b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032b8:	4642      	mov	r2, r8
 80032ba:	464b      	mov	r3, r9
 80032bc:	1891      	adds	r1, r2, r2
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	415b      	adcs	r3, r3
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c8:	4641      	mov	r1, r8
 80032ca:	1851      	adds	r1, r2, r1
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	4649      	mov	r1, r9
 80032d0:	414b      	adcs	r3, r1
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e0:	4659      	mov	r1, fp
 80032e2:	00cb      	lsls	r3, r1, #3
 80032e4:	4651      	mov	r1, sl
 80032e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ea:	4651      	mov	r1, sl
 80032ec:	00ca      	lsls	r2, r1, #3
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	4642      	mov	r2, r8
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032fa:	464b      	mov	r3, r9
 80032fc:	460a      	mov	r2, r1
 80032fe:	eb42 0303 	adc.w	r3, r2, r3
 8003302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	663b      	str	r3, [r7, #96]	@ 0x60
 800330e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800331c:	4649      	mov	r1, r9
 800331e:	008b      	lsls	r3, r1, #2
 8003320:	4641      	mov	r1, r8
 8003322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003326:	4641      	mov	r1, r8
 8003328:	008a      	lsls	r2, r1, #2
 800332a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800332e:	f7fc ffaf 	bl	8000290 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b0d      	ldr	r3, [pc, #52]	@ (800336c <UART_SetConfig+0x4e4>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	@ 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	@ 0x32
 800334a:	4a08      	ldr	r2, [pc, #32]	@ (800336c <UART_SetConfig+0x4e4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4422      	add	r2, r4
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003366:	46bd      	mov	sp, r7
 8003368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	7818      	ldrb	r0, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800338a:	b299      	uxth	r1, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	461a      	mov	r2, r3
 8003392:	f000 ffe2 	bl	800435a <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	7818      	ldrb	r0, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033ba:	b299      	uxth	r1, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 ffd9 	bl	8004378 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	7818      	ldrb	r0, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033ea:	b299      	uxth	r1, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	78da      	ldrb	r2, [r3, #3]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	889b      	ldrh	r3, [r3, #4]
 80033f4:	b29c      	uxth	r4, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	88db      	ldrh	r3, [r3, #6]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4623      	mov	r3, r4
 8003400:	f000 ffc9 	bl	8004396 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}

0800340e <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 ffcb 	bl	80043be <hci_hardware_error_event>

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b0a6      	sub	sp, #152	@ 0x98
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003452:	e02e      	b.n	80034b2 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8003454:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003458:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003464:	b29a      	uxth	r2, r3
 8003466:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	3398      	adds	r3, #152	@ 0x98
 800346e:	443b      	add	r3, r7
 8003470:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003474:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003478:	3302      	adds	r3, #2
 800347a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800347e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003482:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800348e:	b29a      	uxth	r2, r3
 8003490:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3398      	adds	r3, #152	@ 0x98
 8003498:	443b      	add	r3, r7
 800349a:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800349e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80034a2:	3302      	adds	r3, #2
 80034a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80034a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034ac:	3301      	adds	r3, #1
 80034ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034be:	4293      	cmp	r3, r2
 80034c0:	dbc8      	blt.n	8003454 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 80034c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f107 0208 	add.w	r2, r7, #8
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ff80 	bl	80043d4 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80034d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3798      	adds	r7, #152	@ 0x98
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 ff79 	bl	80043ec <hci_data_buffer_overflow_event>

  return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800351e:	b29b      	uxth	r3, r3
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 ff6d 	bl	8004402 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f9f5 	bl	8004936 <aci_blue_initialized_event>

  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f9ef 	bl	800494c <aci_blue_events_lost_event>

  return status;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8003578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800357c:	b08d      	sub	sp, #52	@ 0x34
 800357e:	af08      	add	r7, sp, #32
 8003580:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f893 c000 	ldrb.w	ip, [r3]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f8d3 9009 	ldr.w	r9, [r3, #9]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	f8d1 1015 	ldr.w	r1, [r1, #21]
 80035b6:	68b8      	ldr	r0, [r7, #8]
 80035b8:	f8d0 0019 	ldr.w	r0, [r0, #25]
 80035bc:	68bc      	ldr	r4, [r7, #8]
 80035be:	f8d4 401d 	ldr.w	r4, [r4, #29]
 80035c2:	68bd      	ldr	r5, [r7, #8]
 80035c4:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 80035c8:	68be      	ldr	r6, [r7, #8]
 80035ca:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 80035d2:	9307      	str	r3, [sp, #28]
 80035d4:	9606      	str	r6, [sp, #24]
 80035d6:	9505      	str	r5, [sp, #20]
 80035d8:	9404      	str	r4, [sp, #16]
 80035da:	9003      	str	r0, [sp, #12]
 80035dc:	9102      	str	r1, [sp, #8]
 80035de:	9201      	str	r2, [sp, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	464b      	mov	r3, r9
 80035e6:	4642      	mov	r2, r8
 80035e8:	4671      	mov	r1, lr
 80035ea:	4660      	mov	r0, ip
 80035ec:	f001 f9b8 	bl	8004960 <aci_blue_crash_info_event>

  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080035fc <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	7818      	ldrb	r0, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	7859      	ldrb	r1, [r3, #1]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800361a:	461a      	mov	r2, r3
 800361c:	f001 f9ae 	bl	800497c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f993 0000 	ldrsb.w	r0, [r3]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8003648:	461a      	mov	r2, r3
 800364a:	f001 f9a5 	bl	8004998 <aci_hal_scan_req_report_event>

  return status;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	7818      	ldrb	r0, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003674:	461a      	mov	r2, r3
 8003676:	f001 f99d 	bl	80049b4 <aci_hal_fw_error_event>

  return status;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8003690:	f000 ff4d 	bl	800452e <aci_gap_limited_discoverable_event>

  return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b298      	uxth	r0, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	7899      	ldrb	r1, [r3, #2]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	78db      	ldrb	r3, [r3, #3]
 80036bc:	461a      	mov	r2, r3
 80036be:	f000 ff3d 	bl	800453c <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 ff39 	bl	800455a <aci_gap_pass_key_req_event>

  return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	4618      	mov	r0, r3
 800370a:	f000 ff31 	bl	8004570 <aci_gap_authorization_req_event>

  return status;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8003724:	f000 ff2f 	bl	8004586 <aci_gap_slave_security_initiated_event>

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800373e:	f000 ff29 	bl	8004594 <aci_gap_bond_lost_event>

  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	7818      	ldrb	r0, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	7859      	ldrb	r1, [r3, #1]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800376c:	f000 ff19 	bl	80045a2 <aci_gap_proc_complete_event>

  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ff16 	bl	80045c2 <aci_gap_addr_not_resolved_event>

  return status;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f000 ff0a 	bl	80045d8 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	789b      	ldrb	r3, [r3, #2]
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 ff00 	bl	80045f0 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29a      	uxth	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	885b      	ldrh	r3, [r3, #2]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f001 f848 	bl	80048ae <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b298      	uxth	r0, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8003846:	461a      	mov	r2, r3
 8003848:	f001 f83f 	bl	80048ca <aci_l2cap_proc_timeout_event>

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8003856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003858:	b089      	sub	sp, #36	@ 0x24
 800385a:	af04      	add	r7, sp, #16
 800385c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b298      	uxth	r0, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	789c      	ldrb	r4, [r3, #2]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003876:	b29d      	uxth	r5, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800387e:	b29e      	uxth	r6, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003886:	b29b      	uxth	r3, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800388e:	b292      	uxth	r2, r2
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8003896:	b289      	uxth	r1, r1
 8003898:	9102      	str	r1, [sp, #8]
 800389a:	9201      	str	r2, [sp, #4]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4633      	mov	r3, r6
 80038a0:	462a      	mov	r2, r5
 80038a2:	4621      	mov	r1, r4
 80038a4:	f001 f81f 	bl	80048e6 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b2 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80038b2:	b590      	push	{r4, r7, lr}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b298      	uxth	r0, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	7899      	ldrb	r1, [r3, #2]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4623      	mov	r3, r4
 80038e0:	f001 f815 	bl	800490e <aci_l2cap_command_reject_event>

  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80038ee:	b590      	push	{r4, r7, lr}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af02      	add	r7, sp, #8
 80038f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b298      	uxth	r0, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	885b      	ldrh	r3, [r3, #2]
 8003908:	b299      	uxth	r1, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	889b      	ldrh	r3, [r3, #4]
 800390e:	b29a      	uxth	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	88db      	ldrh	r3, [r3, #6]
 8003914:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	4623      	mov	r3, r4
 800391e:	f000 fe75 	bl	800460c <aci_gatt_attribute_modified_event>

  return status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}

0800392c <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fe76 	bl	8004634 <aci_gatt_proc_timeout_event>

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29a      	uxth	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	885b      	ldrh	r3, [r3, #2]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f000 fe6a 	bl	800464a <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b298      	uxth	r0, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	7899      	ldrb	r1, [r3, #2]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80039a2:	f000 fe60 	bl	8004666 <aci_att_find_info_resp_event>

  return status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0a6      	sub	sp, #152	@ 0x98
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 80039c4:	2303      	movs	r3, #3
 80039c6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039d0:	e02e      	b.n	8003a30 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80039d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80039d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3398      	adds	r3, #152	@ 0x98
 80039ec:	443b      	add	r3, r7
 80039ee:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80039f2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80039f6:	3302      	adds	r3, #2
 80039f8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80039fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	3398      	adds	r3, #152	@ 0x98
 8003a16:	443b      	add	r3, r7
 8003a18:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003a1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003a20:	3302      	adds	r3, #2
 8003a22:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a34:	789b      	ldrb	r3, [r3, #2]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	dbc8      	blt.n	80039d2 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8003a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b298      	uxth	r0, r3
 8003a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	f107 0208 	add.w	r2, r7, #8
 8003a52:	4619      	mov	r1, r3
 8003a54:	f000 fe17 	bl	8004686 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8003a58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3798      	adds	r7, #152	@ 0x98
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	7899      	ldrb	r1, [r3, #2]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a86:	f000 fe0c 	bl	80046a2 <aci_att_read_by_type_resp_event>

  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b298      	uxth	r0, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f000 fe05 	bl	80046c2 <aci_att_read_resp_event>

  return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b298      	uxth	r0, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f000 fdfc 	bl	80046de <aci_att_read_blob_resp_event>

  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b298      	uxth	r0, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fdf3 	bl	80046fa <aci_att_read_multiple_resp_event>

  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b298      	uxth	r0, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	7899      	ldrb	r1, [r3, #2]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003b40:	f000 fde9 	bl	8004716 <aci_att_read_by_group_type_resp_event>

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8003b4e:	b590      	push	{r4, r7, lr}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b298      	uxth	r0, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	885b      	ldrh	r3, [r3, #2]
 8003b68:	b299      	uxth	r1, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	889b      	ldrh	r3, [r3, #4]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f000 fddb 	bl	8004736 <aci_att_prepare_write_resp_event>

  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fddc 	bl	800475e <aci_att_exec_write_resp_event>

  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b298      	uxth	r0, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	885b      	ldrh	r3, [r3, #2]
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003bd4:	f000 fdce 	bl	8004774 <aci_gatt_indication_event>

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b298      	uxth	r0, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	885b      	ldrh	r3, [r3, #2]
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003c06:	f000 fdc5 	bl	8004794 <aci_gatt_notification_event>

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	789b      	ldrb	r3, [r3, #2]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fdbf 	bl	80047b4 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b298      	uxth	r0, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	7899      	ldrb	r1, [r3, #2]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	795b      	ldrb	r3, [r3, #5]
 8003c66:	f000 fdb3 	bl	80047d0 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b298      	uxth	r0, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	885b      	ldrh	r3, [r3, #2]
 8003c8e:	b299      	uxth	r1, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c98:	f000 fdae 	bl	80047f8 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b298      	uxth	r0, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	885b      	ldrh	r3, [r3, #2]
 8003cc0:	b299      	uxth	r1, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003cca:	f000 fda5 	bl	8004818 <aci_gatt_write_permit_req_event>

  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b298      	uxth	r0, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	885b      	ldrh	r3, [r3, #2]
 8003cf2:	b299      	uxth	r1, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7fd f882 	bl	8000e04 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b0a6      	sub	sp, #152	@ 0x98
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d2a:	e019      	b.n	8003d60 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8003d2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	3398      	adds	r3, #152	@ 0x98
 8003d46:	443b      	add	r3, r7
 8003d48:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003d4c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003d50:	3302      	adds	r3, #2
 8003d52:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d64:	789b      	ldrb	r3, [r3, #2]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	dbdd      	blt.n	8003d2c <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8003d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b298      	uxth	r0, r3
 8003d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d7c:	789b      	ldrb	r3, [r3, #2]
 8003d7e:	f107 0208 	add.w	r2, r7, #8
 8003d82:	4619      	mov	r1, r3
 8003d84:	f000 fd58 	bl	8004838 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8003d88:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3798      	adds	r7, #152	@ 0x98
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	885b      	ldrh	r3, [r3, #2]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fd4e 	bl	8004854 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fd49 	bl	8004870 <aci_gatt_server_confirmation_event>

  return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b298      	uxth	r0, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	885b      	ldrh	r3, [r3, #2]
 8003e02:	b299      	uxth	r1, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	889b      	ldrh	r3, [r3, #4]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4623      	mov	r3, r4
 8003e16:	f000 fd36 	bl	8004886 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}

08003e24 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8003e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e26:	b08b      	sub	sp, #44	@ 0x2c
 8003e28:	af06      	add	r7, sp, #24
 8003e2a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781d      	ldrb	r5, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e3e:	b29e      	uxth	r6, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8003e56:	b292      	uxth	r2, r2
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8003e5e:	b289      	uxth	r1, r1
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8003e66:	b280      	uxth	r0, r0
 8003e68:	68bc      	ldr	r4, [r7, #8]
 8003e6a:	7c64      	ldrb	r4, [r4, #17]
 8003e6c:	9404      	str	r4, [sp, #16]
 8003e6e:	9003      	str	r0, [sp, #12]
 8003e70:	9102      	str	r1, [sp, #8]
 8003e72:	9201      	str	r2, [sp, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4673      	mov	r3, lr
 8003e78:	4662      	mov	r2, ip
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f7fc ffd3 	bl	8000e28 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e8c <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0a4      	sub	sp, #144	@ 0x90
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003eac:	e0b3      	b.n	8004016 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8003eae:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003eb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	7819      	ldrb	r1, [r3, #0]
 8003ec6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	3390      	adds	r3, #144	@ 0x90
 8003ed4:	443b      	add	r3, r7
 8003ed6:	3b88      	subs	r3, #136	@ 0x88
 8003ed8:	460a      	mov	r2, r1
 8003eda:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003edc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8003ee6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003eea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3302      	adds	r3, #2
 8003efc:	7819      	ldrb	r1, [r3, #0]
 8003efe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3390      	adds	r3, #144	@ 0x90
 8003f0c:	443b      	add	r3, r7
 8003f0e:	3b87      	subs	r3, #135	@ 0x87
 8003f10:	460a      	mov	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003f14:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8003f1e:	f107 0108 	add.w	r1, r7, #8
 8003f22:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	1c98      	adds	r0, r3, #2
 8003f32:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f44:	4413      	add	r3, r2
 8003f46:	3303      	adds	r3, #3
 8003f48:	2206      	movs	r2, #6
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f002 f927 	bl	800619e <memcpy>
    size += 6;
 8003f50:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f54:	3306      	adds	r3, #6
 8003f56:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8003f5a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003f5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3309      	adds	r3, #9
 8003f70:	7819      	ldrb	r1, [r3, #0]
 8003f72:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3390      	adds	r3, #144	@ 0x90
 8003f80:	443b      	add	r3, r7
 8003f82:	3b80      	subs	r3, #128	@ 0x80
 8003f84:	460a      	mov	r2, r1
 8003f86:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003f88:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8003f92:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fa6:	4413      	add	r3, r2
 8003fa8:	1c99      	adds	r1, r3, #2
 8003faa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	3390      	adds	r3, #144	@ 0x90
 8003fb8:	443b      	add	r3, r7
 8003fba:	3b7c      	subs	r3, #124	@ 0x7c
 8003fbc:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8003fbe:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003fc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3309      	adds	r3, #9
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003fda:	4413      	add	r3, r2
 8003fdc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8003fe0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b259      	sxtb	r1, r3
 8003fec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3390      	adds	r3, #144	@ 0x90
 8003ffa:	443b      	add	r3, r7
 8003ffc:	3b78      	subs	r3, #120	@ 0x78
 8003ffe:	460a      	mov	r2, r1
 8004000:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004002:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8004006:	3301      	adds	r3, #1
 8004008:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800400c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004010:	3301      	adds	r3, #1
 8004012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004016:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004022:	4293      	cmp	r3, r2
 8004024:	f6ff af43 	blt.w	8003eae <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8004028:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f107 0208 	add.w	r2, r7, #8
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f9f2 	bl	800441e <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800403a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800403e:	4618      	mov	r0, r3
 8004040:	3790      	adds	r7, #144	@ 0x90
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b087      	sub	sp, #28
 800404a:	af02      	add	r7, sp, #8
 800404c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	7818      	ldrb	r0, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004060:	b299      	uxth	r1, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004068:	b29a      	uxth	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004070:	b29c      	uxth	r4, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004078:	b29b      	uxth	r3, r3
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4623      	mov	r3, r4
 800407e:	f000 f9da 	bl	8004436 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	7818      	ldrb	r0, [r3, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80040a6:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80040ac:	461a      	mov	r2, r3
 80040ae:	f000 f9d6 	bl	800445e <hci_le_read_remote_used_features_complete_event>

  return status;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	895b      	ldrh	r3, [r3, #10]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	f000 f9cc 	bl	800447a <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b298      	uxth	r0, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	885b      	ldrh	r3, [r3, #2]
 8004106:	b299      	uxth	r1, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	889b      	ldrh	r3, [r3, #4]
 800410c:	b29a      	uxth	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	88db      	ldrh	r3, [r3, #6]
 8004112:	b29c      	uxth	r4, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	891b      	ldrh	r3, [r3, #8]
 8004118:	b29b      	uxth	r3, r3
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4623      	mov	r3, r4
 800411e:	f000 f9ba 	bl	8004496 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	bd90      	pop	{r4, r7, pc}

0800412c <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 f9b9 	bl	80044be <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f000 f9b0 	bl	80044d6 <hci_le_generate_dhkey_complete_event>

  return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8004180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004184:	b08d      	sub	sp, #52	@ 0x34
 8004186:	af08      	add	r7, sp, #32
 8004188:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f893 c000 	ldrb.w	ip, [r3]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800419e:	fa1f fe83 	uxth.w	lr, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f893 8003 	ldrb.w	r8, [r3, #3]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 80041c0:	b280      	uxth	r0, r0
 80041c2:	68bc      	ldr	r4, [r7, #8]
 80041c4:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 80041c8:	b2a4      	uxth	r4, r4
 80041ca:	68bd      	ldr	r5, [r7, #8]
 80041cc:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80041d0:	b2ad      	uxth	r5, r5
 80041d2:	68be      	ldr	r6, [r7, #8]
 80041d4:	7f76      	ldrb	r6, [r6, #29]
 80041d6:	9606      	str	r6, [sp, #24]
 80041d8:	9505      	str	r5, [sp, #20]
 80041da:	9404      	str	r4, [sp, #16]
 80041dc:	9003      	str	r0, [sp, #12]
 80041de:	9102      	str	r1, [sp, #8]
 80041e0:	9201      	str	r2, [sp, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	464b      	mov	r3, r9
 80041e6:	4642      	mov	r2, r8
 80041e8:	4671      	mov	r1, lr
 80041ea:	4660      	mov	r0, ip
 80041ec:	f000 f97f 	bl	80044ee <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041fc <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0a6      	sub	sp, #152	@ 0x98
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800421c:	e085      	b.n	800432a <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800421e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004222:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	3301      	adds	r3, #1
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	3398      	adds	r3, #152	@ 0x98
 8004236:	443b      	add	r3, r7
 8004238:	3b90      	subs	r3, #144	@ 0x90
 800423a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800423c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004240:	3301      	adds	r3, #1
 8004242:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8004246:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800424a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	3302      	adds	r3, #2
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	3398      	adds	r3, #152	@ 0x98
 800425e:	443b      	add	r3, r7
 8004260:	3b8f      	subs	r3, #143	@ 0x8f
 8004262:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004264:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004268:	3301      	adds	r3, #1
 800426a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800426e:	f107 0208 	add.w	r2, r7, #8
 8004272:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	1c98      	adds	r0, r3, #2
 800427c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004286:	4413      	add	r3, r2
 8004288:	3303      	adds	r3, #3
 800428a:	2206      	movs	r2, #6
 800428c:	4619      	mov	r1, r3
 800428e:	f001 ff86 	bl	800619e <memcpy>
    size += 6;
 8004292:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004296:	3306      	adds	r3, #6
 8004298:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800429c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80042a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4413      	add	r3, r2
 80042a8:	3309      	adds	r3, #9
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	3398      	adds	r3, #152	@ 0x98
 80042b4:	443b      	add	r3, r7
 80042b6:	3b88      	subs	r3, #136	@ 0x88
 80042b8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80042ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80042be:	3301      	adds	r3, #1
 80042c0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80042c4:	f107 0208 	add.w	r2, r7, #8
 80042c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3308      	adds	r3, #8
 80042d0:	4413      	add	r3, r2
 80042d2:	1c58      	adds	r0, r3, #1
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3308      	adds	r3, #8
 80042dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80042e0:	4413      	add	r3, r2
 80042e2:	3302      	adds	r3, #2
 80042e4:	2206      	movs	r2, #6
 80042e6:	4619      	mov	r1, r3
 80042e8:	f001 ff59 	bl	800619e <memcpy>
    size += 6;
 80042ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80042f0:	3306      	adds	r3, #6
 80042f2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80042f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80042fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4413      	add	r3, r2
 8004302:	3310      	adds	r3, #16
 8004304:	f993 2000 	ldrsb.w	r2, [r3]
 8004308:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3398      	adds	r3, #152	@ 0x98
 8004310:	443b      	add	r3, r7
 8004312:	3b81      	subs	r3, #129	@ 0x81
 8004314:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004316:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800431a:	3301      	adds	r3, #1
 800431c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004324:	3301      	adds	r3, #1
 8004326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800432a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004336:	4293      	cmp	r3, r2
 8004338:	f6ff af71 	blt.w	800421e <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800433c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	f107 0208 	add.w	r2, r7, #8
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f8e4 	bl	8004516 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800434e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004352:	4618      	mov	r0, r3
 8004354:	3798      	adds	r7, #152	@ 0x98
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <hci_disconnection_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason))
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	71fb      	strb	r3, [r7, #7]
 8004364:	460b      	mov	r3, r1
 8004366:	80bb      	strh	r3, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_disconnection_complete_event\r\n");
            
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
 8004382:	460b      	mov	r3, r1
 8004384:	80bb      	strh	r3, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8004396:	b490      	push	{r4, r7}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4604      	mov	r4, r0
 800439e:	4608      	mov	r0, r1
 80043a0:	4611      	mov	r1, r2
 80043a2:	461a      	mov	r2, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	71fb      	strb	r3, [r7, #7]
 80043a8:	4603      	mov	r3, r0
 80043aa:	80bb      	strh	r3, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	71bb      	strb	r3, [r7, #6]
 80043b0:	4613      	mov	r3, r2
 80043b2:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc90      	pop	{r4, r7}
 80043bc:	4770      	bx	lr

080043be <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	460a      	mov	r2, r1
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	6039      	str	r1, [r7, #0]
 8004428:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8004436:	b490      	push	{r4, r7}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4604      	mov	r4, r0
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	461a      	mov	r2, r3
 8004444:	4623      	mov	r3, r4
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	4603      	mov	r3, r0
 800444a:	80bb      	strh	r3, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
 8004450:	4613      	mov	r3, r2
 8004452:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bc90      	pop	{r4, r7}
 800445c:	4770      	bx	lr

0800445e <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	603a      	str	r2, [r7, #0]
 8004468:	71fb      	strb	r3, [r7, #7]
 800446a:	460b      	mov	r3, r1
 800446c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	4603      	mov	r3, r0
 8004482:	6039      	str	r1, [r7, #0]
 8004484:	80fb      	strh	r3, [r7, #6]
 8004486:	4613      	mov	r3, r2
 8004488:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8004496:	b490      	push	{r4, r7}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	4604      	mov	r4, r0
 800449e:	4608      	mov	r0, r1
 80044a0:	4611      	mov	r1, r2
 80044a2:	461a      	mov	r2, r3
 80044a4:	4623      	mov	r3, r4
 80044a6:	80fb      	strh	r3, [r7, #6]
 80044a8:	4603      	mov	r3, r0
 80044aa:	80bb      	strh	r3, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc90      	pop	{r4, r7}
 80044bc:	4770      	bx	lr

080044be <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	6039      	str	r1, [r7, #0]
 80044c8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	6039      	str	r1, [r7, #0]
 80044e0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80044ee:	b490      	push	{r4, r7}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	71fb      	strb	r3, [r7, #7]
 8004500:	4603      	mov	r3, r0
 8004502:	80bb      	strh	r3, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	71bb      	strb	r3, [r7, #6]
 8004508:	4613      	mov	r3, r2
 800450a:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bc90      	pop	{r4, r7}
 8004514:	4770      	bx	lr

08004516 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	80fb      	strh	r3, [r7, #6]
 8004546:	460b      	mov	r3, r1
 8004548:	717b      	strb	r3, [r7, #5]
 800454a:	4613      	mov	r3, r2
 800454c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
 80045ae:	460b      	mov	r3, r1
 80045b0:	71bb      	strb	r3, [r7, #6]
 80045b2:	4613      	mov	r3, r2
 80045b4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	4603      	mov	r3, r0
 80045ca:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	460a      	mov	r2, r1
 80045fa:	80fb      	strh	r3, [r7, #6]
 80045fc:	4613      	mov	r3, r2
 80045fe:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800460c:	b490      	push	{r4, r7}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4623      	mov	r3, r4
 800461c:	80fb      	strh	r3, [r7, #6]
 800461e:	4603      	mov	r3, r0
 8004620:	80bb      	strh	r3, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	807b      	strh	r3, [r7, #2]
 8004626:	4613      	mov	r3, r2
 8004628:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bc90      	pop	{r4, r7}
 8004632:	4770      	bx	lr

08004634 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	460a      	mov	r2, r1
 8004654:	80fb      	strh	r3, [r7, #6]
 8004656:	4613      	mov	r3, r2
 8004658:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4603      	mov	r3, r0
 8004670:	80fb      	strh	r3, [r7, #6]
 8004672:	460b      	mov	r3, r1
 8004674:	717b      	strb	r3, [r7, #5]
 8004676:	4613      	mov	r3, r2
 8004678:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	603a      	str	r2, [r7, #0]
 8004690:	80fb      	strh	r3, [r7, #6]
 8004692:	460b      	mov	r3, r1
 8004694:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	80fb      	strh	r3, [r7, #6]
 80046ae:	460b      	mov	r3, r1
 80046b0:	717b      	strb	r3, [r7, #5]
 80046b2:	4613      	mov	r3, r2
 80046b4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	603a      	str	r2, [r7, #0]
 80046cc:	80fb      	strh	r3, [r7, #6]
 80046ce:	460b      	mov	r3, r1
 80046d0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	603a      	str	r2, [r7, #0]
 80046e8:	80fb      	strh	r3, [r7, #6]
 80046ea:	460b      	mov	r3, r1
 80046ec:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	603a      	str	r2, [r7, #0]
 8004704:	80fb      	strh	r3, [r7, #6]
 8004706:	460b      	mov	r3, r1
 8004708:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
 8004722:	460b      	mov	r3, r1
 8004724:	717b      	strb	r3, [r7, #5]
 8004726:	4613      	mov	r3, r2
 8004728:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8004736:	b490      	push	{r4, r7}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	461a      	mov	r2, r3
 8004744:	4623      	mov	r3, r4
 8004746:	80fb      	strh	r3, [r7, #6]
 8004748:	4603      	mov	r3, r0
 800474a:	80bb      	strh	r3, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bc90      	pop	{r4, r7}
 800475c:	4770      	bx	lr

0800475e <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	4603      	mov	r3, r0
 800477e:	81fb      	strh	r3, [r7, #14]
 8004780:	460b      	mov	r3, r1
 8004782:	81bb      	strh	r3, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	4603      	mov	r3, r0
 800479e:	81fb      	strh	r3, [r7, #14]
 80047a0:	460b      	mov	r3, r1
 80047a2:	81bb      	strh	r3, [r7, #12]
 80047a4:	4613      	mov	r3, r2
 80047a6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	460a      	mov	r2, r1
 80047be:	80fb      	strh	r3, [r7, #6]
 80047c0:	4613      	mov	r3, r2
 80047c2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 80047d0:	b490      	push	{r4, r7}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	4611      	mov	r1, r2
 80047dc:	461a      	mov	r2, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	80fb      	strh	r3, [r7, #6]
 80047e2:	4603      	mov	r3, r0
 80047e4:	717b      	strb	r3, [r7, #5]
 80047e6:	460b      	mov	r3, r1
 80047e8:	807b      	strh	r3, [r7, #2]
 80047ea:	4613      	mov	r3, r2
 80047ec:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc90      	pop	{r4, r7}
 80047f6:	4770      	bx	lr

080047f8 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	4603      	mov	r3, r0
 8004802:	81fb      	strh	r3, [r7, #14]
 8004804:	460b      	mov	r3, r1
 8004806:	81bb      	strh	r3, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	4603      	mov	r3, r0
 8004822:	81fb      	strh	r3, [r7, #14]
 8004824:	460b      	mov	r3, r1
 8004826:	81bb      	strh	r3, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	603a      	str	r2, [r7, #0]
 8004842:	80fb      	strh	r3, [r7, #6]
 8004844:	460b      	mov	r3, r1
 8004846:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	460a      	mov	r2, r1
 800485e:	80fb      	strh	r3, [r7, #6]
 8004860:	4613      	mov	r3, r2
 8004862:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8004886:	b490      	push	{r4, r7}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	4604      	mov	r4, r0
 800488e:	4608      	mov	r0, r1
 8004890:	4611      	mov	r1, r2
 8004892:	461a      	mov	r2, r3
 8004894:	4623      	mov	r3, r4
 8004896:	80fb      	strh	r3, [r7, #6]
 8004898:	4603      	mov	r3, r0
 800489a:	80bb      	strh	r3, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
 80048a0:	4613      	mov	r3, r2
 80048a2:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc90      	pop	{r4, r7}
 80048ac:	4770      	bx	lr

080048ae <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	4603      	mov	r3, r0
 80048b6:	460a      	mov	r2, r1
 80048b8:	80fb      	strh	r3, [r7, #6]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	603a      	str	r2, [r7, #0]
 80048d4:	80fb      	strh	r3, [r7, #6]
 80048d6:	460b      	mov	r3, r1
 80048d8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80048e6:	b490      	push	{r4, r7}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4604      	mov	r4, r0
 80048ee:	4608      	mov	r0, r1
 80048f0:	4611      	mov	r1, r2
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	80fb      	strh	r3, [r7, #6]
 80048f8:	4603      	mov	r3, r0
 80048fa:	717b      	strb	r3, [r7, #5]
 80048fc:	460b      	mov	r3, r1
 80048fe:	807b      	strh	r3, [r7, #2]
 8004900:	4613      	mov	r3, r2
 8004902:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bc90      	pop	{r4, r7}
 800490c:	4770      	bx	lr

0800490e <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800490e:	b490      	push	{r4, r7}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	80fb      	strh	r3, [r7, #6]
 8004920:	4603      	mov	r3, r0
 8004922:	717b      	strb	r3, [r7, #5]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bc90      	pop	{r4, r7}
 8004934:	4770      	bx	lr

08004936 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	603a      	str	r2, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
 8004988:	460b      	mov	r3, r1
 800498a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	603a      	str	r2, [r7, #0]
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	460b      	mov	r3, r1
 80049a6:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	603a      	str	r2, [r7, #0]
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	460b      	mov	r3, r1
 80049c2:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	2218      	movs	r2, #24
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fb60 	bl	80060a8 <memset>
  rq.ogf = 0x03;
 80049e8:	2303      	movs	r3, #3
 80049ea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80049ec:	2303      	movs	r3, #3
 80049ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80049f4:	2301      	movs	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fe62 	bl	80056c8 <hci_send_req>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da01      	bge.n	8004a0e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004a0a:	23ff      	movs	r3, #255	@ 0xff
 8004a0c:	e005      	b.n	8004a1a <hci_reset+0x4a>
  if (status) {
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <hci_reset+0x48>
    return status;
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	e000      	b.n	8004a1a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004a22:	b5b0      	push	{r4, r5, r7, lr}
 8004a24:	b0ce      	sub	sp, #312	@ 0x138
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4605      	mov	r5, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a34:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004a38:	462a      	mov	r2, r5
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004a44:	4622      	mov	r2, r4
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a4c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8004a50:	4602      	mov	r2, r0
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a58:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a68:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	f107 020c 	add.w	r2, r7, #12
 8004a72:	4413      	add	r3, r2
 8004a74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a78:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004a7c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004a80:	4413      	add	r3, r2
 8004a82:	3309      	adds	r3, #9
 8004a84:	f107 020c 	add.w	r2, r7, #12
 8004a88:	4413      	add	r3, r2
 8004a8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a92:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004aa4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004aa8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ab0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004abe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ac2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004acc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ada:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ade:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004ae8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004aec:	3302      	adds	r3, #2
 8004aee:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004af2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004af6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004afa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004b02:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b06:	3301      	adds	r3, #1
 8004b08:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004b0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b10:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004b14:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004b16:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b24:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004b28:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004b2a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8004b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b38:	3308      	adds	r3, #8
 8004b3a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004b3e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fb2b 	bl	800619e <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8004b48:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004b4c:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004b50:	4413      	add	r3, r2
 8004b52:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004b56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b5a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004b5e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b60:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b64:	3301      	adds	r3, #1
 8004b66:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8004b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004b74:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fb10 	bl	800619e <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8004b7e:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004b82:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004b86:	4413      	add	r3, r2
 8004b88:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b90:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8004b94:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b96:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ba4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8004ba8:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004baa:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004bae:	3302      	adds	r3, #2
 8004bb0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bb8:	2218      	movs	r2, #24
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fa73 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8004bc2:	233f      	movs	r3, #63	@ 0x3f
 8004bc4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8004bc8:	2383      	movs	r3, #131	@ 0x83
 8004bca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004bd6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004bda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004bde:	f107 030b 	add.w	r3, r7, #11
 8004be2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004bec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fd68 	bl	80056c8 <hci_send_req>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da01      	bge.n	8004c02 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004bfe:	23ff      	movs	r3, #255	@ 0xff
 8004c00:	e00d      	b.n	8004c1e <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8004c02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c06:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <aci_gap_set_discoverable+0x1fa>
    return status;
 8004c10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c14:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	e000      	b.n	8004c1e <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bdb0      	pop	{r4, r5, r7, pc}

08004c28 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b0cf      	sub	sp, #316	@ 0x13c
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004c38:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c42:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004c46:	4622      	mov	r2, r4
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c4e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004c52:	4602      	mov	r2, r0
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c5a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004c5e:	460a      	mov	r2, r1
 8004c60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004c6a:	f107 030c 	add.w	r3, r7, #12
 8004c6e:	2207      	movs	r2, #7
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fa18 	bl	80060a8 <memset>
  uint8_t index_input = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 8004c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c82:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004c86:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c8e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004c92:	3301      	adds	r3, #1
 8004c94:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c9c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ca0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ca8:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004cac:	3301      	adds	r3, #1
 8004cae:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004cb6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004cba:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004cc2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ccc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cd0:	2218      	movs	r2, #24
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 f9e7 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8004cda:	233f      	movs	r3, #63	@ 0x3f
 8004cdc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 8004ce0:	238a      	movs	r3, #138	@ 0x8a
 8004ce2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8004cee:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004cf2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8004cf6:	f107 030c 	add.w	r3, r7, #12
 8004cfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8004cfe:	2307      	movs	r3, #7
 8004d00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8004d04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fcdc 	bl	80056c8 <hci_send_req>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da01      	bge.n	8004d1a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004d16:	23ff      	movs	r3, #255	@ 0xff
 8004d18:	e02e      	b.n	8004d78 <aci_gap_init+0x150>
  if (resp.Status) {
 8004d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <aci_gap_init+0x10c>
    return resp.Status;
 8004d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	e021      	b.n	8004d78 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004d34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004d60:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004d62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d6a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}

08004d82 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	2218      	movs	r2, #24
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f987 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8004d9a:	233f      	movs	r3, #63	@ 0x3f
 8004d9c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004d9e:	f240 1301 	movw	r3, #257	@ 0x101
 8004da2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fc88 	bl	80056c8 <hci_send_req>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	da01      	bge.n	8004dc2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004dbe:	23ff      	movs	r3, #255	@ 0xff
 8004dc0:	e005      	b.n	8004dce <aci_gatt_init+0x4c>
  if (status) {
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <aci_gatt_init+0x4a>
    return status;
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	e000      	b.n	8004dce <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004dd6:	b590      	push	{r4, r7, lr}
 8004dd8:	b0cf      	sub	sp, #316	@ 0x13c
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4604      	mov	r4, r0
 8004dde:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8004de2:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8004de6:	6001      	str	r1, [r0, #0]
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004df0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004df4:	4622      	mov	r2, r4
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004dfc:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004e00:	4602      	mov	r2, r0
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e08:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004e10:	f107 030c 	add.w	r3, r7, #12
 8004e14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e1c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d00a      	beq.n	8004e3c <aci_gatt_add_service+0x66>
 8004e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e2a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d101      	bne.n	8004e38 <aci_gatt_add_service+0x62>
 8004e34:	2311      	movs	r3, #17
 8004e36:	e002      	b.n	8004e3e <aci_gatt_add_service+0x68>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <aci_gatt_add_service+0x68>
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	f107 020c 	add.w	r2, r7, #12
 8004e42:	4413      	add	r3, r2
 8004e44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004e48:	f107 0308 	add.w	r3, r7, #8
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 f929 	bl	80060a8 <memset>
  uint8_t index_input = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004e5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004e60:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004e64:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e6c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004e70:	3301      	adds	r3, #1
 8004e72:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004e76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e7a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d002      	beq.n	8004e8a <aci_gatt_add_service+0xb4>
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d004      	beq.n	8004e92 <aci_gatt_add_service+0xbc>
 8004e88:	e007      	b.n	8004e9a <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004e90:	e005      	b.n	8004e9e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004e92:	2310      	movs	r3, #16
 8004e94:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004e98:	e001      	b.n	8004e9e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004e9a:	2347      	movs	r3, #71	@ 0x47
 8004e9c:	e06c      	b.n	8004f78 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004e9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004ea2:	1c58      	adds	r0, r3, #1
 8004ea4:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8004ea8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004eac:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	f001 f974 	bl	800619e <memcpy>
    index_input += size;
 8004eb6:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004eba:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ec8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ecc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004ed4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ee2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ee6:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004eee:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ef8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004efc:	2218      	movs	r2, #24
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 f8d1 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8004f06:	233f      	movs	r3, #63	@ 0x3f
 8004f08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8004f0c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004f10:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004f1c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004f20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004f32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fbc5 	bl	80056c8 <hci_send_req>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	da01      	bge.n	8004f48 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8004f44:	23ff      	movs	r3, #255	@ 0xff
 8004f46:	e017      	b.n	8004f78 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8004f48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004f56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	e00a      	b.n	8004f78 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004f62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004f74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}

08004f82 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8004f82:	b590      	push	{r4, r7, lr}
 8004f84:	b0d1      	sub	sp, #324	@ 0x144
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8004f90:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8004f94:	600a      	str	r2, [r1, #0]
 8004f96:	4619      	mov	r1, r3
 8004f98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f9c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fa8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004fac:	4602      	mov	r2, r0
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fb4:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8004fb8:	460a      	mov	r2, r1
 8004fba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004fc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fc8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00a      	beq.n	8004fe8 <aci_gatt_add_char+0x66>
 8004fd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fd6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d101      	bne.n	8004fe4 <aci_gatt_add_char+0x62>
 8004fe0:	2313      	movs	r3, #19
 8004fe2:	e002      	b.n	8004fea <aci_gatt_add_char+0x68>
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e000      	b.n	8004fea <aci_gatt_add_char+0x68>
 8004fe8:	2305      	movs	r3, #5
 8004fea:	f107 0214 	add.w	r2, r7, #20
 8004fee:	4413      	add	r3, r2
 8004ff0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004ff4:	f107 0310 	add.w	r3, r7, #16
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 f853 	bl	80060a8 <memset>
  uint8_t index_input = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005008:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800500c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005010:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005018:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800501c:	3302      	adds	r3, #2
 800501e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005022:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005026:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800502a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005032:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005036:	3301      	adds	r3, #1
 8005038:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800503c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005040:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d002      	beq.n	8005050 <aci_gatt_add_char+0xce>
 800504a:	2b02      	cmp	r3, #2
 800504c:	d004      	beq.n	8005058 <aci_gatt_add_char+0xd6>
 800504e:	e007      	b.n	8005060 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8005050:	2302      	movs	r3, #2
 8005052:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005056:	e005      	b.n	8005064 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005058:	2310      	movs	r3, #16
 800505a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800505e:	e001      	b.n	8005064 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005060:	2347      	movs	r3, #71	@ 0x47
 8005062:	e091      	b.n	8005188 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005064:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005068:	1cd8      	adds	r0, r3, #3
 800506a:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800506e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005072:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005076:	6819      	ldr	r1, [r3, #0]
 8005078:	f001 f891 	bl	800619e <memcpy>
    index_input += size;
 800507c:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8005080:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005084:	4413      	add	r3, r2
 8005086:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800508a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800508e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005092:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005096:	8812      	ldrh	r2, [r2, #0]
 8005098:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800509a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800509e:	3302      	adds	r3, #2
 80050a0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 80050a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050a8:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80050ac:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80050ae:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050b2:	3301      	adds	r3, #1
 80050b4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80050b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050bc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80050c0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80050c2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050c6:	3301      	adds	r3, #1
 80050c8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80050cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050d0:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80050d4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80050d6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050da:	3301      	adds	r3, #1
 80050dc:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80050e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050e4:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80050e8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80050ea:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050ee:	3301      	adds	r3, #1
 80050f0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80050f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050f8:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80050fc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80050fe:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005102:	3301      	adds	r3, #1
 8005104:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005108:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800510c:	2218      	movs	r2, #24
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f000 ffc9 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8005116:	233f      	movs	r3, #63	@ 0x3f
 8005118:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800511c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005120:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800512c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005130:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005134:	f107 0310 	add.w	r3, r7, #16
 8005138:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800513c:	2303      	movs	r3, #3
 800513e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005142:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fabd 	bl	80056c8 <hci_send_req>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	da01      	bge.n	8005158 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005154:	23ff      	movs	r3, #255	@ 0xff
 8005156:	e017      	b.n	8005188 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8005158:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005166:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800516a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	e00a      	b.n	8005188 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005172:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005176:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800517a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800517e:	b29a      	uxth	r2, r3
 8005180:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005184:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}

08005192 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8005192:	b5b0      	push	{r4, r5, r7, lr}
 8005194:	b0cc      	sub	sp, #304	@ 0x130
 8005196:	af00      	add	r7, sp, #0
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051a4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80051a8:	462a      	mov	r2, r5
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80051b4:	4622      	mov	r2, r4
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051bc:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80051c0:	4602      	mov	r2, r0
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051c8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80051cc:	460a      	mov	r2, r1
 80051ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80051d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051dc:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80051ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80051f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80051fa:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80051fe:	3302      	adds	r3, #2
 8005200:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005208:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800520c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005214:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005218:	3302      	adds	r3, #2
 800521a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005222:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005226:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800522e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005232:	3301      	adds	r3, #1
 8005234:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800523c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005240:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005248:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800524c:	3301      	adds	r3, #1
 800524e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005256:	1d98      	adds	r0, r3, #6
 8005258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800525c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005268:	f000 ff99 	bl	800619e <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800526c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005270:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005274:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	4413      	add	r3, r2
 800527c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005280:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005284:	2218      	movs	r2, #24
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f000 ff0d 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 800528e:	233f      	movs	r3, #63	@ 0x3f
 8005290:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005294:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005298:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80052a4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80052a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80052ac:	f107 030b 	add.w	r3, r7, #11
 80052b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80052ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fa01 	bl	80056c8 <hci_send_req>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da01      	bge.n	80052d0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80052cc:	23ff      	movs	r3, #255	@ 0xff
 80052ce:	e00d      	b.n	80052ec <aci_gatt_update_char_value+0x15a>
  if (status) {
 80052d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052d4:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <aci_gatt_update_char_value+0x158>
    return status;
 80052de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052e2:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	e000      	b.n	80052ec <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b0cc      	sub	sp, #304	@ 0x130
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4602      	mov	r2, r0
 80052fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005302:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005306:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8005308:	f107 030c 	add.w	r3, r7, #12
 800530c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005310:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005314:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8005322:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005326:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800532a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800532e:	8812      	ldrh	r2, [r2, #0]
 8005330:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005332:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005336:	3302      	adds	r3, #2
 8005338:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800533c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005340:	2218      	movs	r2, #24
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f000 feaf 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 800534a:	233f      	movs	r3, #63	@ 0x3f
 800534c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8005350:	f240 1327 	movw	r3, #295	@ 0x127
 8005354:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005360:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005364:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005368:	f107 030b 	add.w	r3, r7, #11
 800536c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005370:	2301      	movs	r3, #1
 8005372:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f9a3 	bl	80056c8 <hci_send_req>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	da01      	bge.n	800538c <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8005388:	23ff      	movs	r3, #255	@ 0xff
 800538a:	e00d      	b.n	80053a8 <aci_gatt_allow_read+0xb2>
  if (status) {
 800538c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005390:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <aci_gatt_allow_read+0xb0>
    return status;
 800539a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800539e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	e000      	b.n	80053a8 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b0cc      	sub	sp, #304	@ 0x130
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80053ca:	4602      	mov	r2, r0
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80053d6:	460a      	mov	r2, r1
 80053d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80053da:	f107 030c 	add.w	r3, r7, #12
 80053de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80053e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053e6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 80053f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053fc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005404:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005408:	3301      	adds	r3, #1
 800540a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 800540e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005412:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005416:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800541e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005422:	3301      	adds	r3, #1
 8005424:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005428:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800542c:	1c98      	adds	r0, r3, #2
 800542e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005432:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005440:	6819      	ldr	r1, [r3, #0]
 8005442:	f000 feac 	bl	800619e <memcpy>
    index_input += Length*sizeof(uint8_t);
 8005446:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800544a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800544e:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4413      	add	r3, r2
 8005456:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800545a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800545e:	2218      	movs	r2, #24
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fe20 	bl	80060a8 <memset>
  rq.ogf = 0x3f;
 8005468:	233f      	movs	r3, #63	@ 0x3f
 800546a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800546e:	230c      	movs	r3, #12
 8005470:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800547c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005480:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005484:	f107 030b 	add.w	r3, r7, #11
 8005488:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800548c:	2301      	movs	r3, #1
 800548e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f915 	bl	80056c8 <hci_send_req>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	da01      	bge.n	80054a8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80054a4:	23ff      	movs	r3, #255	@ 0xff
 80054a6:	e00d      	b.n	80054c4 <aci_hal_write_config_data+0x112>
  if (status) {
 80054a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054ac:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <aci_hal_write_config_data+0x110>
    return status;
 80054b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054ba:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	e000      	b.n	80054c4 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3308      	adds	r3, #8
 80054da:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d001      	beq.n	80054e8 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80054e4:	2301      	movs	r3, #1
 80054e6:	e00c      	b.n	8005502 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3302      	adds	r3, #2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80054f6:	3b03      	subs	r3, #3
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d001      	beq.n	8005500 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80054fc:	2302      	movs	r3, #2
 80054fe:	e000      	b.n	8005502 <verify_packet+0x34>
  
  return 0;      
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0a6      	sub	sp, #152	@ 0x98
 8005514:	af00      	add	r7, sp, #0
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	4603      	mov	r3, r0
 800551a:	81fb      	strh	r3, [r7, #14]
 800551c:	460b      	mov	r3, r1
 800551e:	81bb      	strh	r3, [r7, #12]
 8005520:	4613      	mov	r3, r2
 8005522:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005524:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552c:	b21a      	sxth	r2, r3
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	b21b      	sxth	r3, r3
 8005534:	4313      	orrs	r3, r2
 8005536:	b21b      	sxth	r3, r3
 8005538:	b29b      	uxth	r3, r3
 800553a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800553c:	7afb      	ldrb	r3, [r7, #11]
 800553e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005540:	2301      	movs	r3, #1
 8005542:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005544:	f107 0318 	add.w	r3, r7, #24
 8005548:	3301      	adds	r3, #1
 800554a:	461a      	mov	r2, r3
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	8819      	ldrh	r1, [r3, #0]
 8005552:	789b      	ldrb	r3, [r3, #2]
 8005554:	8011      	strh	r1, [r2, #0]
 8005556:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005558:	f107 0318 	add.w	r3, r7, #24
 800555c:	3304      	adds	r3, #4
 800555e:	7afa      	ldrb	r2, [r7, #11]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fe1b 	bl	800619e <memcpy>
  
  if (hciContext.io.Send)
 8005568:	4b08      	ldr	r3, [pc, #32]	@ (800558c <send_cmd+0x7c>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005570:	4b06      	ldr	r3, [pc, #24]	@ (800558c <send_cmd+0x7c>)
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	7afa      	ldrb	r2, [r7, #11]
 8005576:	b292      	uxth	r2, r2
 8005578:	3204      	adds	r2, #4
 800557a:	b291      	uxth	r1, r2
 800557c:	f107 0218 	add.w	r2, r7, #24
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
  }
}
 8005584:	bf00      	nop
 8005586:	3798      	adds	r7, #152	@ 0x98
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200007cc 	.word	0x200007cc

08005590 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800559a:	e00a      	b.n	80055b2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	4619      	mov	r1, r3
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	f000 fae8 	bl	8005b78 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fa4f 	bl	8005a50 <list_insert_head>
  while (!list_is_empty(src_list))
 80055b2:	6838      	ldr	r0, [r7, #0]
 80055b4:	f000 fa2a 	bl	8005a0c <list_is_empty>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <move_list+0xc>
  }
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80055ce:	e009      	b.n	80055e4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4809      	ldr	r0, [pc, #36]	@ (80055fc <free_event_list+0x34>)
 80055d6:	f000 faa8 	bl	8005b2a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4619      	mov	r1, r3
 80055de:	4808      	ldr	r0, [pc, #32]	@ (8005600 <free_event_list+0x38>)
 80055e0:	f000 fa5c 	bl	8005a9c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80055e4:	4806      	ldr	r0, [pc, #24]	@ (8005600 <free_event_list+0x38>)
 80055e6:	f000 faee 	bl	8005bc6 <list_get_size>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	ddef      	ble.n	80055d0 <free_event_list+0x8>
  }
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	2000024c 	.word	0x2000024c
 8005600:	20000244 	.word	0x20000244

08005604 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <hci_init+0x74>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800561a:	4818      	ldr	r0, [pc, #96]	@ (800567c <hci_init+0x78>)
 800561c:	f000 f9e6 	bl	80059ec <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005620:	4817      	ldr	r0, [pc, #92]	@ (8005680 <hci_init+0x7c>)
 8005622:	f000 f9e3 	bl	80059ec <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005626:	f7fb f91b 	bl	8000860 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	e00c      	b.n	800564a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	228c      	movs	r2, #140	@ 0x8c
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <hci_init+0x80>)
 800563a:	4413      	add	r3, r2
 800563c:	4619      	mov	r1, r3
 800563e:	480f      	ldr	r0, [pc, #60]	@ (800567c <hci_init+0x78>)
 8005640:	f000 fa2c 	bl	8005a9c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	3301      	adds	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b09      	cmp	r3, #9
 800564e:	d9ef      	bls.n	8005630 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <hci_init+0x74>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <hci_init+0x5c>
 8005658:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <hci_init+0x74>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <hci_init+0x74>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <hci_init+0x6a>
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <hci_init+0x74>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4798      	blx	r3
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	200007cc 	.word	0x200007cc
 800567c:	20000244 	.word	0x20000244
 8005680:	2000024c 	.word	0x2000024c
 8005684:	20000254 	.word	0x20000254

08005688 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0b      	ldr	r2, [pc, #44]	@ (80056c4 <hci_register_io_bus+0x3c>)
 8005696:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <hci_register_io_bus+0x3c>)
 800569e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	4a07      	ldr	r2, [pc, #28]	@ (80056c4 <hci_register_io_bus+0x3c>)
 80056a6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <hci_register_io_bus+0x3c>)
 80056ae:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a03      	ldr	r2, [pc, #12]	@ (80056c4 <hci_register_io_bus+0x3c>)
 80056b6:	6093      	str	r3, [r2, #8]
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	200007cc 	.word	0x200007cc

080056c8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	@ 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	885b      	ldrh	r3, [r3, #2]
 80056d8:	b21b      	sxth	r3, r3
 80056da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056de:	b21a      	sxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	b21b      	sxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80056f2:	f107 0308 	add.w	r3, r7, #8
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f978 	bl	80059ec <list_init_head>

  free_event_list();
 80056fc:	f7ff ff64 	bl	80055c8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8818      	ldrh	r0, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8859      	ldrh	r1, [r3, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f7ff fefd 	bl	8005510 <send_cmd>
  
  if (async)
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <hci_send_req+0x58>
  {
    return 0;
 800571c:	2300      	movs	r3, #0
 800571e:	e0e2      	b.n	80058e6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005720:	f7fb ff3a 	bl	8001598 <HAL_GetTick>
 8005724:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005726:	f7fb ff37 	bl	8001598 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005734:	f200 80b3 	bhi.w	800589e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005738:	486d      	ldr	r0, [pc, #436]	@ (80058f0 <hci_send_req+0x228>)
 800573a:	f000 f967 	bl	8005a0c <list_is_empty>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d000      	beq.n	8005746 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005744:	e7ef      	b.n	8005726 <hci_send_req+0x5e>
      {
        break;
 8005746:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005748:	f107 0310 	add.w	r3, r7, #16
 800574c:	4619      	mov	r1, r3
 800574e:	4868      	ldr	r0, [pc, #416]	@ (80058f0 <hci_send_req+0x228>)
 8005750:	f000 f9eb 	bl	8005b2a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	3308      	adds	r3, #8
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d17f      	bne.n	8005862 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005764:	3301      	adds	r3, #1
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3308      	adds	r3, #8
 800576c:	3303      	adds	r3, #3
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005776:	3b03      	subs	r3, #3
 8005778:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005780:	d04c      	beq.n	800581c <hci_send_req+0x154>
 8005782:	2b3e      	cmp	r3, #62	@ 0x3e
 8005784:	dc68      	bgt.n	8005858 <hci_send_req+0x190>
 8005786:	2b10      	cmp	r3, #16
 8005788:	f000 808b 	beq.w	80058a2 <hci_send_req+0x1da>
 800578c:	2b10      	cmp	r3, #16
 800578e:	dc63      	bgt.n	8005858 <hci_send_req+0x190>
 8005790:	2b0e      	cmp	r3, #14
 8005792:	d023      	beq.n	80057dc <hci_send_req+0x114>
 8005794:	2b0f      	cmp	r3, #15
 8005796:	d15f      	bne.n	8005858 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	885b      	ldrh	r3, [r3, #2]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d17e      	bne.n	80058a6 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d004      	beq.n	80057ba <hci_send_req+0xf2>
          if (cs->status) {
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d051      	beq.n	800585c <hci_send_req+0x194>
            goto failed;
 80057b8:	e078      	b.n	80058ac <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	bf28      	it	cs
 80057c4:	461a      	movcs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6918      	ldr	r0, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057d6:	f000 fce2 	bl	800619e <memcpy>
        goto done;
 80057da:	e078      	b.n	80058ce <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d15d      	bne.n	80058aa <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	3303      	adds	r3, #3
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	3b03      	subs	r3, #3
 80057f8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	429a      	cmp	r2, r3
 8005802:	bf28      	it	cs
 8005804:	461a      	movcs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6918      	ldr	r0, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	461a      	mov	r2, r3
 8005814:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005816:	f000 fcc2 	bl	800619e <memcpy>
        goto done;
 800581a:	e058      	b.n	80058ce <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d118      	bne.n	8005860 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	3b01      	subs	r3, #1
 8005832:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf28      	it	cs
 800583e:	461a      	movcs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6918      	ldr	r0, [r3, #16]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	461a      	mov	r2, r3
 8005852:	f000 fca4 	bl	800619e <memcpy>
        goto done;
 8005856:	e03a      	b.n	80058ce <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8005858:	bf00      	nop
 800585a:	e002      	b.n	8005862 <hci_send_req+0x19a>
          break;
 800585c:	bf00      	nop
 800585e:	e000      	b.n	8005862 <hci_send_req+0x19a>
          break;
 8005860:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005862:	4824      	ldr	r0, [pc, #144]	@ (80058f4 <hci_send_req+0x22c>)
 8005864:	f000 f8d2 	bl	8005a0c <list_is_empty>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <hci_send_req+0x1c2>
 800586e:	4820      	ldr	r0, [pc, #128]	@ (80058f0 <hci_send_req+0x228>)
 8005870:	f000 f8cc 	bl	8005a0c <list_is_empty>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4619      	mov	r1, r3
 800587e:	481d      	ldr	r0, [pc, #116]	@ (80058f4 <hci_send_req+0x22c>)
 8005880:	f000 f90c 	bl	8005a9c <list_insert_tail>
      hciReadPacket=NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e008      	b.n	800589c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f902 	bl	8005a9c <list_insert_tail>
      hciReadPacket=NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  {
 800589c:	e740      	b.n	8005720 <hci_send_req+0x58>
        goto failed;
 800589e:	bf00      	nop
 80058a0:	e004      	b.n	80058ac <hci_send_req+0x1e4>
        goto failed;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <hci_send_req+0x1e4>
          goto failed;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <hci_send_req+0x1e4>
          goto failed;
 80058aa:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4619      	mov	r1, r3
 80058b6:	480f      	ldr	r0, [pc, #60]	@ (80058f4 <hci_send_req+0x22c>)
 80058b8:	f000 f8ca 	bl	8005a50 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	4619      	mov	r1, r3
 80058c2:	480b      	ldr	r0, [pc, #44]	@ (80058f0 <hci_send_req+0x228>)
 80058c4:	f7ff fe64 	bl	8005590 <move_list>

  return -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	e00b      	b.n	80058e6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4619      	mov	r1, r3
 80058d2:	4808      	ldr	r0, [pc, #32]	@ (80058f4 <hci_send_req+0x22c>)
 80058d4:	f000 f8bc 	bl	8005a50 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80058d8:	f107 0308 	add.w	r3, r7, #8
 80058dc:	4619      	mov	r1, r3
 80058de:	4804      	ldr	r0, [pc, #16]	@ (80058f0 <hci_send_req+0x228>)
 80058e0:	f7ff fe56 	bl	8005590 <move_list>

  return 0;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3738      	adds	r7, #56	@ 0x38
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000024c 	.word	0x2000024c
 80058f4:	20000244 	.word	0x20000244

080058f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005902:	e013      	b.n	800592c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	4619      	mov	r1, r3
 8005908:	480e      	ldr	r0, [pc, #56]	@ (8005944 <hci_user_evt_proc+0x4c>)
 800590a:	f000 f90e 	bl	8005b2a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800590e:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <hci_user_evt_proc+0x50>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005916:	4b0c      	ldr	r3, [pc, #48]	@ (8005948 <hci_user_evt_proc+0x50>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	3208      	adds	r2, #8
 800591e:	4610      	mov	r0, r2
 8005920:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4619      	mov	r1, r3
 8005926:	4809      	ldr	r0, [pc, #36]	@ (800594c <hci_user_evt_proc+0x54>)
 8005928:	f000 f8b8 	bl	8005a9c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800592c:	4805      	ldr	r0, [pc, #20]	@ (8005944 <hci_user_evt_proc+0x4c>)
 800592e:	f000 f86d 	bl	8005a0c <list_is_empty>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0e5      	beq.n	8005904 <hci_user_evt_proc+0xc>
  }
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	2000024c 	.word	0x2000024c
 8005948:	200007cc 	.word	0x200007cc
 800594c:	20000244 	.word	0x20000244

08005950 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005960:	481f      	ldr	r0, [pc, #124]	@ (80059e0 <hci_notify_asynch_evt+0x90>)
 8005962:	f000 f853 	bl	8005a0c <list_is_empty>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d132      	bne.n	80059d2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4619      	mov	r1, r3
 8005972:	481b      	ldr	r0, [pc, #108]	@ (80059e0 <hci_notify_asynch_evt+0x90>)
 8005974:	f000 f8d9 	bl	8005b2a <list_remove_head>
    
    if (hciContext.io.Receive)
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <hci_notify_asynch_evt+0x94>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d02a      	beq.n	80059d6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005980:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <hci_notify_asynch_evt+0x94>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	3208      	adds	r2, #8
 8005988:	2180      	movs	r1, #128	@ 0x80
 800598a:	4610      	mov	r0, r2
 800598c:	4798      	blx	r3
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d016      	beq.n	80059c6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7cfa      	ldrb	r2, [r7, #19]
 800599c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fd93 	bl	80054ce <verify_packet>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4619      	mov	r1, r3
 80059b2:	480d      	ldr	r0, [pc, #52]	@ (80059e8 <hci_notify_asynch_evt+0x98>)
 80059b4:	f000 f872 	bl	8005a9c <list_insert_tail>
 80059b8:	e00d      	b.n	80059d6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4619      	mov	r1, r3
 80059be:	4808      	ldr	r0, [pc, #32]	@ (80059e0 <hci_notify_asynch_evt+0x90>)
 80059c0:	f000 f846 	bl	8005a50 <list_insert_head>
 80059c4:	e007      	b.n	80059d6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4805      	ldr	r0, [pc, #20]	@ (80059e0 <hci_notify_asynch_evt+0x90>)
 80059cc:	f000 f840 	bl	8005a50 <list_insert_head>
 80059d0:	e001      	b.n	80059d6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80059d6:	697b      	ldr	r3, [r7, #20]
  
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000244 	.word	0x20000244
 80059e4:	200007cc 	.word	0x200007cc
 80059e8:	2000024c 	.word	0x2000024c

080059ec <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a14:	f3ef 8310 	mrs	r3, PRIMASK
 8005a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1e:	b672      	cpsid	i
}
 8005a20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d102      	bne.n	8005a32 <list_is_empty+0x26>
  {
    return_value = 1;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	75fb      	strb	r3, [r7, #23]
 8005a30:	e001      	b.n	8005a36 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f383 8810 	msr	PRIMASK, r3
}
 8005a40:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
}
 8005a66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab0:	b672      	cpsid	i
}
 8005ab2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005af6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005afa:	b672      	cpsid	i
}
 8005afc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6852      	ldr	r2, [r2, #4]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f383 8810 	msr	PRIMASK, r3
}
 8005b1c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b34:	f3ef 8310 	mrs	r3, PRIMASK
 8005b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b3e:	b672      	cpsid	i
}
 8005b40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff ffca 	bl	8005ae8 <list_remove_node>
  (*node)->next = NULL;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b70:	bf00      	nop
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b82:	f3ef 8310 	mrs	r3, PRIMASK
 8005b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b8c:	b672      	cpsid	i
}
 8005b8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ffa3 	bl	8005ae8 <list_remove_node>
  (*node)->next = NULL;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f383 8810 	msr	PRIMASK, r3
}
 8005bbc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b089      	sub	sp, #36	@ 0x24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd6:	613b      	str	r3, [r7, #16]
  return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bdc:	b672      	cpsid	i
}
 8005bde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005be6:	e005      	b.n	8005bf4 <list_get_size+0x2e>
  {
    size++;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d1f5      	bne.n	8005be8 <list_get_size+0x22>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f383 8810 	msr	PRIMASK, r3
}
 8005c06:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005c08:	69fb      	ldr	r3, [r7, #28]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	@ 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <rand>:
 8005c18:	4b16      	ldr	r3, [pc, #88]	@ (8005c74 <rand+0x5c>)
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c20:	b9b3      	cbnz	r3, 8005c50 <rand+0x38>
 8005c22:	2018      	movs	r0, #24
 8005c24:	f000 fb32 	bl	800628c <malloc>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8005c2c:	b920      	cbnz	r0, 8005c38 <rand+0x20>
 8005c2e:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <rand+0x60>)
 8005c30:	4812      	ldr	r0, [pc, #72]	@ (8005c7c <rand+0x64>)
 8005c32:	2152      	movs	r1, #82	@ 0x52
 8005c34:	f000 fac2 	bl	80061bc <__assert_func>
 8005c38:	4911      	ldr	r1, [pc, #68]	@ (8005c80 <rand+0x68>)
 8005c3a:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <rand+0x6c>)
 8005c3c:	e9c0 1300 	strd	r1, r3, [r0]
 8005c40:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <rand+0x70>)
 8005c42:	6083      	str	r3, [r0, #8]
 8005c44:	230b      	movs	r3, #11
 8005c46:	8183      	strh	r3, [r0, #12]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c52:	480e      	ldr	r0, [pc, #56]	@ (8005c8c <rand+0x74>)
 8005c54:	690b      	ldr	r3, [r1, #16]
 8005c56:	694c      	ldr	r4, [r1, #20]
 8005c58:	4a0d      	ldr	r2, [pc, #52]	@ (8005c90 <rand+0x78>)
 8005c5a:	4358      	muls	r0, r3
 8005c5c:	fb02 0004 	mla	r0, r2, r4, r0
 8005c60:	fba3 3202 	umull	r3, r2, r3, r2
 8005c64:	3301      	adds	r3, #1
 8005c66:	eb40 0002 	adc.w	r0, r0, r2
 8005c6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005c6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005c72:	bd10      	pop	{r4, pc}
 8005c74:	20000020 	.word	0x20000020
 8005c78:	08007058 	.word	0x08007058
 8005c7c:	0800706f 	.word	0x0800706f
 8005c80:	abcd330e 	.word	0xabcd330e
 8005c84:	e66d1234 	.word	0xe66d1234
 8005c88:	0005deec 	.word	0x0005deec
 8005c8c:	5851f42d 	.word	0x5851f42d
 8005c90:	4c957f2d 	.word	0x4c957f2d

08005c94 <std>:
 8005c94:	2300      	movs	r3, #0
 8005c96:	b510      	push	{r4, lr}
 8005c98:	4604      	mov	r4, r0
 8005c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ca2:	6083      	str	r3, [r0, #8]
 8005ca4:	8181      	strh	r1, [r0, #12]
 8005ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ca8:	81c2      	strh	r2, [r0, #14]
 8005caa:	6183      	str	r3, [r0, #24]
 8005cac:	4619      	mov	r1, r3
 8005cae:	2208      	movs	r2, #8
 8005cb0:	305c      	adds	r0, #92	@ 0x5c
 8005cb2:	f000 f9f9 	bl	80060a8 <memset>
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <std+0x58>)
 8005cb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cba:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <std+0x5c>)
 8005cbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <std+0x60>)
 8005cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <std+0x64>)
 8005cc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <std+0x68>)
 8005cc8:	6224      	str	r4, [r4, #32]
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d006      	beq.n	8005cdc <std+0x48>
 8005cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cd2:	4294      	cmp	r4, r2
 8005cd4:	d002      	beq.n	8005cdc <std+0x48>
 8005cd6:	33d0      	adds	r3, #208	@ 0xd0
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	d105      	bne.n	8005ce8 <std+0x54>
 8005cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce4:	f000 ba58 	b.w	8006198 <__retarget_lock_init_recursive>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	08005ef9 	.word	0x08005ef9
 8005cf0:	08005f1b 	.word	0x08005f1b
 8005cf4:	08005f53 	.word	0x08005f53
 8005cf8:	08005f77 	.word	0x08005f77
 8005cfc:	200007ec 	.word	0x200007ec

08005d00 <stdio_exit_handler>:
 8005d00:	4a02      	ldr	r2, [pc, #8]	@ (8005d0c <stdio_exit_handler+0xc>)
 8005d02:	4903      	ldr	r1, [pc, #12]	@ (8005d10 <stdio_exit_handler+0x10>)
 8005d04:	4803      	ldr	r0, [pc, #12]	@ (8005d14 <stdio_exit_handler+0x14>)
 8005d06:	f000 b869 	b.w	8005ddc <_fwalk_sglue>
 8005d0a:	bf00      	nop
 8005d0c:	20000014 	.word	0x20000014
 8005d10:	08006aa1 	.word	0x08006aa1
 8005d14:	20000024 	.word	0x20000024

08005d18 <cleanup_stdio>:
 8005d18:	6841      	ldr	r1, [r0, #4]
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <cleanup_stdio+0x34>)
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	4604      	mov	r4, r0
 8005d22:	d001      	beq.n	8005d28 <cleanup_stdio+0x10>
 8005d24:	f000 febc 	bl	8006aa0 <_fflush_r>
 8005d28:	68a1      	ldr	r1, [r4, #8]
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <cleanup_stdio+0x38>)
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	d002      	beq.n	8005d36 <cleanup_stdio+0x1e>
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 feb5 	bl	8006aa0 <_fflush_r>
 8005d36:	68e1      	ldr	r1, [r4, #12]
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <cleanup_stdio+0x3c>)
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d004      	beq.n	8005d48 <cleanup_stdio+0x30>
 8005d3e:	4620      	mov	r0, r4
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 beac 	b.w	8006aa0 <_fflush_r>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200007ec 	.word	0x200007ec
 8005d50:	20000854 	.word	0x20000854
 8005d54:	200008bc 	.word	0x200008bc

08005d58 <global_stdio_init.part.0>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <global_stdio_init.part.0+0x30>)
 8005d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d8c <global_stdio_init.part.0+0x34>)
 8005d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <global_stdio_init.part.0+0x38>)
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	4620      	mov	r0, r4
 8005d64:	2200      	movs	r2, #0
 8005d66:	2104      	movs	r1, #4
 8005d68:	f7ff ff94 	bl	8005c94 <std>
 8005d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d70:	2201      	movs	r2, #1
 8005d72:	2109      	movs	r1, #9
 8005d74:	f7ff ff8e 	bl	8005c94 <std>
 8005d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d82:	2112      	movs	r1, #18
 8005d84:	f7ff bf86 	b.w	8005c94 <std>
 8005d88:	20000924 	.word	0x20000924
 8005d8c:	200007ec 	.word	0x200007ec
 8005d90:	08005d01 	.word	0x08005d01

08005d94 <__sfp_lock_acquire>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__sfp_lock_acquire+0x8>)
 8005d96:	f000 ba00 	b.w	800619a <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	2000092d 	.word	0x2000092d

08005da0 <__sfp_lock_release>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__sfp_lock_release+0x8>)
 8005da2:	f000 b9fb 	b.w	800619c <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	2000092d 	.word	0x2000092d

08005dac <__sinit>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4604      	mov	r4, r0
 8005db0:	f7ff fff0 	bl	8005d94 <__sfp_lock_acquire>
 8005db4:	6a23      	ldr	r3, [r4, #32]
 8005db6:	b11b      	cbz	r3, 8005dc0 <__sinit+0x14>
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f7ff bff0 	b.w	8005da0 <__sfp_lock_release>
 8005dc0:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <__sinit+0x28>)
 8005dc2:	6223      	str	r3, [r4, #32]
 8005dc4:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <__sinit+0x2c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f5      	bne.n	8005db8 <__sinit+0xc>
 8005dcc:	f7ff ffc4 	bl	8005d58 <global_stdio_init.part.0>
 8005dd0:	e7f2      	b.n	8005db8 <__sinit+0xc>
 8005dd2:	bf00      	nop
 8005dd4:	08005d19 	.word	0x08005d19
 8005dd8:	20000924 	.word	0x20000924

08005ddc <_fwalk_sglue>:
 8005ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de0:	4607      	mov	r7, r0
 8005de2:	4688      	mov	r8, r1
 8005de4:	4614      	mov	r4, r2
 8005de6:	2600      	movs	r6, #0
 8005de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dec:	f1b9 0901 	subs.w	r9, r9, #1
 8005df0:	d505      	bpl.n	8005dfe <_fwalk_sglue+0x22>
 8005df2:	6824      	ldr	r4, [r4, #0]
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	d1f7      	bne.n	8005de8 <_fwalk_sglue+0xc>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfe:	89ab      	ldrh	r3, [r5, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d907      	bls.n	8005e14 <_fwalk_sglue+0x38>
 8005e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	d003      	beq.n	8005e14 <_fwalk_sglue+0x38>
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c0      	blx	r8
 8005e12:	4306      	orrs	r6, r0
 8005e14:	3568      	adds	r5, #104	@ 0x68
 8005e16:	e7e9      	b.n	8005dec <_fwalk_sglue+0x10>

08005e18 <iprintf>:
 8005e18:	b40f      	push	{r0, r1, r2, r3}
 8005e1a:	b507      	push	{r0, r1, r2, lr}
 8005e1c:	4906      	ldr	r1, [pc, #24]	@ (8005e38 <iprintf+0x20>)
 8005e1e:	ab04      	add	r3, sp, #16
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e26:	6881      	ldr	r1, [r0, #8]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	f000 fb0f 	bl	800644c <_vfiprintf_r>
 8005e2e:	b003      	add	sp, #12
 8005e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e34:	b004      	add	sp, #16
 8005e36:	4770      	bx	lr
 8005e38:	20000020 	.word	0x20000020

08005e3c <_puts_r>:
 8005e3c:	6a03      	ldr	r3, [r0, #32]
 8005e3e:	b570      	push	{r4, r5, r6, lr}
 8005e40:	6884      	ldr	r4, [r0, #8]
 8005e42:	4605      	mov	r5, r0
 8005e44:	460e      	mov	r6, r1
 8005e46:	b90b      	cbnz	r3, 8005e4c <_puts_r+0x10>
 8005e48:	f7ff ffb0 	bl	8005dac <__sinit>
 8005e4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e4e:	07db      	lsls	r3, r3, #31
 8005e50:	d405      	bmi.n	8005e5e <_puts_r+0x22>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	0598      	lsls	r0, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_puts_r+0x22>
 8005e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e5a:	f000 f99e 	bl	800619a <__retarget_lock_acquire_recursive>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	0719      	lsls	r1, r3, #28
 8005e62:	d502      	bpl.n	8005e6a <_puts_r+0x2e>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d135      	bne.n	8005ed6 <_puts_r+0x9a>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f8c5 	bl	8005ffc <__swsetup_r>
 8005e72:	b380      	cbz	r0, 8005ed6 <_puts_r+0x9a>
 8005e74:	f04f 35ff 	mov.w	r5, #4294967295
 8005e78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e7a:	07da      	lsls	r2, r3, #31
 8005e7c:	d405      	bmi.n	8005e8a <_puts_r+0x4e>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	059b      	lsls	r3, r3, #22
 8005e82:	d402      	bmi.n	8005e8a <_puts_r+0x4e>
 8005e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e86:	f000 f989 	bl	800619c <__retarget_lock_release_recursive>
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da04      	bge.n	8005e9c <_puts_r+0x60>
 8005e92:	69a2      	ldr	r2, [r4, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	dc17      	bgt.n	8005ec8 <_puts_r+0x8c>
 8005e98:	290a      	cmp	r1, #10
 8005e9a:	d015      	beq.n	8005ec8 <_puts_r+0x8c>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	7019      	strb	r1, [r3, #0]
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d1ed      	bne.n	8005e8e <_puts_r+0x52>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da11      	bge.n	8005eda <_puts_r+0x9e>
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	210a      	movs	r1, #10
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f85f 	bl	8005f7e <__swbuf_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d0d7      	beq.n	8005e74 <_puts_r+0x38>
 8005ec4:	250a      	movs	r5, #10
 8005ec6:	e7d7      	b.n	8005e78 <_puts_r+0x3c>
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f857 	bl	8005f7e <__swbuf_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d1e7      	bne.n	8005ea4 <_puts_r+0x68>
 8005ed4:	e7ce      	b.n	8005e74 <_puts_r+0x38>
 8005ed6:	3e01      	subs	r6, #1
 8005ed8:	e7e4      	b.n	8005ea4 <_puts_r+0x68>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	6022      	str	r2, [r4, #0]
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e7ee      	b.n	8005ec4 <_puts_r+0x88>
	...

08005ee8 <puts>:
 8005ee8:	4b02      	ldr	r3, [pc, #8]	@ (8005ef4 <puts+0xc>)
 8005eea:	4601      	mov	r1, r0
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	f7ff bfa5 	b.w	8005e3c <_puts_r>
 8005ef2:	bf00      	nop
 8005ef4:	20000020 	.word	0x20000020

08005ef8 <__sread>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	460c      	mov	r4, r1
 8005efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f00:	f000 f8fc 	bl	80060fc <_read_r>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	bfab      	itete	ge
 8005f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f0c:	181b      	addge	r3, r3, r0
 8005f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f12:	bfac      	ite	ge
 8005f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f16:	81a3      	strhlt	r3, [r4, #12]
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <__swrite>:
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	461f      	mov	r7, r3
 8005f20:	898b      	ldrh	r3, [r1, #12]
 8005f22:	05db      	lsls	r3, r3, #23
 8005f24:	4605      	mov	r5, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	4616      	mov	r6, r2
 8005f2a:	d505      	bpl.n	8005f38 <__swrite+0x1e>
 8005f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f30:	2302      	movs	r3, #2
 8005f32:	2200      	movs	r2, #0
 8005f34:	f000 f8d0 	bl	80060d8 <_lseek_r>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	4632      	mov	r2, r6
 8005f46:	463b      	mov	r3, r7
 8005f48:	4628      	mov	r0, r5
 8005f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4e:	f000 b8e7 	b.w	8006120 <_write_r>

08005f52 <__sseek>:
 8005f52:	b510      	push	{r4, lr}
 8005f54:	460c      	mov	r4, r1
 8005f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f5a:	f000 f8bd 	bl	80060d8 <_lseek_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	bf15      	itete	ne
 8005f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f6e:	81a3      	strheq	r3, [r4, #12]
 8005f70:	bf18      	it	ne
 8005f72:	81a3      	strhne	r3, [r4, #12]
 8005f74:	bd10      	pop	{r4, pc}

08005f76 <__sclose>:
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 b89d 	b.w	80060b8 <_close_r>

08005f7e <__swbuf_r>:
 8005f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f80:	460e      	mov	r6, r1
 8005f82:	4614      	mov	r4, r2
 8005f84:	4605      	mov	r5, r0
 8005f86:	b118      	cbz	r0, 8005f90 <__swbuf_r+0x12>
 8005f88:	6a03      	ldr	r3, [r0, #32]
 8005f8a:	b90b      	cbnz	r3, 8005f90 <__swbuf_r+0x12>
 8005f8c:	f7ff ff0e 	bl	8005dac <__sinit>
 8005f90:	69a3      	ldr	r3, [r4, #24]
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	071a      	lsls	r2, r3, #28
 8005f98:	d501      	bpl.n	8005f9e <__swbuf_r+0x20>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	b943      	cbnz	r3, 8005fb0 <__swbuf_r+0x32>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f82b 	bl	8005ffc <__swsetup_r>
 8005fa6:	b118      	cbz	r0, 8005fb0 <__swbuf_r+0x32>
 8005fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8005fac:	4638      	mov	r0, r7
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	6922      	ldr	r2, [r4, #16]
 8005fb4:	1a98      	subs	r0, r3, r2
 8005fb6:	6963      	ldr	r3, [r4, #20]
 8005fb8:	b2f6      	uxtb	r6, r6
 8005fba:	4283      	cmp	r3, r0
 8005fbc:	4637      	mov	r7, r6
 8005fbe:	dc05      	bgt.n	8005fcc <__swbuf_r+0x4e>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 fd6c 	bl	8006aa0 <_fflush_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1ed      	bne.n	8005fa8 <__swbuf_r+0x2a>
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	60a3      	str	r3, [r4, #8]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	6022      	str	r2, [r4, #0]
 8005fd8:	701e      	strb	r6, [r3, #0]
 8005fda:	6962      	ldr	r2, [r4, #20]
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d004      	beq.n	8005fec <__swbuf_r+0x6e>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	07db      	lsls	r3, r3, #31
 8005fe6:	d5e1      	bpl.n	8005fac <__swbuf_r+0x2e>
 8005fe8:	2e0a      	cmp	r6, #10
 8005fea:	d1df      	bne.n	8005fac <__swbuf_r+0x2e>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fd56 	bl	8006aa0 <_fflush_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0d9      	beq.n	8005fac <__swbuf_r+0x2e>
 8005ff8:	e7d6      	b.n	8005fa8 <__swbuf_r+0x2a>
	...

08005ffc <__swsetup_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <__swsetup_r+0xa8>)
 8006000:	4605      	mov	r5, r0
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	460c      	mov	r4, r1
 8006006:	b118      	cbz	r0, 8006010 <__swsetup_r+0x14>
 8006008:	6a03      	ldr	r3, [r0, #32]
 800600a:	b90b      	cbnz	r3, 8006010 <__swsetup_r+0x14>
 800600c:	f7ff fece 	bl	8005dac <__sinit>
 8006010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006014:	0719      	lsls	r1, r3, #28
 8006016:	d422      	bmi.n	800605e <__swsetup_r+0x62>
 8006018:	06da      	lsls	r2, r3, #27
 800601a:	d407      	bmi.n	800602c <__swsetup_r+0x30>
 800601c:	2209      	movs	r2, #9
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	e033      	b.n	8006094 <__swsetup_r+0x98>
 800602c:	0758      	lsls	r0, r3, #29
 800602e:	d512      	bpl.n	8006056 <__swsetup_r+0x5a>
 8006030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006032:	b141      	cbz	r1, 8006046 <__swsetup_r+0x4a>
 8006034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006038:	4299      	cmp	r1, r3
 800603a:	d002      	beq.n	8006042 <__swsetup_r+0x46>
 800603c:	4628      	mov	r0, r5
 800603e:	f000 f8db 	bl	80061f8 <_free_r>
 8006042:	2300      	movs	r3, #0
 8006044:	6363      	str	r3, [r4, #52]	@ 0x34
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	2300      	movs	r3, #0
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	f043 0308 	orr.w	r3, r3, #8
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	b94b      	cbnz	r3, 8006076 <__swsetup_r+0x7a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606c:	d003      	beq.n	8006076 <__swsetup_r+0x7a>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 fd75 	bl	8006b60 <__smakebuf_r>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	f013 0201 	ands.w	r2, r3, #1
 800607e:	d00a      	beq.n	8006096 <__swsetup_r+0x9a>
 8006080:	2200      	movs	r2, #0
 8006082:	60a2      	str	r2, [r4, #8]
 8006084:	6962      	ldr	r2, [r4, #20]
 8006086:	4252      	negs	r2, r2
 8006088:	61a2      	str	r2, [r4, #24]
 800608a:	6922      	ldr	r2, [r4, #16]
 800608c:	b942      	cbnz	r2, 80060a0 <__swsetup_r+0xa4>
 800608e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006092:	d1c5      	bne.n	8006020 <__swsetup_r+0x24>
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	0799      	lsls	r1, r3, #30
 8006098:	bf58      	it	pl
 800609a:	6962      	ldrpl	r2, [r4, #20]
 800609c:	60a2      	str	r2, [r4, #8]
 800609e:	e7f4      	b.n	800608a <__swsetup_r+0x8e>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e7f7      	b.n	8006094 <__swsetup_r+0x98>
 80060a4:	20000020 	.word	0x20000020

080060a8 <memset>:
 80060a8:	4402      	add	r2, r0
 80060aa:	4603      	mov	r3, r0
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d100      	bne.n	80060b2 <memset+0xa>
 80060b0:	4770      	bx	lr
 80060b2:	f803 1b01 	strb.w	r1, [r3], #1
 80060b6:	e7f9      	b.n	80060ac <memset+0x4>

080060b8 <_close_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	@ (80060d4 <_close_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fb f95c 	bl	8001380 <_close>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_close_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_close_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000928 	.word	0x20000928

080060d8 <_lseek_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	@ (80060f8 <_lseek_r+0x20>)
 80060dc:	4604      	mov	r4, r0
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb f971 	bl	80013ce <_lseek>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_lseek_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_lseek_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000928 	.word	0x20000928

080060fc <_read_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	@ (800611c <_read_r+0x20>)
 8006100:	4604      	mov	r4, r0
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	2200      	movs	r2, #0
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	f7fb f8ff 	bl	800130e <_read>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_read_r+0x1e>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_read_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000928 	.word	0x20000928

08006120 <_write_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d07      	ldr	r5, [pc, #28]	@ (8006140 <_write_r+0x20>)
 8006124:	4604      	mov	r4, r0
 8006126:	4608      	mov	r0, r1
 8006128:	4611      	mov	r1, r2
 800612a:	2200      	movs	r2, #0
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fb f90a 	bl	8001348 <_write>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_write_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_write_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	20000928 	.word	0x20000928

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	@ (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000020 	.word	0x20000020

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	4d0d      	ldr	r5, [pc, #52]	@ (8006188 <__libc_init_array+0x38>)
 8006154:	4c0d      	ldr	r4, [pc, #52]	@ (800618c <__libc_init_array+0x3c>)
 8006156:	1b64      	subs	r4, r4, r5
 8006158:	10a4      	asrs	r4, r4, #2
 800615a:	2600      	movs	r6, #0
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	4d0b      	ldr	r5, [pc, #44]	@ (8006190 <__libc_init_array+0x40>)
 8006162:	4c0c      	ldr	r4, [pc, #48]	@ (8006194 <__libc_init_array+0x44>)
 8006164:	f000 fdb6 	bl	8006cd4 <_init>
 8006168:	1b64      	subs	r4, r4, r5
 800616a:	10a4      	asrs	r4, r4, #2
 800616c:	2600      	movs	r6, #0
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	08007140 	.word	0x08007140
 800618c:	08007140 	.word	0x08007140
 8006190:	08007140 	.word	0x08007140
 8006194:	08007144 	.word	0x08007144

08006198 <__retarget_lock_init_recursive>:
 8006198:	4770      	bx	lr

0800619a <__retarget_lock_acquire_recursive>:
 800619a:	4770      	bx	lr

0800619c <__retarget_lock_release_recursive>:
 800619c:	4770      	bx	lr

0800619e <memcpy>:
 800619e:	440a      	add	r2, r1
 80061a0:	4291      	cmp	r1, r2
 80061a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80061a6:	d100      	bne.n	80061aa <memcpy+0xc>
 80061a8:	4770      	bx	lr
 80061aa:	b510      	push	{r4, lr}
 80061ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061b4:	4291      	cmp	r1, r2
 80061b6:	d1f9      	bne.n	80061ac <memcpy+0xe>
 80061b8:	bd10      	pop	{r4, pc}
	...

080061bc <__assert_func>:
 80061bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061be:	4614      	mov	r4, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <__assert_func+0x2c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4605      	mov	r5, r0
 80061c8:	68d8      	ldr	r0, [r3, #12]
 80061ca:	b954      	cbnz	r4, 80061e2 <__assert_func+0x26>
 80061cc:	4b07      	ldr	r3, [pc, #28]	@ (80061ec <__assert_func+0x30>)
 80061ce:	461c      	mov	r4, r3
 80061d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061d4:	9100      	str	r1, [sp, #0]
 80061d6:	462b      	mov	r3, r5
 80061d8:	4905      	ldr	r1, [pc, #20]	@ (80061f0 <__assert_func+0x34>)
 80061da:	f000 fc89 	bl	8006af0 <fiprintf>
 80061de:	f000 fd2d 	bl	8006c3c <abort>
 80061e2:	4b04      	ldr	r3, [pc, #16]	@ (80061f4 <__assert_func+0x38>)
 80061e4:	e7f4      	b.n	80061d0 <__assert_func+0x14>
 80061e6:	bf00      	nop
 80061e8:	20000020 	.word	0x20000020
 80061ec:	08007102 	.word	0x08007102
 80061f0:	080070d4 	.word	0x080070d4
 80061f4:	080070c7 	.word	0x080070c7

080061f8 <_free_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4605      	mov	r5, r0
 80061fc:	2900      	cmp	r1, #0
 80061fe:	d041      	beq.n	8006284 <_free_r+0x8c>
 8006200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006204:	1f0c      	subs	r4, r1, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfb8      	it	lt
 800620a:	18e4      	addlt	r4, r4, r3
 800620c:	f000 f8e8 	bl	80063e0 <__malloc_lock>
 8006210:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <_free_r+0x90>)
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	b933      	cbnz	r3, 8006224 <_free_r+0x2c>
 8006216:	6063      	str	r3, [r4, #4]
 8006218:	6014      	str	r4, [r2, #0]
 800621a:	4628      	mov	r0, r5
 800621c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006220:	f000 b8e4 	b.w	80063ec <__malloc_unlock>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d908      	bls.n	800623a <_free_r+0x42>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	1821      	adds	r1, r4, r0
 800622c:	428b      	cmp	r3, r1
 800622e:	bf01      	itttt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	1809      	addeq	r1, r1, r0
 8006236:	6021      	streq	r1, [r4, #0]
 8006238:	e7ed      	b.n	8006216 <_free_r+0x1e>
 800623a:	461a      	mov	r2, r3
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	b10b      	cbz	r3, 8006244 <_free_r+0x4c>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d9fa      	bls.n	800623a <_free_r+0x42>
 8006244:	6811      	ldr	r1, [r2, #0]
 8006246:	1850      	adds	r0, r2, r1
 8006248:	42a0      	cmp	r0, r4
 800624a:	d10b      	bne.n	8006264 <_free_r+0x6c>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	4401      	add	r1, r0
 8006250:	1850      	adds	r0, r2, r1
 8006252:	4283      	cmp	r3, r0
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	d1e0      	bne.n	800621a <_free_r+0x22>
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	6053      	str	r3, [r2, #4]
 800625e:	4408      	add	r0, r1
 8006260:	6010      	str	r0, [r2, #0]
 8006262:	e7da      	b.n	800621a <_free_r+0x22>
 8006264:	d902      	bls.n	800626c <_free_r+0x74>
 8006266:	230c      	movs	r3, #12
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	e7d6      	b.n	800621a <_free_r+0x22>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	bf04      	itt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	bf04      	itt	eq
 800627c:	1809      	addeq	r1, r1, r0
 800627e:	6021      	streq	r1, [r4, #0]
 8006280:	6054      	str	r4, [r2, #4]
 8006282:	e7ca      	b.n	800621a <_free_r+0x22>
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	bf00      	nop
 8006288:	20000934 	.word	0x20000934

0800628c <malloc>:
 800628c:	4b02      	ldr	r3, [pc, #8]	@ (8006298 <malloc+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f000 b825 	b.w	80062e0 <_malloc_r>
 8006296:	bf00      	nop
 8006298:	20000020 	.word	0x20000020

0800629c <sbrk_aligned>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4e0f      	ldr	r6, [pc, #60]	@ (80062dc <sbrk_aligned+0x40>)
 80062a0:	460c      	mov	r4, r1
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	4605      	mov	r5, r0
 80062a6:	b911      	cbnz	r1, 80062ae <sbrk_aligned+0x12>
 80062a8:	f000 fcb8 	bl	8006c1c <_sbrk_r>
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 fcb3 	bl	8006c1c <_sbrk_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d103      	bne.n	80062c2 <sbrk_aligned+0x26>
 80062ba:	f04f 34ff 	mov.w	r4, #4294967295
 80062be:	4620      	mov	r0, r4
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	1cc4      	adds	r4, r0, #3
 80062c4:	f024 0403 	bic.w	r4, r4, #3
 80062c8:	42a0      	cmp	r0, r4
 80062ca:	d0f8      	beq.n	80062be <sbrk_aligned+0x22>
 80062cc:	1a21      	subs	r1, r4, r0
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 fca4 	bl	8006c1c <_sbrk_r>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d1f2      	bne.n	80062be <sbrk_aligned+0x22>
 80062d8:	e7ef      	b.n	80062ba <sbrk_aligned+0x1e>
 80062da:	bf00      	nop
 80062dc:	20000930 	.word	0x20000930

080062e0 <_malloc_r>:
 80062e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	1ccd      	adds	r5, r1, #3
 80062e6:	f025 0503 	bic.w	r5, r5, #3
 80062ea:	3508      	adds	r5, #8
 80062ec:	2d0c      	cmp	r5, #12
 80062ee:	bf38      	it	cc
 80062f0:	250c      	movcc	r5, #12
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	4606      	mov	r6, r0
 80062f6:	db01      	blt.n	80062fc <_malloc_r+0x1c>
 80062f8:	42a9      	cmp	r1, r5
 80062fa:	d904      	bls.n	8006306 <_malloc_r+0x26>
 80062fc:	230c      	movs	r3, #12
 80062fe:	6033      	str	r3, [r6, #0]
 8006300:	2000      	movs	r0, #0
 8006302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063dc <_malloc_r+0xfc>
 800630a:	f000 f869 	bl	80063e0 <__malloc_lock>
 800630e:	f8d8 3000 	ldr.w	r3, [r8]
 8006312:	461c      	mov	r4, r3
 8006314:	bb44      	cbnz	r4, 8006368 <_malloc_r+0x88>
 8006316:	4629      	mov	r1, r5
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff ffbf 	bl	800629c <sbrk_aligned>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	4604      	mov	r4, r0
 8006322:	d158      	bne.n	80063d6 <_malloc_r+0xf6>
 8006324:	f8d8 4000 	ldr.w	r4, [r8]
 8006328:	4627      	mov	r7, r4
 800632a:	2f00      	cmp	r7, #0
 800632c:	d143      	bne.n	80063b6 <_malloc_r+0xd6>
 800632e:	2c00      	cmp	r4, #0
 8006330:	d04b      	beq.n	80063ca <_malloc_r+0xea>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	4639      	mov	r1, r7
 8006336:	4630      	mov	r0, r6
 8006338:	eb04 0903 	add.w	r9, r4, r3
 800633c:	f000 fc6e 	bl	8006c1c <_sbrk_r>
 8006340:	4581      	cmp	r9, r0
 8006342:	d142      	bne.n	80063ca <_malloc_r+0xea>
 8006344:	6821      	ldr	r1, [r4, #0]
 8006346:	1a6d      	subs	r5, r5, r1
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff ffa6 	bl	800629c <sbrk_aligned>
 8006350:	3001      	adds	r0, #1
 8006352:	d03a      	beq.n	80063ca <_malloc_r+0xea>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	442b      	add	r3, r5
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f8d8 3000 	ldr.w	r3, [r8]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	bb62      	cbnz	r2, 80063bc <_malloc_r+0xdc>
 8006362:	f8c8 7000 	str.w	r7, [r8]
 8006366:	e00f      	b.n	8006388 <_malloc_r+0xa8>
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	1b52      	subs	r2, r2, r5
 800636c:	d420      	bmi.n	80063b0 <_malloc_r+0xd0>
 800636e:	2a0b      	cmp	r2, #11
 8006370:	d917      	bls.n	80063a2 <_malloc_r+0xc2>
 8006372:	1961      	adds	r1, r4, r5
 8006374:	42a3      	cmp	r3, r4
 8006376:	6025      	str	r5, [r4, #0]
 8006378:	bf18      	it	ne
 800637a:	6059      	strne	r1, [r3, #4]
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	bf08      	it	eq
 8006380:	f8c8 1000 	streq.w	r1, [r8]
 8006384:	5162      	str	r2, [r4, r5]
 8006386:	604b      	str	r3, [r1, #4]
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f82f 	bl	80063ec <__malloc_unlock>
 800638e:	f104 000b 	add.w	r0, r4, #11
 8006392:	1d23      	adds	r3, r4, #4
 8006394:	f020 0007 	bic.w	r0, r0, #7
 8006398:	1ac2      	subs	r2, r0, r3
 800639a:	bf1c      	itt	ne
 800639c:	1a1b      	subne	r3, r3, r0
 800639e:	50a3      	strne	r3, [r4, r2]
 80063a0:	e7af      	b.n	8006302 <_malloc_r+0x22>
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	bf0c      	ite	eq
 80063a8:	f8c8 2000 	streq.w	r2, [r8]
 80063ac:	605a      	strne	r2, [r3, #4]
 80063ae:	e7eb      	b.n	8006388 <_malloc_r+0xa8>
 80063b0:	4623      	mov	r3, r4
 80063b2:	6864      	ldr	r4, [r4, #4]
 80063b4:	e7ae      	b.n	8006314 <_malloc_r+0x34>
 80063b6:	463c      	mov	r4, r7
 80063b8:	687f      	ldr	r7, [r7, #4]
 80063ba:	e7b6      	b.n	800632a <_malloc_r+0x4a>
 80063bc:	461a      	mov	r2, r3
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d1fb      	bne.n	80063bc <_malloc_r+0xdc>
 80063c4:	2300      	movs	r3, #0
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e7de      	b.n	8006388 <_malloc_r+0xa8>
 80063ca:	230c      	movs	r3, #12
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	4630      	mov	r0, r6
 80063d0:	f000 f80c 	bl	80063ec <__malloc_unlock>
 80063d4:	e794      	b.n	8006300 <_malloc_r+0x20>
 80063d6:	6005      	str	r5, [r0, #0]
 80063d8:	e7d6      	b.n	8006388 <_malloc_r+0xa8>
 80063da:	bf00      	nop
 80063dc:	20000934 	.word	0x20000934

080063e0 <__malloc_lock>:
 80063e0:	4801      	ldr	r0, [pc, #4]	@ (80063e8 <__malloc_lock+0x8>)
 80063e2:	f7ff beda 	b.w	800619a <__retarget_lock_acquire_recursive>
 80063e6:	bf00      	nop
 80063e8:	2000092c 	.word	0x2000092c

080063ec <__malloc_unlock>:
 80063ec:	4801      	ldr	r0, [pc, #4]	@ (80063f4 <__malloc_unlock+0x8>)
 80063ee:	f7ff bed5 	b.w	800619c <__retarget_lock_release_recursive>
 80063f2:	bf00      	nop
 80063f4:	2000092c 	.word	0x2000092c

080063f8 <__sfputc_r>:
 80063f8:	6893      	ldr	r3, [r2, #8]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	b410      	push	{r4}
 8006400:	6093      	str	r3, [r2, #8]
 8006402:	da08      	bge.n	8006416 <__sfputc_r+0x1e>
 8006404:	6994      	ldr	r4, [r2, #24]
 8006406:	42a3      	cmp	r3, r4
 8006408:	db01      	blt.n	800640e <__sfputc_r+0x16>
 800640a:	290a      	cmp	r1, #10
 800640c:	d103      	bne.n	8006416 <__sfputc_r+0x1e>
 800640e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006412:	f7ff bdb4 	b.w	8005f7e <__swbuf_r>
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	1c58      	adds	r0, r3, #1
 800641a:	6010      	str	r0, [r2, #0]
 800641c:	7019      	strb	r1, [r3, #0]
 800641e:	4608      	mov	r0, r1
 8006420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006424:	4770      	bx	lr

08006426 <__sfputs_r>:
 8006426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	4614      	mov	r4, r2
 800642e:	18d5      	adds	r5, r2, r3
 8006430:	42ac      	cmp	r4, r5
 8006432:	d101      	bne.n	8006438 <__sfputs_r+0x12>
 8006434:	2000      	movs	r0, #0
 8006436:	e007      	b.n	8006448 <__sfputs_r+0x22>
 8006438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643c:	463a      	mov	r2, r7
 800643e:	4630      	mov	r0, r6
 8006440:	f7ff ffda 	bl	80063f8 <__sfputc_r>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d1f3      	bne.n	8006430 <__sfputs_r+0xa>
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800644c <_vfiprintf_r>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	460d      	mov	r5, r1
 8006452:	b09d      	sub	sp, #116	@ 0x74
 8006454:	4614      	mov	r4, r2
 8006456:	4698      	mov	r8, r3
 8006458:	4606      	mov	r6, r0
 800645a:	b118      	cbz	r0, 8006464 <_vfiprintf_r+0x18>
 800645c:	6a03      	ldr	r3, [r0, #32]
 800645e:	b90b      	cbnz	r3, 8006464 <_vfiprintf_r+0x18>
 8006460:	f7ff fca4 	bl	8005dac <__sinit>
 8006464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <_vfiprintf_r+0x2a>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <_vfiprintf_r+0x2a>
 8006470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006472:	f7ff fe92 	bl	800619a <__retarget_lock_acquire_recursive>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	d501      	bpl.n	8006480 <_vfiprintf_r+0x34>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	b99b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x5c>
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff fdba 	bl	8005ffc <__swsetup_r>
 8006488:	b170      	cbz	r0, 80064a8 <_vfiprintf_r+0x5c>
 800648a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648c:	07dc      	lsls	r4, r3, #31
 800648e:	d504      	bpl.n	800649a <_vfiprintf_r+0x4e>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	b01d      	add	sp, #116	@ 0x74
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	0598      	lsls	r0, r3, #22
 800649e:	d4f7      	bmi.n	8006490 <_vfiprintf_r+0x44>
 80064a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064a2:	f7ff fe7b 	bl	800619c <__retarget_lock_release_recursive>
 80064a6:	e7f3      	b.n	8006490 <_vfiprintf_r+0x44>
 80064a8:	2300      	movs	r3, #0
 80064aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ac:	2320      	movs	r3, #32
 80064ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b6:	2330      	movs	r3, #48	@ 0x30
 80064b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006668 <_vfiprintf_r+0x21c>
 80064bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064c0:	f04f 0901 	mov.w	r9, #1
 80064c4:	4623      	mov	r3, r4
 80064c6:	469a      	mov	sl, r3
 80064c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064cc:	b10a      	cbz	r2, 80064d2 <_vfiprintf_r+0x86>
 80064ce:	2a25      	cmp	r2, #37	@ 0x25
 80064d0:	d1f9      	bne.n	80064c6 <_vfiprintf_r+0x7a>
 80064d2:	ebba 0b04 	subs.w	fp, sl, r4
 80064d6:	d00b      	beq.n	80064f0 <_vfiprintf_r+0xa4>
 80064d8:	465b      	mov	r3, fp
 80064da:	4622      	mov	r2, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffa1 	bl	8006426 <__sfputs_r>
 80064e4:	3001      	adds	r0, #1
 80064e6:	f000 80a7 	beq.w	8006638 <_vfiprintf_r+0x1ec>
 80064ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ec:	445a      	add	r2, fp
 80064ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80064f0:	f89a 3000 	ldrb.w	r3, [sl]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 809f 	beq.w	8006638 <_vfiprintf_r+0x1ec>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006504:	f10a 0a01 	add.w	sl, sl, #1
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	9307      	str	r3, [sp, #28]
 800650c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006510:	931a      	str	r3, [sp, #104]	@ 0x68
 8006512:	4654      	mov	r4, sl
 8006514:	2205      	movs	r2, #5
 8006516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651a:	4853      	ldr	r0, [pc, #332]	@ (8006668 <_vfiprintf_r+0x21c>)
 800651c:	f7f9 fe68 	bl	80001f0 <memchr>
 8006520:	9a04      	ldr	r2, [sp, #16]
 8006522:	b9d8      	cbnz	r0, 800655c <_vfiprintf_r+0x110>
 8006524:	06d1      	lsls	r1, r2, #27
 8006526:	bf44      	itt	mi
 8006528:	2320      	movmi	r3, #32
 800652a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800652e:	0713      	lsls	r3, r2, #28
 8006530:	bf44      	itt	mi
 8006532:	232b      	movmi	r3, #43	@ 0x2b
 8006534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006538:	f89a 3000 	ldrb.w	r3, [sl]
 800653c:	2b2a      	cmp	r3, #42	@ 0x2a
 800653e:	d015      	beq.n	800656c <_vfiprintf_r+0x120>
 8006540:	9a07      	ldr	r2, [sp, #28]
 8006542:	4654      	mov	r4, sl
 8006544:	2000      	movs	r0, #0
 8006546:	f04f 0c0a 	mov.w	ip, #10
 800654a:	4621      	mov	r1, r4
 800654c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006550:	3b30      	subs	r3, #48	@ 0x30
 8006552:	2b09      	cmp	r3, #9
 8006554:	d94b      	bls.n	80065ee <_vfiprintf_r+0x1a2>
 8006556:	b1b0      	cbz	r0, 8006586 <_vfiprintf_r+0x13a>
 8006558:	9207      	str	r2, [sp, #28]
 800655a:	e014      	b.n	8006586 <_vfiprintf_r+0x13a>
 800655c:	eba0 0308 	sub.w	r3, r0, r8
 8006560:	fa09 f303 	lsl.w	r3, r9, r3
 8006564:	4313      	orrs	r3, r2
 8006566:	9304      	str	r3, [sp, #16]
 8006568:	46a2      	mov	sl, r4
 800656a:	e7d2      	b.n	8006512 <_vfiprintf_r+0xc6>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1d19      	adds	r1, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9103      	str	r1, [sp, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfbb      	ittet	lt
 8006578:	425b      	neglt	r3, r3
 800657a:	f042 0202 	orrlt.w	r2, r2, #2
 800657e:	9307      	strge	r3, [sp, #28]
 8006580:	9307      	strlt	r3, [sp, #28]
 8006582:	bfb8      	it	lt
 8006584:	9204      	strlt	r2, [sp, #16]
 8006586:	7823      	ldrb	r3, [r4, #0]
 8006588:	2b2e      	cmp	r3, #46	@ 0x2e
 800658a:	d10a      	bne.n	80065a2 <_vfiprintf_r+0x156>
 800658c:	7863      	ldrb	r3, [r4, #1]
 800658e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006590:	d132      	bne.n	80065f8 <_vfiprintf_r+0x1ac>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	9203      	str	r2, [sp, #12]
 800659a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800659e:	3402      	adds	r4, #2
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006678 <_vfiprintf_r+0x22c>
 80065a6:	7821      	ldrb	r1, [r4, #0]
 80065a8:	2203      	movs	r2, #3
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe20 	bl	80001f0 <memchr>
 80065b0:	b138      	cbz	r0, 80065c2 <_vfiprintf_r+0x176>
 80065b2:	9b04      	ldr	r3, [sp, #16]
 80065b4:	eba0 000a 	sub.w	r0, r0, sl
 80065b8:	2240      	movs	r2, #64	@ 0x40
 80065ba:	4082      	lsls	r2, r0
 80065bc:	4313      	orrs	r3, r2
 80065be:	3401      	adds	r4, #1
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c6:	4829      	ldr	r0, [pc, #164]	@ (800666c <_vfiprintf_r+0x220>)
 80065c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065cc:	2206      	movs	r2, #6
 80065ce:	f7f9 fe0f 	bl	80001f0 <memchr>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d03f      	beq.n	8006656 <_vfiprintf_r+0x20a>
 80065d6:	4b26      	ldr	r3, [pc, #152]	@ (8006670 <_vfiprintf_r+0x224>)
 80065d8:	bb1b      	cbnz	r3, 8006622 <_vfiprintf_r+0x1d6>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	3307      	adds	r3, #7
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	3308      	adds	r3, #8
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	443b      	add	r3, r7
 80065ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ec:	e76a      	b.n	80064c4 <_vfiprintf_r+0x78>
 80065ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f2:	460c      	mov	r4, r1
 80065f4:	2001      	movs	r0, #1
 80065f6:	e7a8      	b.n	800654a <_vfiprintf_r+0xfe>
 80065f8:	2300      	movs	r3, #0
 80065fa:	3401      	adds	r4, #1
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	4619      	mov	r1, r3
 8006600:	f04f 0c0a 	mov.w	ip, #10
 8006604:	4620      	mov	r0, r4
 8006606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660a:	3a30      	subs	r2, #48	@ 0x30
 800660c:	2a09      	cmp	r2, #9
 800660e:	d903      	bls.n	8006618 <_vfiprintf_r+0x1cc>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0c6      	beq.n	80065a2 <_vfiprintf_r+0x156>
 8006614:	9105      	str	r1, [sp, #20]
 8006616:	e7c4      	b.n	80065a2 <_vfiprintf_r+0x156>
 8006618:	fb0c 2101 	mla	r1, ip, r1, r2
 800661c:	4604      	mov	r4, r0
 800661e:	2301      	movs	r3, #1
 8006620:	e7f0      	b.n	8006604 <_vfiprintf_r+0x1b8>
 8006622:	ab03      	add	r3, sp, #12
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	462a      	mov	r2, r5
 8006628:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <_vfiprintf_r+0x228>)
 800662a:	a904      	add	r1, sp, #16
 800662c:	4630      	mov	r0, r6
 800662e:	f3af 8000 	nop.w
 8006632:	4607      	mov	r7, r0
 8006634:	1c78      	adds	r0, r7, #1
 8006636:	d1d6      	bne.n	80065e6 <_vfiprintf_r+0x19a>
 8006638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d405      	bmi.n	800664a <_vfiprintf_r+0x1fe>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d402      	bmi.n	800664a <_vfiprintf_r+0x1fe>
 8006644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006646:	f7ff fda9 	bl	800619c <__retarget_lock_release_recursive>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	065b      	lsls	r3, r3, #25
 800664e:	f53f af1f 	bmi.w	8006490 <_vfiprintf_r+0x44>
 8006652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006654:	e71e      	b.n	8006494 <_vfiprintf_r+0x48>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <_vfiprintf_r+0x228>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4630      	mov	r0, r6
 8006662:	f000 f879 	bl	8006758 <_printf_i>
 8006666:	e7e4      	b.n	8006632 <_vfiprintf_r+0x1e6>
 8006668:	08007103 	.word	0x08007103
 800666c:	0800710d 	.word	0x0800710d
 8006670:	00000000 	.word	0x00000000
 8006674:	08006427 	.word	0x08006427
 8006678:	08007109 	.word	0x08007109

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4616      	mov	r6, r2
 8006682:	4698      	mov	r8, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800668c:	4293      	cmp	r3, r2
 800668e:	bfb8      	it	lt
 8006690:	4613      	movlt	r3, r2
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006698:	4607      	mov	r7, r0
 800669a:	460c      	mov	r4, r1
 800669c:	b10a      	cbz	r2, 80066a2 <_printf_common+0x26>
 800669e:	3301      	adds	r3, #1
 80066a0:	6033      	str	r3, [r6, #0]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	0699      	lsls	r1, r3, #26
 80066a6:	bf42      	ittt	mi
 80066a8:	6833      	ldrmi	r3, [r6, #0]
 80066aa:	3302      	addmi	r3, #2
 80066ac:	6033      	strmi	r3, [r6, #0]
 80066ae:	6825      	ldr	r5, [r4, #0]
 80066b0:	f015 0506 	ands.w	r5, r5, #6
 80066b4:	d106      	bne.n	80066c4 <_printf_common+0x48>
 80066b6:	f104 0a19 	add.w	sl, r4, #25
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dc26      	bgt.n	8006712 <_printf_common+0x96>
 80066c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	3b00      	subs	r3, #0
 80066cc:	bf18      	it	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	0692      	lsls	r2, r2, #26
 80066d2:	d42b      	bmi.n	800672c <_printf_common+0xb0>
 80066d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066d8:	4641      	mov	r1, r8
 80066da:	4638      	mov	r0, r7
 80066dc:	47c8      	blx	r9
 80066de:	3001      	adds	r0, #1
 80066e0:	d01e      	beq.n	8006720 <_printf_common+0xa4>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	f003 0306 	and.w	r3, r3, #6
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	bf02      	ittt	eq
 80066ee:	68e5      	ldreq	r5, [r4, #12]
 80066f0:	6833      	ldreq	r3, [r6, #0]
 80066f2:	1aed      	subeq	r5, r5, r3
 80066f4:	68a3      	ldr	r3, [r4, #8]
 80066f6:	bf0c      	ite	eq
 80066f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066fc:	2500      	movne	r5, #0
 80066fe:	4293      	cmp	r3, r2
 8006700:	bfc4      	itt	gt
 8006702:	1a9b      	subgt	r3, r3, r2
 8006704:	18ed      	addgt	r5, r5, r3
 8006706:	2600      	movs	r6, #0
 8006708:	341a      	adds	r4, #26
 800670a:	42b5      	cmp	r5, r6
 800670c:	d11a      	bne.n	8006744 <_printf_common+0xc8>
 800670e:	2000      	movs	r0, #0
 8006710:	e008      	b.n	8006724 <_printf_common+0xa8>
 8006712:	2301      	movs	r3, #1
 8006714:	4652      	mov	r2, sl
 8006716:	4641      	mov	r1, r8
 8006718:	4638      	mov	r0, r7
 800671a:	47c8      	blx	r9
 800671c:	3001      	adds	r0, #1
 800671e:	d103      	bne.n	8006728 <_printf_common+0xac>
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	3501      	adds	r5, #1
 800672a:	e7c6      	b.n	80066ba <_printf_common+0x3e>
 800672c:	18e1      	adds	r1, r4, r3
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	2030      	movs	r0, #48	@ 0x30
 8006732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006736:	4422      	add	r2, r4
 8006738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800673c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006740:	3302      	adds	r3, #2
 8006742:	e7c7      	b.n	80066d4 <_printf_common+0x58>
 8006744:	2301      	movs	r3, #1
 8006746:	4622      	mov	r2, r4
 8006748:	4641      	mov	r1, r8
 800674a:	4638      	mov	r0, r7
 800674c:	47c8      	blx	r9
 800674e:	3001      	adds	r0, #1
 8006750:	d0e6      	beq.n	8006720 <_printf_common+0xa4>
 8006752:	3601      	adds	r6, #1
 8006754:	e7d9      	b.n	800670a <_printf_common+0x8e>
	...

08006758 <_printf_i>:
 8006758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	7e0f      	ldrb	r7, [r1, #24]
 800675e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006760:	2f78      	cmp	r7, #120	@ 0x78
 8006762:	4691      	mov	r9, r2
 8006764:	4680      	mov	r8, r0
 8006766:	460c      	mov	r4, r1
 8006768:	469a      	mov	sl, r3
 800676a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800676e:	d807      	bhi.n	8006780 <_printf_i+0x28>
 8006770:	2f62      	cmp	r7, #98	@ 0x62
 8006772:	d80a      	bhi.n	800678a <_printf_i+0x32>
 8006774:	2f00      	cmp	r7, #0
 8006776:	f000 80d2 	beq.w	800691e <_printf_i+0x1c6>
 800677a:	2f58      	cmp	r7, #88	@ 0x58
 800677c:	f000 80b9 	beq.w	80068f2 <_printf_i+0x19a>
 8006780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006788:	e03a      	b.n	8006800 <_printf_i+0xa8>
 800678a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800678e:	2b15      	cmp	r3, #21
 8006790:	d8f6      	bhi.n	8006780 <_printf_i+0x28>
 8006792:	a101      	add	r1, pc, #4	@ (adr r1, 8006798 <_printf_i+0x40>)
 8006794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006798:	080067f1 	.word	0x080067f1
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006781 	.word	0x08006781
 80067a4:	08006781 	.word	0x08006781
 80067a8:	08006781 	.word	0x08006781
 80067ac:	08006781 	.word	0x08006781
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006781 	.word	0x08006781
 80067b8:	08006781 	.word	0x08006781
 80067bc:	08006781 	.word	0x08006781
 80067c0:	08006781 	.word	0x08006781
 80067c4:	08006905 	.word	0x08006905
 80067c8:	0800682f 	.word	0x0800682f
 80067cc:	080068bf 	.word	0x080068bf
 80067d0:	08006781 	.word	0x08006781
 80067d4:	08006781 	.word	0x08006781
 80067d8:	08006927 	.word	0x08006927
 80067dc:	08006781 	.word	0x08006781
 80067e0:	0800682f 	.word	0x0800682f
 80067e4:	08006781 	.word	0x08006781
 80067e8:	08006781 	.word	0x08006781
 80067ec:	080068c7 	.word	0x080068c7
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6032      	str	r2, [r6, #0]
 80067f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e09d      	b.n	8006940 <_printf_i+0x1e8>
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	6820      	ldr	r0, [r4, #0]
 8006808:	1d19      	adds	r1, r3, #4
 800680a:	6031      	str	r1, [r6, #0]
 800680c:	0606      	lsls	r6, r0, #24
 800680e:	d501      	bpl.n	8006814 <_printf_i+0xbc>
 8006810:	681d      	ldr	r5, [r3, #0]
 8006812:	e003      	b.n	800681c <_printf_i+0xc4>
 8006814:	0645      	lsls	r5, r0, #25
 8006816:	d5fb      	bpl.n	8006810 <_printf_i+0xb8>
 8006818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800681c:	2d00      	cmp	r5, #0
 800681e:	da03      	bge.n	8006828 <_printf_i+0xd0>
 8006820:	232d      	movs	r3, #45	@ 0x2d
 8006822:	426d      	negs	r5, r5
 8006824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006828:	4859      	ldr	r0, [pc, #356]	@ (8006990 <_printf_i+0x238>)
 800682a:	230a      	movs	r3, #10
 800682c:	e011      	b.n	8006852 <_printf_i+0xfa>
 800682e:	6821      	ldr	r1, [r4, #0]
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	0608      	lsls	r0, r1, #24
 8006834:	f853 5b04 	ldr.w	r5, [r3], #4
 8006838:	d402      	bmi.n	8006840 <_printf_i+0xe8>
 800683a:	0649      	lsls	r1, r1, #25
 800683c:	bf48      	it	mi
 800683e:	b2ad      	uxthmi	r5, r5
 8006840:	2f6f      	cmp	r7, #111	@ 0x6f
 8006842:	4853      	ldr	r0, [pc, #332]	@ (8006990 <_printf_i+0x238>)
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	bf14      	ite	ne
 8006848:	230a      	movne	r3, #10
 800684a:	2308      	moveq	r3, #8
 800684c:	2100      	movs	r1, #0
 800684e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006852:	6866      	ldr	r6, [r4, #4]
 8006854:	60a6      	str	r6, [r4, #8]
 8006856:	2e00      	cmp	r6, #0
 8006858:	bfa2      	ittt	ge
 800685a:	6821      	ldrge	r1, [r4, #0]
 800685c:	f021 0104 	bicge.w	r1, r1, #4
 8006860:	6021      	strge	r1, [r4, #0]
 8006862:	b90d      	cbnz	r5, 8006868 <_printf_i+0x110>
 8006864:	2e00      	cmp	r6, #0
 8006866:	d04b      	beq.n	8006900 <_printf_i+0x1a8>
 8006868:	4616      	mov	r6, r2
 800686a:	fbb5 f1f3 	udiv	r1, r5, r3
 800686e:	fb03 5711 	mls	r7, r3, r1, r5
 8006872:	5dc7      	ldrb	r7, [r0, r7]
 8006874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006878:	462f      	mov	r7, r5
 800687a:	42bb      	cmp	r3, r7
 800687c:	460d      	mov	r5, r1
 800687e:	d9f4      	bls.n	800686a <_printf_i+0x112>
 8006880:	2b08      	cmp	r3, #8
 8006882:	d10b      	bne.n	800689c <_printf_i+0x144>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07df      	lsls	r7, r3, #31
 8006888:	d508      	bpl.n	800689c <_printf_i+0x144>
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	6861      	ldr	r1, [r4, #4]
 800688e:	4299      	cmp	r1, r3
 8006890:	bfde      	ittt	le
 8006892:	2330      	movle	r3, #48	@ 0x30
 8006894:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800689c:	1b92      	subs	r2, r2, r6
 800689e:	6122      	str	r2, [r4, #16]
 80068a0:	f8cd a000 	str.w	sl, [sp]
 80068a4:	464b      	mov	r3, r9
 80068a6:	aa03      	add	r2, sp, #12
 80068a8:	4621      	mov	r1, r4
 80068aa:	4640      	mov	r0, r8
 80068ac:	f7ff fee6 	bl	800667c <_printf_common>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d14a      	bne.n	800694a <_printf_i+0x1f2>
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	b004      	add	sp, #16
 80068ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f043 0320 	orr.w	r3, r3, #32
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	4833      	ldr	r0, [pc, #204]	@ (8006994 <_printf_i+0x23c>)
 80068c8:	2778      	movs	r7, #120	@ 0x78
 80068ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	6831      	ldr	r1, [r6, #0]
 80068d2:	061f      	lsls	r7, r3, #24
 80068d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80068d8:	d402      	bmi.n	80068e0 <_printf_i+0x188>
 80068da:	065f      	lsls	r7, r3, #25
 80068dc:	bf48      	it	mi
 80068de:	b2ad      	uxthmi	r5, r5
 80068e0:	6031      	str	r1, [r6, #0]
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	bf44      	itt	mi
 80068e6:	f043 0320 	orrmi.w	r3, r3, #32
 80068ea:	6023      	strmi	r3, [r4, #0]
 80068ec:	b11d      	cbz	r5, 80068f6 <_printf_i+0x19e>
 80068ee:	2310      	movs	r3, #16
 80068f0:	e7ac      	b.n	800684c <_printf_i+0xf4>
 80068f2:	4827      	ldr	r0, [pc, #156]	@ (8006990 <_printf_i+0x238>)
 80068f4:	e7e9      	b.n	80068ca <_printf_i+0x172>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f023 0320 	bic.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	e7f6      	b.n	80068ee <_printf_i+0x196>
 8006900:	4616      	mov	r6, r2
 8006902:	e7bd      	b.n	8006880 <_printf_i+0x128>
 8006904:	6833      	ldr	r3, [r6, #0]
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	6961      	ldr	r1, [r4, #20]
 800690a:	1d18      	adds	r0, r3, #4
 800690c:	6030      	str	r0, [r6, #0]
 800690e:	062e      	lsls	r6, r5, #24
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	d501      	bpl.n	8006918 <_printf_i+0x1c0>
 8006914:	6019      	str	r1, [r3, #0]
 8006916:	e002      	b.n	800691e <_printf_i+0x1c6>
 8006918:	0668      	lsls	r0, r5, #25
 800691a:	d5fb      	bpl.n	8006914 <_printf_i+0x1bc>
 800691c:	8019      	strh	r1, [r3, #0]
 800691e:	2300      	movs	r3, #0
 8006920:	6123      	str	r3, [r4, #16]
 8006922:	4616      	mov	r6, r2
 8006924:	e7bc      	b.n	80068a0 <_printf_i+0x148>
 8006926:	6833      	ldr	r3, [r6, #0]
 8006928:	1d1a      	adds	r2, r3, #4
 800692a:	6032      	str	r2, [r6, #0]
 800692c:	681e      	ldr	r6, [r3, #0]
 800692e:	6862      	ldr	r2, [r4, #4]
 8006930:	2100      	movs	r1, #0
 8006932:	4630      	mov	r0, r6
 8006934:	f7f9 fc5c 	bl	80001f0 <memchr>
 8006938:	b108      	cbz	r0, 800693e <_printf_i+0x1e6>
 800693a:	1b80      	subs	r0, r0, r6
 800693c:	6060      	str	r0, [r4, #4]
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	2300      	movs	r3, #0
 8006944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006948:	e7aa      	b.n	80068a0 <_printf_i+0x148>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	4632      	mov	r2, r6
 800694e:	4649      	mov	r1, r9
 8006950:	4640      	mov	r0, r8
 8006952:	47d0      	blx	sl
 8006954:	3001      	adds	r0, #1
 8006956:	d0ad      	beq.n	80068b4 <_printf_i+0x15c>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	079b      	lsls	r3, r3, #30
 800695c:	d413      	bmi.n	8006986 <_printf_i+0x22e>
 800695e:	68e0      	ldr	r0, [r4, #12]
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	4298      	cmp	r0, r3
 8006964:	bfb8      	it	lt
 8006966:	4618      	movlt	r0, r3
 8006968:	e7a6      	b.n	80068b8 <_printf_i+0x160>
 800696a:	2301      	movs	r3, #1
 800696c:	4632      	mov	r2, r6
 800696e:	4649      	mov	r1, r9
 8006970:	4640      	mov	r0, r8
 8006972:	47d0      	blx	sl
 8006974:	3001      	adds	r0, #1
 8006976:	d09d      	beq.n	80068b4 <_printf_i+0x15c>
 8006978:	3501      	adds	r5, #1
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	9903      	ldr	r1, [sp, #12]
 800697e:	1a5b      	subs	r3, r3, r1
 8006980:	42ab      	cmp	r3, r5
 8006982:	dcf2      	bgt.n	800696a <_printf_i+0x212>
 8006984:	e7eb      	b.n	800695e <_printf_i+0x206>
 8006986:	2500      	movs	r5, #0
 8006988:	f104 0619 	add.w	r6, r4, #25
 800698c:	e7f5      	b.n	800697a <_printf_i+0x222>
 800698e:	bf00      	nop
 8006990:	08007114 	.word	0x08007114
 8006994:	08007125 	.word	0x08007125

08006998 <__sflush_r>:
 8006998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	0716      	lsls	r6, r2, #28
 80069a2:	4605      	mov	r5, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	d454      	bmi.n	8006a52 <__sflush_r+0xba>
 80069a8:	684b      	ldr	r3, [r1, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dc02      	bgt.n	80069b4 <__sflush_r+0x1c>
 80069ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dd48      	ble.n	8006a46 <__sflush_r+0xae>
 80069b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d045      	beq.n	8006a46 <__sflush_r+0xae>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069c0:	682f      	ldr	r7, [r5, #0]
 80069c2:	6a21      	ldr	r1, [r4, #32]
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	d030      	beq.n	8006a2a <__sflush_r+0x92>
 80069c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	0759      	lsls	r1, r3, #29
 80069ce:	d505      	bpl.n	80069dc <__sflush_r+0x44>
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069d6:	b10b      	cbz	r3, 80069dc <__sflush_r+0x44>
 80069d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e0:	6a21      	ldr	r1, [r4, #32]
 80069e2:	4628      	mov	r0, r5
 80069e4:	47b0      	blx	r6
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	d106      	bne.n	80069fa <__sflush_r+0x62>
 80069ec:	6829      	ldr	r1, [r5, #0]
 80069ee:	291d      	cmp	r1, #29
 80069f0:	d82b      	bhi.n	8006a4a <__sflush_r+0xb2>
 80069f2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a9c <__sflush_r+0x104>)
 80069f4:	410a      	asrs	r2, r1
 80069f6:	07d6      	lsls	r6, r2, #31
 80069f8:	d427      	bmi.n	8006a4a <__sflush_r+0xb2>
 80069fa:	2200      	movs	r2, #0
 80069fc:	6062      	str	r2, [r4, #4]
 80069fe:	04d9      	lsls	r1, r3, #19
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	d504      	bpl.n	8006a10 <__sflush_r+0x78>
 8006a06:	1c42      	adds	r2, r0, #1
 8006a08:	d101      	bne.n	8006a0e <__sflush_r+0x76>
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	b903      	cbnz	r3, 8006a10 <__sflush_r+0x78>
 8006a0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a12:	602f      	str	r7, [r5, #0]
 8006a14:	b1b9      	cbz	r1, 8006a46 <__sflush_r+0xae>
 8006a16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d002      	beq.n	8006a24 <__sflush_r+0x8c>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7ff fbea 	bl	80061f8 <_free_r>
 8006a24:	2300      	movs	r3, #0
 8006a26:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a28:	e00d      	b.n	8006a46 <__sflush_r+0xae>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b0      	blx	r6
 8006a30:	4602      	mov	r2, r0
 8006a32:	1c50      	adds	r0, r2, #1
 8006a34:	d1c9      	bne.n	80069ca <__sflush_r+0x32>
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0c6      	beq.n	80069ca <__sflush_r+0x32>
 8006a3c:	2b1d      	cmp	r3, #29
 8006a3e:	d001      	beq.n	8006a44 <__sflush_r+0xac>
 8006a40:	2b16      	cmp	r3, #22
 8006a42:	d11e      	bne.n	8006a82 <__sflush_r+0xea>
 8006a44:	602f      	str	r7, [r5, #0]
 8006a46:	2000      	movs	r0, #0
 8006a48:	e022      	b.n	8006a90 <__sflush_r+0xf8>
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	e01b      	b.n	8006a8a <__sflush_r+0xf2>
 8006a52:	690f      	ldr	r7, [r1, #16]
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	d0f6      	beq.n	8006a46 <__sflush_r+0xae>
 8006a58:	0793      	lsls	r3, r2, #30
 8006a5a:	680e      	ldr	r6, [r1, #0]
 8006a5c:	bf08      	it	eq
 8006a5e:	694b      	ldreq	r3, [r1, #20]
 8006a60:	600f      	str	r7, [r1, #0]
 8006a62:	bf18      	it	ne
 8006a64:	2300      	movne	r3, #0
 8006a66:	eba6 0807 	sub.w	r8, r6, r7
 8006a6a:	608b      	str	r3, [r1, #8]
 8006a6c:	f1b8 0f00 	cmp.w	r8, #0
 8006a70:	dde9      	ble.n	8006a46 <__sflush_r+0xae>
 8006a72:	6a21      	ldr	r1, [r4, #32]
 8006a74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a76:	4643      	mov	r3, r8
 8006a78:	463a      	mov	r2, r7
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b0      	blx	r6
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	dc08      	bgt.n	8006a94 <__sflush_r+0xfc>
 8006a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	4407      	add	r7, r0
 8006a96:	eba8 0800 	sub.w	r8, r8, r0
 8006a9a:	e7e7      	b.n	8006a6c <__sflush_r+0xd4>
 8006a9c:	dfbffffe 	.word	0xdfbffffe

08006aa0 <_fflush_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	690b      	ldr	r3, [r1, #16]
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	b913      	cbnz	r3, 8006ab0 <_fflush_r+0x10>
 8006aaa:	2500      	movs	r5, #0
 8006aac:	4628      	mov	r0, r5
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	b118      	cbz	r0, 8006aba <_fflush_r+0x1a>
 8006ab2:	6a03      	ldr	r3, [r0, #32]
 8006ab4:	b90b      	cbnz	r3, 8006aba <_fflush_r+0x1a>
 8006ab6:	f7ff f979 	bl	8005dac <__sinit>
 8006aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f3      	beq.n	8006aaa <_fflush_r+0xa>
 8006ac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ac4:	07d0      	lsls	r0, r2, #31
 8006ac6:	d404      	bmi.n	8006ad2 <_fflush_r+0x32>
 8006ac8:	0599      	lsls	r1, r3, #22
 8006aca:	d402      	bmi.n	8006ad2 <_fflush_r+0x32>
 8006acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ace:	f7ff fb64 	bl	800619a <__retarget_lock_acquire_recursive>
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	f7ff ff5f 	bl	8006998 <__sflush_r>
 8006ada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006adc:	07da      	lsls	r2, r3, #31
 8006ade:	4605      	mov	r5, r0
 8006ae0:	d4e4      	bmi.n	8006aac <_fflush_r+0xc>
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	059b      	lsls	r3, r3, #22
 8006ae6:	d4e1      	bmi.n	8006aac <_fflush_r+0xc>
 8006ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aea:	f7ff fb57 	bl	800619c <__retarget_lock_release_recursive>
 8006aee:	e7dd      	b.n	8006aac <_fflush_r+0xc>

08006af0 <fiprintf>:
 8006af0:	b40e      	push	{r1, r2, r3}
 8006af2:	b503      	push	{r0, r1, lr}
 8006af4:	4601      	mov	r1, r0
 8006af6:	ab03      	add	r3, sp, #12
 8006af8:	4805      	ldr	r0, [pc, #20]	@ (8006b10 <fiprintf+0x20>)
 8006afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	f7ff fca3 	bl	800644c <_vfiprintf_r>
 8006b06:	b002      	add	sp, #8
 8006b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b0c:	b003      	add	sp, #12
 8006b0e:	4770      	bx	lr
 8006b10:	20000020 	.word	0x20000020

08006b14 <__swhatbuf_r>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	b096      	sub	sp, #88	@ 0x58
 8006b20:	4615      	mov	r5, r2
 8006b22:	461e      	mov	r6, r3
 8006b24:	da0d      	bge.n	8006b42 <__swhatbuf_r+0x2e>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b2c:	f04f 0100 	mov.w	r1, #0
 8006b30:	bf14      	ite	ne
 8006b32:	2340      	movne	r3, #64	@ 0x40
 8006b34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b38:	2000      	movs	r0, #0
 8006b3a:	6031      	str	r1, [r6, #0]
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	b016      	add	sp, #88	@ 0x58
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
 8006b42:	466a      	mov	r2, sp
 8006b44:	f000 f848 	bl	8006bd8 <_fstat_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dbec      	blt.n	8006b26 <__swhatbuf_r+0x12>
 8006b4c:	9901      	ldr	r1, [sp, #4]
 8006b4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b56:	4259      	negs	r1, r3
 8006b58:	4159      	adcs	r1, r3
 8006b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b5e:	e7eb      	b.n	8006b38 <__swhatbuf_r+0x24>

08006b60 <__smakebuf_r>:
 8006b60:	898b      	ldrh	r3, [r1, #12]
 8006b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b64:	079d      	lsls	r5, r3, #30
 8006b66:	4606      	mov	r6, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	d507      	bpl.n	8006b7c <__smakebuf_r+0x1c>
 8006b6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	2301      	movs	r3, #1
 8006b76:	6163      	str	r3, [r4, #20]
 8006b78:	b003      	add	sp, #12
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	ab01      	add	r3, sp, #4
 8006b7e:	466a      	mov	r2, sp
 8006b80:	f7ff ffc8 	bl	8006b14 <__swhatbuf_r>
 8006b84:	9f00      	ldr	r7, [sp, #0]
 8006b86:	4605      	mov	r5, r0
 8006b88:	4639      	mov	r1, r7
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff fba8 	bl	80062e0 <_malloc_r>
 8006b90:	b948      	cbnz	r0, 8006ba6 <__smakebuf_r+0x46>
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	059a      	lsls	r2, r3, #22
 8006b98:	d4ee      	bmi.n	8006b78 <__smakebuf_r+0x18>
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	f043 0302 	orr.w	r3, r3, #2
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	e7e2      	b.n	8006b6c <__smakebuf_r+0xc>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	6020      	str	r0, [r4, #0]
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bb6:	b15b      	cbz	r3, 8006bd0 <__smakebuf_r+0x70>
 8006bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 f81d 	bl	8006bfc <_isatty_r>
 8006bc2:	b128      	cbz	r0, 8006bd0 <__smakebuf_r+0x70>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	431d      	orrs	r5, r3
 8006bd4:	81a5      	strh	r5, [r4, #12]
 8006bd6:	e7cf      	b.n	8006b78 <__smakebuf_r+0x18>

08006bd8 <_fstat_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d07      	ldr	r5, [pc, #28]	@ (8006bf8 <_fstat_r+0x20>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	f7fa fbd7 	bl	8001398 <_fstat>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d102      	bne.n	8006bf4 <_fstat_r+0x1c>
 8006bee:	682b      	ldr	r3, [r5, #0]
 8006bf0:	b103      	cbz	r3, 8006bf4 <_fstat_r+0x1c>
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000928 	.word	0x20000928

08006bfc <_isatty_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d06      	ldr	r5, [pc, #24]	@ (8006c18 <_isatty_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fa fbd6 	bl	80013b8 <_isatty>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_isatty_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_isatty_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000928 	.word	0x20000928

08006c1c <_sbrk_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	@ (8006c38 <_sbrk_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fa fbde 	bl	80013e8 <_sbrk>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_sbrk_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_sbrk_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20000928 	.word	0x20000928

08006c3c <abort>:
 8006c3c:	b508      	push	{r3, lr}
 8006c3e:	2006      	movs	r0, #6
 8006c40:	f000 f82c 	bl	8006c9c <raise>
 8006c44:	2001      	movs	r0, #1
 8006c46:	f7fa fb57 	bl	80012f8 <_exit>

08006c4a <_raise_r>:
 8006c4a:	291f      	cmp	r1, #31
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4605      	mov	r5, r0
 8006c50:	460c      	mov	r4, r1
 8006c52:	d904      	bls.n	8006c5e <_raise_r+0x14>
 8006c54:	2316      	movs	r3, #22
 8006c56:	6003      	str	r3, [r0, #0]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	bd38      	pop	{r3, r4, r5, pc}
 8006c5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c60:	b112      	cbz	r2, 8006c68 <_raise_r+0x1e>
 8006c62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c66:	b94b      	cbnz	r3, 8006c7c <_raise_r+0x32>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f000 f831 	bl	8006cd0 <_getpid_r>
 8006c6e:	4622      	mov	r2, r4
 8006c70:	4601      	mov	r1, r0
 8006c72:	4628      	mov	r0, r5
 8006c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c78:	f000 b818 	b.w	8006cac <_kill_r>
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d00a      	beq.n	8006c96 <_raise_r+0x4c>
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	d103      	bne.n	8006c8c <_raise_r+0x42>
 8006c84:	2316      	movs	r3, #22
 8006c86:	6003      	str	r3, [r0, #0]
 8006c88:	2001      	movs	r0, #1
 8006c8a:	e7e7      	b.n	8006c5c <_raise_r+0x12>
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c92:	4620      	mov	r0, r4
 8006c94:	4798      	blx	r3
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7e0      	b.n	8006c5c <_raise_r+0x12>
	...

08006c9c <raise>:
 8006c9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ca8 <raise+0xc>)
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	f7ff bfd2 	b.w	8006c4a <_raise_r>
 8006ca6:	bf00      	nop
 8006ca8:	20000020 	.word	0x20000020

08006cac <_kill_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	@ (8006ccc <_kill_r+0x20>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f7fa fb0d 	bl	80012d8 <_kill>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d102      	bne.n	8006cc8 <_kill_r+0x1c>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b103      	cbz	r3, 8006cc8 <_kill_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000928 	.word	0x20000928

08006cd0 <_getpid_r>:
 8006cd0:	f7fa bafa 	b.w	80012c8 <_getpid>

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
