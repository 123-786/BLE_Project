
BLE_Project-X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800682c  0800682c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006834  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  20000070  080068a4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  080068a4  0000893c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001888a  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003267  00000000  00000000  0002092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00023b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101a  00000000  00000000  00025048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a095  00000000  00000000  00026062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017495  00000000  00000000  000400f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094701  00000000  00000000  0005758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebc8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e90  00000000  00000000  000ebcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f1b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064b4 	.word	0x080064b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080064b4 	.word	0x080064b4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004dc:	2006      	movs	r0, #6
 80004de:	f001 f984 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004ea:	2006      	movs	r0, #6
 80004ec:	f001 f98b 	bl	8001806 <HAL_NVIC_DisableIRQ>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000504:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6313      	str	r3, [r2, #48]	@ 0x30
 800050c:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <HCI_TL_SPI_Init+0x90>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000518:	2301      	movs	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <HCI_TL_SPI_Init+0x94>)
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4619      	mov	r1, r3
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 800052c:	f001 f9d8 	bl	80018e0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 800054a:	f001 f9c9 	bl	80018e0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800054e:	2302      	movs	r3, #2
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 8000566:	f001 f9bb 	bl	80018e0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <HCI_TL_SPI_Init+0x98>)
 8000570:	f001 fc36 	bl	8001de0 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000574:	f000 fdac 	bl	80010d0 <BSP_SPI1_Init>
 8000578:	4603      	mov	r3, r0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	10110000 	.word	0x10110000
 800058c:	40020000 	.word	0x40020000

08000590 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000594:	2101      	movs	r1, #1
 8000596:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 8000598:	f001 fb26 	bl	8001be8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800059c:	2102      	movs	r1, #2
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 80005a0:	f001 fb22 	bl	8001be8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 80005aa:	f001 fb1d 	bl	8001be8 <HAL_GPIO_DeInit>
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020000 	.word	0x40020000

080005b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005c2:	f001 fc0d 	bl	8001de0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005ce:	f001 fc07 	bl	8001de0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 ffca 	bl	800156c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <HCI_TL_SPI_Reset+0x38>)
 80005e0:	f001 fbfe 	bl	8001de0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005e4:	2005      	movs	r0, #5
 80005e6:	f000 ffc1 	bl	800156c <HAL_Delay>
  return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020000 	.word	0x40020000

080005f4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000604:	2300      	movs	r3, #0
 8000606:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000608:	4a26      	ldr	r2, [pc, #152]	@ (80006a4 <HCI_TL_SPI_Receive+0xb0>)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000612:	6018      	str	r0, [r3, #0]
 8000614:	3304      	adds	r3, #4
 8000616:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000618:	f7ff ff65 	bl	80004e6 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <HCI_TL_SPI_Receive+0xb4>)
 8000622:	f001 fbdd 	bl	8001de0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000626:	f107 010c 	add.w	r1, r7, #12
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2205      	movs	r2, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fd7d 	bl	8001130 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000636:	7c3b      	ldrb	r3, [r7, #16]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21a      	sxth	r2, r3
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b21b      	sxth	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01e      	beq.n	800068a <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800064c:	8bfa      	ldrh	r2, [r7, #30]
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	429a      	cmp	r2, r3
 8000652:	d901      	bls.n	8000658 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000658:	2300      	movs	r3, #0
 800065a:	777b      	strb	r3, [r7, #29]
 800065c:	e010      	b.n	8000680 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800065e:	f107 011b 	add.w	r1, r7, #27
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2201      	movs	r2, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fd61 	bl	8001130 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800066e:	7f7b      	ldrb	r3, [r7, #29]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	7efa      	ldrb	r2, [r7, #27]
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800067a:	7f7b      	ldrb	r3, [r7, #29]
 800067c:	3301      	adds	r3, #1
 800067e:	777b      	strb	r3, [r7, #29]
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	b29b      	uxth	r3, r3
 8000684:	8bfa      	ldrh	r2, [r7, #30]
 8000686:	429a      	cmp	r2, r3
 8000688:	d8e9      	bhi.n	800065e <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <HCI_TL_SPI_Receive+0xb4>)
 8000690:	f001 fba6 	bl	8001de0 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8000694:	f7ff ff20 	bl	80004d8 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8000698:	7f7b      	ldrb	r3, [r7, #29]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	080064cc 	.word	0x080064cc
 80006a8:	40020000 	.word	0x40020000

080006ac <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006b8:	4a34      	ldr	r2, [pc, #208]	@ (800078c <HCI_TL_SPI_Send+0xe0>)
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c2:	6018      	str	r0, [r3, #0]
 80006c4:	3304      	adds	r3, #4
 80006c6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f000 ff44 	bl	8001554 <HAL_GetTick>
 80006cc:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006ce:	f7ff ff0a 	bl	80004e6 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80006d2:	f000 ff3f 	bl	8001554 <HAL_GetTick>
 80006d6:	61f8      	str	r0, [r7, #28]

    result = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 80006e2:	f001 fb7d 	bl	8001de0 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80006e6:	e00a      	b.n	80006fe <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80006e8:	f000 ff34 	bl	8001554 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d903      	bls.n	80006fe <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80006f6:	f06f 0302 	mvn.w	r3, #2
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80006fc:	e004      	b.n	8000708 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80006fe:	f000 f84b 	bl	8000798 <IsDataAvailable>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0ef      	beq.n	80006e8 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	f113 0f03 	cmn.w	r3, #3
 800070e:	d105      	bne.n	800071c <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	481e      	ldr	r0, [pc, #120]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 8000716:	f001 fb63 	bl	8001de0 <HAL_GPIO_WritePin>
      break;
 800071a:	e030      	b.n	800077e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2205      	movs	r2, #5
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd02 	bl	8001130 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	7b7b      	ldrb	r3, [r7, #13]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21b      	sxth	r3, r3
 800073a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800073c:	8b7a      	ldrh	r2, [r7, #26]
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	429a      	cmp	r2, r3
 8000742:	d306      	bcc.n	8000752 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	461a      	mov	r2, r3
 8000748:	4912      	ldr	r1, [pc, #72]	@ (8000794 <HCI_TL_SPI_Send+0xe8>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 fcf0 	bl	8001130 <BSP_SPI1_SendRecv>
 8000750:	e002      	b.n	8000758 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000752:	f06f 0301 	mvn.w	r3, #1
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2102      	movs	r1, #2
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <HCI_TL_SPI_Send+0xe4>)
 800075e:	f001 fb3f 	bl	8001de0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000762:	f000 fef7 	bl	8001554 <HAL_GetTick>
 8000766:	4602      	mov	r2, r0
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d903      	bls.n	8000778 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000770:	f06f 0302 	mvn.w	r3, #2
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000776:	e002      	b.n	800077e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077a:	2b00      	cmp	r3, #0
 800077c:	dba9      	blt.n	80006d2 <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 800077e:	f7ff feab 	bl	80004d8 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000784:	4618      	mov	r0, r3
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	080064d4 	.word	0x080064d4
 8000790:	40020000 	.word	0x40020000
 8000794:	20000094 	.word	0x20000094

08000798 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800079c:	2101      	movs	r1, #1
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <IsDataAvailable+0x1c>)
 80007a0:	f001 fb06 	bl	8001db0 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020000 	.word	0x40020000

080007b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <hci_tl_lowlevel_init+0x54>)
 80007c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <hci_tl_lowlevel_init+0x58>)
 80007c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <hci_tl_lowlevel_init+0x5c>)
 80007c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <hci_tl_lowlevel_init+0x60>)
 80007cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <hci_tl_lowlevel_init+0x64>)
 80007d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <hci_tl_lowlevel_init+0x68>)
 80007d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fee9 	bl	80055b0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80007de:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <hci_tl_lowlevel_init+0x6c>)
 80007e4:	f001 f843 	bl	800186e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <hci_tl_lowlevel_init+0x70>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <hci_tl_lowlevel_init+0x6c>)
 80007ee:	f001 f824 	bl	800183a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2006      	movs	r0, #6
 80007f8:	f000 ffdb 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fc:	2006      	movs	r0, #6
 80007fe:	f000 fff4 	bl	80017ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	080004f5 	.word	0x080004f5
 8000810:	08000591 	.word	0x08000591
 8000814:	080006ad 	.word	0x080006ad
 8000818:	080005f5 	.word	0x080005f5
 800081c:	080005b9 	.word	0x080005b9
 8000820:	08001171 	.word	0x08001171
 8000824:	2000008c 	.word	0x2000008c
 8000828:	0800082d 	.word	0x0800082d

0800082c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000830:	e005      	b.n	800083e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000832:	2000      	movs	r0, #0
 8000834:	f005 f820 	bl	8005878 <hci_notify_asynch_evt>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d105      	bne.n	800084a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800083e:	f7ff ffab 	bl	8000798 <IsDataAvailable>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f4      	bne.n	8000832 <hci_tl_lowlevel_isr+0x6>
 8000848:	e000      	b.n	800084c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800084a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <bluenrg_init>:
#include "hci_tl.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b090      	sub	sp, #64	@ 0x40
 8000854:	af08      	add	r7, sp, #32

	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOCEN;
 8000856:	4b47      	ldr	r3, [pc, #284]	@ (8000974 <bluenrg_init+0x124>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a46      	ldr	r2, [pc, #280]	@ (8000974 <bluenrg_init+0x124>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30

	const char *name ="Trix";
 8000862:	4b45      	ldr	r3, [pc, #276]	@ (8000978 <bluenrg_init+0x128>)
 8000864:	61fb      	str	r3, [r7, #28]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 8000866:	4a45      	ldr	r2, [pc, #276]	@ (800097c <bluenrg_init+0x12c>)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	6018      	str	r0, [r3, #0]
 8000872:	3304      	adds	r3, #4
 8000874:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(APP_UserEvtRx,0);
 8000876:	2100      	movs	r1, #0
 8000878:	4841      	ldr	r0, [pc, #260]	@ (8000980 <bluenrg_init+0x130>)
 800087a:	f004 fe57 	bl	800552c <hci_init>
	hci_reset();
 800087e:	f004 f89a 	bl	80049b6 <hci_reset>
	HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	@ 0x64
 8000884:	f000 fe72 	bl	800156c <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	461a      	mov	r2, r3
 800088e:	2106      	movs	r1, #6
 8000890:	2000      	movs	r0, #0
 8000892:	f004 fd23 	bl	80052dc <aci_hal_write_config_data>
 8000896:	4603      	mov	r3, r0
 8000898:	76fb      	strb	r3, [r7, #27]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 800089a:	7efb      	ldrb	r3, [r7, #27]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <bluenrg_init+0x56>
 80008a0:	4838      	ldr	r0, [pc, #224]	@ (8000984 <bluenrg_init+0x134>)
 80008a2:	f005 fa65 	bl	8005d70 <puts>
	ret=aci_gatt_init();
 80008a6:	f004 fa5f 	bl	8004d68 <aci_gatt_init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	76fb      	strb	r3, [r7, #27]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 80008ae:	7efb      	ldrb	r3, [r7, #27]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <bluenrg_init+0x6a>
 80008b4:	4834      	ldr	r0, [pc, #208]	@ (8000988 <bluenrg_init+0x138>)
 80008b6:	f005 fa5b 	bl	8005d70 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 80008ba:	f107 0212 	add.w	r2, r7, #18
 80008be:	f107 030e 	add.w	r3, r7, #14
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	4613      	mov	r3, r2
 80008cc:	2207      	movs	r2, #7
 80008ce:	2100      	movs	r1, #0
 80008d0:	2001      	movs	r0, #1
 80008d2:	f004 f99c 	bl	8004c0e <aci_gap_init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	76fb      	strb	r3, [r7, #27]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 80008da:	7efb      	ldrb	r3, [r7, #27]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <bluenrg_init+0x96>
 80008e0:	482a      	ldr	r0, [pc, #168]	@ (800098c <bluenrg_init+0x13c>)
 80008e2:	f005 fa45 	bl	8005d70 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80008e6:	8a7c      	ldrh	r4, [r7, #18]
 80008e8:	8a3d      	ldrh	r5, [r7, #16]
 80008ea:	69f8      	ldr	r0, [r7, #28]
 80008ec:	f7ff fc74 	bl	80001d8 <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	4613      	mov	r3, r2
 80008fa:	2200      	movs	r2, #0
 80008fc:	4629      	mov	r1, r5
 80008fe:	4620      	mov	r0, r4
 8000900:	f004 fc3a 	bl	8005178 <aci_gatt_update_char_value>
 8000904:	4603      	mov	r3, r0
 8000906:	76fb      	strb	r3, [r7, #27]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000908:	7efb      	ldrb	r3, [r7, #27]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <bluenrg_init+0xc4>
 800090e:	4820      	ldr	r0, [pc, #128]	@ (8000990 <bluenrg_init+0x140>)
 8000910:	f005 fa2e 	bl	8005d70 <puts>
	//add custom service
	ret = add_services();
 8000914:	f000 f9b8 	bl	8000c88 <add_services>
 8000918:	4603      	mov	r3, r0
 800091a:	76fb      	strb	r3, [r7, #27]
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 800091c:	7efb      	ldrb	r3, [r7, #27]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <bluenrg_init+0xd8>
 8000922:	481c      	ldr	r0, [pc, #112]	@ (8000994 <bluenrg_init+0x144>)
 8000924:	f005 fa24 	bl	8005d70 <puts>

	//tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <bluenrg_init+0x148>)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	ca07      	ldmia	r2, {r0, r1, r2}
 800092e:	c303      	stmia	r3!, {r0, r1}
 8000930:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 8000932:	2300      	movs	r3, #0
 8000934:	9306      	str	r3, [sp, #24]
 8000936:	2300      	movs	r3, #0
 8000938:	9305      	str	r3, [sp, #20]
 800093a:	2300      	movs	r3, #0
 800093c:	9304      	str	r3, [sp, #16]
 800093e:	2300      	movs	r3, #0
 8000940:	9303      	str	r3, [sp, #12]
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2309      	movs	r3, #9
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2300      	movs	r3, #0
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f004 f857 	bl	8004a08 <aci_gap_set_discoverable>
 800095a:	4603      	mov	r3, r0
 800095c:	76fb      	strb	r3, [r7, #27]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
 800095e:	7efb      	ldrb	r3, [r7, #27]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <bluenrg_init+0x11a>
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <bluenrg_init+0x14c>)
 8000966:	f005 fa03 	bl	8005d70 <puts>


	}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bdb0      	pop	{r4, r5, r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	080064dc 	.word	0x080064dc
 800097c:	20000000 	.word	0x20000000
 8000980:	08000e7d 	.word	0x08000e7d
 8000984:	080064e4 	.word	0x080064e4
 8000988:	08006508 	.word	0x08006508
 800098c:	08006520 	.word	0x08006520
 8000990:	08006538 	.word	0x08006538
 8000994:	0800655c 	.word	0x0800655c
 8000998:	0800659c 	.word	0x0800659c
 800099c:	08006578 	.word	0x08006578

080009a0 <bluenrg_process>:

uint8_t btn_state;

void bluenrg_process(void)
		{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

			//process user events

			hci_user_evt_proc();
 80009a6:	f004 ff3b 	bl	8005820 <hci_user_evt_proc>

			btn_state=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13); //for push button
 80009aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ae:	480b      	ldr	r0, [pc, #44]	@ (80009dc <bluenrg_process+0x3c>)
 80009b0:	f001 f9fe 	bl	8001db0 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <bluenrg_process+0x40>)
 80009ba:	701a      	strb	r2, [r3, #0]
			if(btn_state==0)
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <bluenrg_process+0x40>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d107      	bne.n	80009d4 <bluenrg_process+0x34>
				{
				uint8_t data[2]={'a','a'};
 80009c4:	f246 1361 	movw	r3, #24929	@ 0x6161
 80009c8:	80bb      	strh	r3, [r7, #4]
				send_data(data,2);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f9c0 	bl	8000d54 <send_data>
				}


		}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40020800 	.word	0x40020800
 80009e0:	20000193 	.word	0x20000193

080009e4 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 80009ec:	bf00      	nop
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <__io_putchar+0x2c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f9      	beq.n	80009ee <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <__io_putchar+0x2c>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 8000a00:	687b      	ldr	r3, [r7, #4]
	}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40004400 	.word	0x40004400

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fd36 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80e 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f000 f89e 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a24:	f000 f872 	bl	8000b0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <main+0x24>)
 8000a2a:	f005 f9a1 	bl	8005d70 <puts>
bluenrg_init();
 8000a2e:	f7ff ff0f 	bl	8000850 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 8000a32:	f7ff ffb5 	bl	80009a0 <bluenrg_process>
 8000a36:	e7fc      	b.n	8000a32 <main+0x1e>
 8000a38:	080065a8 	.word	0x080065a8

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	@ 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fa70 	bl	8005f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	@ (8000b04 <SystemClock_Config+0xc8>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <SystemClock_Config+0xc8>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a20      	ldr	r2, [pc, #128]	@ (8000b08 <SystemClock_Config+0xcc>)
 8000a86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <SystemClock_Config+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ab0:	2340      	movs	r3, #64	@ 0x40
 8000ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f9e5 	bl	8001e90 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000acc:	f000 f8d6 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2102      	movs	r1, #2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fc47 	bl	8002380 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000af8:	f000 f8c0 	bl	8000c7c <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	@ 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f002 f94a 	bl	8002ddc <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f895 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000194 	.word	0x20000194
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a34      	ldr	r2, [pc, #208]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a26      	ldr	r2, [pc, #152]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <MX_GPIO_Init+0x10c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000bec:	4820      	ldr	r0, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0x110>)
 8000bee:	f001 f8f7 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0x114>)
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <MX_GPIO_Init+0x118>)
 8000c08:	f000 fe6a 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_GPIO_Init+0x114>)
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4814      	ldr	r0, [pc, #80]	@ (8000c70 <MX_GPIO_Init+0x110>)
 8000c20:	f000 fe5e 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000c24:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x110>)
 8000c3e:	f000 fe4f 	bl	80018e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2006      	movs	r0, #6
 8000c48:	f000 fdb3 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f000 fdcc 	bl	80017ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2028      	movs	r0, #40	@ 0x28
 8000c58:	f000 fdab 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5c:	2028      	movs	r0, #40	@ 0x28
 8000c5e:	f000 fdc4 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	10110000 	.word	0x10110000
 8000c78:	40020800 	.word	0x40020800

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <add_services>:
uint16_t connection_handle=0;
uint8_t  notification_enabled=0;


tBleStatus add_services(void)
	{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b093      	sub	sp, #76	@ 0x4c
 8000c8c:	af06      	add	r7, sp, #24

	Service_UUID_t service_uuid;
	Char_UUID_t char_uuid_tx,char_uuid_rx;


	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <add_services+0x94>)
 8000c90:	f107 0420 	add.w	r4, r7, #32
 8000c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(char_uuid_tx.Char_UUID_128,CHAR_UUID_TX,16);
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <add_services+0x98>)
 8000c9c:	f107 0410 	add.w	r4, r7, #16
 8000ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(char_uuid_rx.Char_UUID_128,CHAR_UUID_RX,16);
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <add_services+0x9c>)
 8000ca8:	463c      	mov	r4, r7
 8000caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &chat_service_handle);
 8000cb0:	f107 0120 	add.w	r1, r7, #32
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <add_services+0xa0>)
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2307      	movs	r3, #7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f004 f87d 	bl	8004dbc <aci_gatt_add_service>

	//aci_gatt_add_char(chat_service_handle,UUID_TYPE_128,&char_uuid_tx,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&tx_char_handle);

	aci_gatt_add_char(chat_service_handle,UUID_TYPE_128,&char_uuid_tx,20,CHAR_PROP_NOTIFY,ATTR_PERMISSION_NONE,0,0,1,&tx_char_handle);
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <add_services+0xa0>)
 8000cc4:	8818      	ldrh	r0, [r3, #0]
 8000cc6:	f107 0210 	add.w	r2, r7, #16
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <add_services+0xa4>)
 8000ccc:	9305      	str	r3, [sp, #20]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2310      	movs	r3, #16
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2314      	movs	r3, #20
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	f004 f93f 	bl	8004f68 <aci_gatt_add_char>
	aci_gatt_add_char(chat_service_handle,UUID_TYPE_128,&char_uuid_rx,20,CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_WRITE,ATTR_PERMISSION_NONE,GATT_NOTIFY_ATTRIBUTE_WRITE,0,1,&rx_char_handle);
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <add_services+0xa0>)
 8000cec:	8818      	ldrh	r0, [r3, #0]
 8000cee:	463a      	mov	r2, r7
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <add_services+0xa8>)
 8000cf2:	9305      	str	r3, [sp, #20]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9304      	str	r3, [sp, #16]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9303      	str	r3, [sp, #12]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	2300      	movs	r3, #0
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	230c      	movs	r3, #12
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2314      	movs	r3, #20
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	f004 f92c 	bl	8004f68 <aci_gatt_add_char>


	return 0;
 8000d10:	2300      	movs	r3, #0
	}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3734      	adds	r7, #52	@ 0x34
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	080065fc 	.word	0x080065fc
 8000d20:	0800660c 	.word	0x0800660c
 8000d24:	0800661c 	.word	0x0800661c
 8000d28:	200001d8 	.word	0x200001d8
 8000d2c:	200001da 	.word	0x200001da
 8000d30:	200001dc 	.word	0x200001dc

08000d34 <receive_data>:
uint8_t rcv_data[20];



void receive_data(uint8_t * data_buffer, uint8_t no_bytes)
	{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d40:	2120      	movs	r1, #32
 8000d42:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <receive_data+0x1c>)
 8000d44:	f001 f865 	bl	8001e12 <HAL_GPIO_TogglePin>




	}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020000 	.word	0x40020000

08000d54 <send_data>:



void send_data(uint8_t *data_buffer, uint8_t no_byte)
	{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, no_byte, data_buffer);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <send_data+0x3c>)
 8000d62:	8818      	ldrh	r0, [r3, #0]
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <send_data+0x40>)
 8000d66:	8819      	ldrh	r1, [r3, #0]
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	2200      	movs	r2, #0
 8000d72:	f004 fa01 	bl	8005178 <aci_gatt_update_char_value>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <send_data+0x32>
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <send_data+0x44>)
 8000d82:	f004 fff5 	bl	8005d70 <puts>

	}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001d8 	.word	0x200001d8
 8000d94:	200001da 	.word	0x200001da
 8000d98:	080065bc 	.word	0x080065bc

08000d9c <Attribute_Modified_CB>:
	Read_Request_CB(Atrribute_Handle);
	}
*/
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length,uint8_t *att_data)

	{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	603a      	str	r2, [r7, #0]
 8000da6:	80fb      	strh	r3, [r7, #6]
 8000da8:	460b      	mov	r3, r1
 8000daa:	717b      	strb	r3, [r7, #5]

	if(handle==rx_char_handle+1)
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <Attribute_Modified_CB+0x4c>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d105      	bne.n	8000dc4 <Attribute_Modified_CB+0x28>
		{
		receive_data(att_data, data_length);
 8000db8:	797b      	ldrb	r3, [r7, #5]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6838      	ldr	r0, [r7, #0]
 8000dbe:	f7ff ffb9 	bl	8000d34 <receive_data>
			notification_enabled=1;
			}

		}

	}
 8000dc2:	e00c      	b.n	8000dde <Attribute_Modified_CB+0x42>
	else if(handle==tx_char_handle+2)
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <Attribute_Modified_CB+0x50>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d106      	bne.n	8000dde <Attribute_Modified_CB+0x42>
		if(att_data[0]==0x01)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d102      	bne.n	8000dde <Attribute_Modified_CB+0x42>
			notification_enabled=1;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <Attribute_Modified_CB+0x54>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001dc 	.word	0x200001dc
 8000dec:	200001da 	.word	0x200001da
 8000df0:	200001e2 	.word	0x200001e2

08000df4 <aci_gatt_attribute_modified_event>:


void aci_gatt_attribute_modified_event(uint16_t Conenction_Handle,
									  uint16_t Attr_Handle,uint16_t Offset, uint16_t Attr_Data_Length, uint8_t Attr_Data[])
	{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4623      	mov	r3, r4
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	4603      	mov	r3, r0
 8000e08:	80bb      	strh	r3, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	807b      	strh	r3, [r7, #2]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	803b      	strh	r3, [r7, #0]

	Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	b2d9      	uxtb	r1, r3
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ffbe 	bl	8000d9c <Attribute_Modified_CB>

	}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}

08000e28 <hci_le_connection_complete_event>:
									uint16_t Conn_Latency,
									uint16_t Supervision_Timeout,
									uint8_t Master_Clock_Accuracy
									)

	{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	70fb      	strb	r3, [r7, #3]
	connected=1;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <hci_le_connection_complete_event+0x44>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
	connection_handle=Connection_Handle;
 8000e4c:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <hci_le_connection_complete_event+0x48>)
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2120      	movs	r1, #32
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <hci_le_connection_complete_event+0x4c>)
 8000e58:	f000 ffc2 	bl	8001de0 <HAL_GPIO_WritePin>

	printf("Connected \r\n");
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <hci_le_connection_complete_event+0x50>)
 8000e5e:	f004 ff87 	bl	8005d70 <puts>
	}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001de 	.word	0x200001de
 8000e70:	200001e0 	.word	0x200001e0
 8000e74:	40020000 	.word	0x40020000
 8000e78:	080065e0 	.word	0x080065e0

08000e7c <APP_UserEvtRx>:


	}

void APP_UserEvtRx(void *pData)
	{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	uint32_t i;
	hci_spi_pckt *hci_pckt =(hci_spi_pckt *)pData;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
	if(hci_pckt->type==HCI_EVENT_PKT)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d163      	bne.n	8000f58 <APP_UserEvtRx+0xdc>
		{
		//Get data from packet
		hci_event_pckt *event_pckt =(hci_event_pckt*)hci_pckt->data;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
		//process meta data
		if(event_pckt->evt ==EVT_LE_META_EVENT)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e9c:	d11e      	bne.n	8000edc <APP_UserEvtRx+0x60>
			{
			//get meta data
			evt_le_meta_event *evt =(void *)event_pckt->data;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
			//process each meta data;
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e014      	b.n	8000ed4 <APP_UserEvtRx+0x58>
				{
					if(evt->subevent ==hci_le_meta_events_table[i].evt_code)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f60 <APP_UserEvtRx+0xe4>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d108      	bne.n	8000ece <APP_UserEvtRx+0x52>
					{
						hci_le_meta_events_table[i].process((void *)evt->data);
 8000ebc:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <APP_UserEvtRx+0xe4>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	3201      	adds	r2, #1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4798      	blx	r3
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b09      	cmp	r3, #9
 8000ed8:	d9e7      	bls.n	8000eaa <APP_UserEvtRx+0x2e>
		}




	}
 8000eda:	e03d      	b.n	8000f58 <APP_UserEvtRx+0xdc>
		else if(event_pckt->evt==EVT_VENDOR)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d11e      	bne.n	8000f22 <APP_UserEvtRx+0xa6>
				evt_blue_aci *blue_evt= (void *)event_pckt->data;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e014      	b.n	8000f1a <APP_UserEvtRx+0x9e>
					if(blue_evt->ecode==hci_vendor_specific_events_table[i].evt_code)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	491b      	ldr	r1, [pc, #108]	@ (8000f64 <APP_UserEvtRx+0xe8>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d108      	bne.n	8000f14 <APP_UserEvtRx+0x98>
						hci_vendor_specific_events_table[i].process((void*)blue_evt->data);
 8000f02:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <APP_UserEvtRx+0xe8>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	3202      	adds	r2, #2
 8000f10:	4610      	mov	r0, r2
 8000f12:	4798      	blx	r3
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f1e:	d9e7      	bls.n	8000ef0 <APP_UserEvtRx+0x74>
	}
 8000f20:	e01a      	b.n	8000f58 <APP_UserEvtRx+0xdc>
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e014      	b.n	8000f52 <APP_UserEvtRx+0xd6>
					if(event_pckt->evt==hci_events_table[i].evt_code)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f68 <APP_UserEvtRx+0xec>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000f36:	4299      	cmp	r1, r3
 8000f38:	d108      	bne.n	8000f4c <APP_UserEvtRx+0xd0>
						hci_events_table[i].process((void*)event_pckt->data);
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <APP_UserEvtRx+0xec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	3202      	adds	r2, #2
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4798      	blx	r3
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d9e7      	bls.n	8000f28 <APP_UserEvtRx+0xac>
	}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	0800667c 	.word	0x0800667c
 8000f64:	080066cc 	.word	0x080066cc
 8000f68:	08006644 	.word	0x08006644

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fbf6 	bl	800179c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_UART_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001016:	230c      	movs	r3, #12
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001026:	2307      	movs	r3, #7
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UART_MspInit+0x8c>)
 8001032:	f000 fc55 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fa43 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <EXTI0_IRQHandler+0x10>)
 80010b2:	f000 fbf1 	bl	8001898 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000008c 	.word	0x2000008c

080010c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010c8:	f000 febe 	bl	8001e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <BSP_SPI1_Init+0x58>)
 80010de:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <BSP_SPI1_Init+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4911      	ldr	r1, [pc, #68]	@ (800112c <BSP_SPI1_Init+0x5c>)
 80010e8:	600a      	str	r2, [r1, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d114      	bne.n	8001118 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010f0:	f001 fd9b 	bl	8002c2a <HAL_SPI_GetState>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10e      	bne.n	8001118 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <BSP_SPI1_Init+0x54>)
 80010fc:	f000 f87c 	bl	80011f8 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <BSP_SPI1_Init+0x54>)
 8001108:	f000 f83a 	bl	8001180 <MX_SPI1_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8001112:	f06f 0307 	mvn.w	r3, #7
 8001116:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001e4 	.word	0x200001e4
 8001128:	40013000 	.word	0x40013000
 800112c:	2000023c 	.word	0x2000023c

08001130 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	4807      	ldr	r0, [pc, #28]	@ (800116c <BSP_SPI1_SendRecv+0x3c>)
 8001150:	f001 fbc9 	bl	80028e6 <HAL_SPI_TransmitReceive>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800115a:	f06f 0305 	mvn.w	r3, #5
 800115e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001160:	697b      	ldr	r3, [r7, #20]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001e4 	.word	0x200001e4

08001170 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001174:	f000 f9ee 	bl	8001554 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <MX_SPI1_Init+0x74>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2228      	movs	r2, #40	@ 0x28
 80011be:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 faf1 	bl	80027c0 <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013000 	.word	0x40013000

080011f8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <SPI1_MspInit+0xc4>)
 800120a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800120e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6313      	str	r3, [r2, #48]	@ 0x30
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <SPI1_MspInit+0xc4>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <SPI1_MspInit+0xc4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <SPI1_MspInit+0xc4>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <SPI1_MspInit+0xc4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001254:	2340      	movs	r3, #64	@ 0x40
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001264:	2305      	movs	r3, #5
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <SPI1_MspInit+0xc8>)
 8001270:	f000 fb36 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001284:	2305      	movs	r3, #5
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <SPI1_MspInit+0xc8>)
 8001290:	f000 fb26 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001294:	2308      	movs	r3, #8
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80012a4:	2305      	movs	r3, #5
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <SPI1_MspInit+0xcc>)
 80012b0:	f000 fb16 	bl	80018e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400

080012c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
	}

return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fb61 	bl	80009e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
	}
	return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001362:	605a      	str	r2, [r3, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f004 fdfa 	bl	8005fcc <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20020000 	.word	0x20020000
 8001404:	00000400 	.word	0x00000400
 8001408:	20000240 	.word	0x20000240
 800140c:	20000940 	.word	0x20000940

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480d      	ldr	r0, [pc, #52]	@ (8001470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143a:	490e      	ldr	r1, [pc, #56]	@ (8001474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001450:	4c0b      	ldr	r4, [pc, #44]	@ (8001480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f004 fdb9 	bl	8005fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fad5 	bl	8000a14 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001478:	08006834 	.word	0x08006834
  ldr r2, =_sbss
 800147c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001480:	2000093c 	.word	0x2000093c

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f973 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fd56 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f999 	bl	8001822 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f953 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000008 	.word	0x20000008
 8001524:	20000010 	.word	0x20000010
 8001528:	2000000c 	.word	0x2000000c

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000010 	.word	0x20000010
 8001550:	20000244 	.word	0x20000244

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000244 	.word	0x20000244

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000010 	.word	0x20000010

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db12      	blt.n	800168c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	490a      	ldr	r1, [pc, #40]	@ (8001698 <__NVIC_DisableIRQ+0x44>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	3320      	adds	r3, #32
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001680:	f3bf 8f4f 	dsb	sy
}
 8001684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001686:	f3bf 8f6f 	isb	sy
}
 800168a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff05 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff1a 	bl	80015fc <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff0d 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff1d 	bl	8001654 <__NVIC_DisableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff94 	bl	8001758 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800183a:	b480      	push	{r7}
 800183c:	b087      	sub	sp, #28
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	460b      	mov	r3, r1
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]
      break;
 8001858:	e002      	b.n	8001860 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
      break;
 800185e:	bf00      	nop
  }

  return status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e003      	b.n	800188a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001888:	2300      	movs	r3, #0
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_EXTI_IRQHandler+0x44>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_EXTI_IRQHandler+0x44>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4798      	blx	r3
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e159      	b.n	8001bb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8148 	bne.w	8001baa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d005      	beq.n	8001932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	2b02      	cmp	r3, #2
 8001930:	d130      	bne.n	8001994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80a2 	beq.w	8001baa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_GPIO_Init+0x2e8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a56      	ldr	r2, [pc, #344]	@ (8001bc8 <HAL_GPIO_Init+0x2e8>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b54      	ldr	r3, [pc, #336]	@ (8001bc8 <HAL_GPIO_Init+0x2e8>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a82:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a49      	ldr	r2, [pc, #292]	@ (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x202>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a48      	ldr	r2, [pc, #288]	@ (8001bd4 <HAL_GPIO_Init+0x2f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x1fe>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a47      	ldr	r2, [pc, #284]	@ (8001bd8 <HAL_GPIO_Init+0x2f8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x1fa>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	@ (8001bdc <HAL_GPIO_Init+0x2fc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x1f6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	@ (8001be0 <HAL_GPIO_Init+0x300>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x1f2>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	@ (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b26:	4a2f      	ldr	r2, [pc, #188]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b50:	4a24      	ldr	r2, [pc, #144]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f aea2 	bls.w	80018fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e0bb      	b.n	8001d7c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c04:	2201      	movs	r2, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	f040 80ab 	bne.w	8001d76 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c20:	4a5c      	ldr	r2, [pc, #368]	@ (8001d94 <HAL_GPIO_DeInit+0x1ac>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a54      	ldr	r2, [pc, #336]	@ (8001d98 <HAL_GPIO_DeInit+0x1b0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_DeInit+0x96>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a53      	ldr	r2, [pc, #332]	@ (8001d9c <HAL_GPIO_DeInit+0x1b4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_DeInit+0x92>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_DeInit+0x1b8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_DeInit+0x8e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_DeInit+0x1bc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_DeInit+0x8a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_DeInit+0x1c0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_DeInit+0x86>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_DeInit+0x98>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_DeInit+0x98>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_DeInit+0x98>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_DeInit+0x98>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_DeInit+0x98>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d132      	bne.n	8001cf6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c90:	4b46      	ldr	r3, [pc, #280]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4944      	ldr	r1, [pc, #272]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c9e:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4941      	ldr	r1, [pc, #260]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cac:	4b3f      	ldr	r3, [pc, #252]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	493d      	ldr	r1, [pc, #244]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cba:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	493a      	ldr	r1, [pc, #232]	@ (8001dac <HAL_GPIO_DeInit+0x1c4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <HAL_GPIO_DeInit+0x1ac>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	482a      	ldr	r0, [pc, #168]	@ (8001d94 <HAL_GPIO_DeInit+0x1ac>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	400a      	ands	r2, r1
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2103      	movs	r1, #3
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	08d2      	lsrs	r2, r2, #3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2103      	movs	r1, #3
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2103      	movs	r1, #3
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f af40 	bls.w	8001c04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f806 	bl	8001e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e267      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d075      	beq.n	8001f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eae:	4b88      	ldr	r3, [pc, #544]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b85      	ldr	r3, [pc, #532]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x108>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d157      	bne.n	8001f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e242      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x74>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xb0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x98>
 8001f0e:	4b70      	ldr	r3, [pc, #448]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6f      	ldr	r2, [pc, #444]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xb0>
 8001f28:	4b69      	ldr	r3, [pc, #420]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a68      	ldr	r2, [pc, #416]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b66      	ldr	r3, [pc, #408]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a65      	ldr	r2, [pc, #404]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb04 	bl	8001554 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fb00 	bl	8001554 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e207      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b5b      	ldr	r3, [pc, #364]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xc0>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff faf0 	bl	8001554 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff faec 	bl	8001554 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	@ 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1f3      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b51      	ldr	r3, [pc, #324]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0xe8>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b44      	ldr	r3, [pc, #272]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x152>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e1c7      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4937      	ldr	r1, [pc, #220]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e03a      	b.n	800206e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <HAL_RCC_OscConfig+0x244>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff faa5 	bl	8001554 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200e:	f7ff faa1 	bl	8001554 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1a8      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4925      	ldr	r1, [pc, #148]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_RCC_OscConfig+0x244>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff fa84 	bl	8001554 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fa80 	bl	8001554 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e187      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d036      	beq.n	80020e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_RCC_OscConfig+0x248>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff fa64 	bl	8001554 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fa60 	bl	8001554 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e167      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_OscConfig+0x240>)
 80020a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x200>
 80020ae:	e01b      	b.n	80020e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_RCC_OscConfig+0x248>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa4d 	bl	8001554 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	e00e      	b.n	80020dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff fa49 	bl	8001554 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d907      	bls.n	80020dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e150      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	42470000 	.word	0x42470000
 80020d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ea      	bne.n	80020be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8097 	beq.w	8002224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b81      	ldr	r3, [pc, #516]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b7d      	ldr	r3, [pc, #500]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a7c      	ldr	r2, [pc, #496]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b7a      	ldr	r3, [pc, #488]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b77      	ldr	r3, [pc, #476]	@ (8002304 <HAL_RCC_OscConfig+0x474>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b74      	ldr	r3, [pc, #464]	@ (8002304 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a73      	ldr	r2, [pc, #460]	@ (8002304 <HAL_RCC_OscConfig+0x474>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff fa09 	bl	8001554 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff fa05 	bl	8001554 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e10c      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b6a      	ldr	r3, [pc, #424]	@ (8002304 <HAL_RCC_OscConfig+0x474>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x2ea>
 800216c:	4b64      	ldr	r3, [pc, #400]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	4a63      	ldr	r2, [pc, #396]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	@ 0x70
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x324>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x30c>
 8002182:	4b5f      	ldr	r3, [pc, #380]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a5e      	ldr	r2, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6713      	str	r3, [r2, #112]	@ 0x70
 800218e:	4b5c      	ldr	r3, [pc, #368]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002192:	4a5b      	ldr	r2, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	@ 0x70
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0x324>
 800219c:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a8:	4b55      	ldr	r3, [pc, #340]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	4a54      	ldr	r2, [pc, #336]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0304 	bic.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9ca 	bl	8001554 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff f9c6 	bl	8001554 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0cb      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	4b49      	ldr	r3, [pc, #292]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0ee      	beq.n	80021c4 <HAL_RCC_OscConfig+0x334>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff f9b4 	bl	8001554 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7ff f9b0 	bl	8001554 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0b5      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	4b3e      	ldr	r3, [pc, #248]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ee      	bne.n	80021f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	4a38      	ldr	r2, [pc, #224]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a1 	beq.w	8002370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222e:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d05c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d141      	bne.n	80022c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f984 	bl	8001554 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f980 	bl	8001554 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e087      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x478>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f959 	bl	8001554 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff f955 	bl	8001554 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e05c      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x416>
 80022c4:	e054      	b.n	8002370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_RCC_OscConfig+0x478>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f942 	bl	8001554 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff f93e 	bl	8001554 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e045      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_RCC_OscConfig+0x470>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x444>
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e038      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
 8002308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800230c:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x4ec>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d028      	beq.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d121      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800233c:	4013      	ands	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002344:	4293      	cmp	r3, r2
 8002346:	d111      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	3b01      	subs	r3, #1
 8002356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0cc      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b68      	ldr	r3, [pc, #416]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d90c      	bls.n	80023bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b65      	ldr	r3, [pc, #404]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b8      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b50      	ldr	r3, [pc, #320]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494d      	ldr	r1, [pc, #308]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d044      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d119      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	2b03      	cmp	r3, #3
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e067      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b37      	ldr	r3, [pc, #220]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4934      	ldr	r1, [pc, #208]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff f870 	bl	8001554 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff f86c 	bl	8001554 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e04f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d20c      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e032      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4916      	ldr	r1, [pc, #88]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490e      	ldr	r1, [pc, #56]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f821 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	490a      	ldr	r1, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	5ccb      	ldrb	r3, [r1, r3]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe ffd0 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023c00 	.word	0x40023c00
 800253c:	40023800 	.word	0x40023800
 8002540:	0800662c 	.word	0x0800662c
 8002544:	20000008 	.word	0x20000008
 8002548:	2000000c 	.word	0x2000000c

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b094      	sub	sp, #80	@ 0x50
 8002552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	647b      	str	r3, [r7, #68]	@ 0x44
 8002558:	2300      	movs	r3, #0
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800255c:	2300      	movs	r3, #0
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002564:	4b79      	ldr	r3, [pc, #484]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d00d      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x40>
 8002570:	2b08      	cmp	r3, #8
 8002572:	f200 80e1 	bhi.w	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x34>
 800257a:	2b04      	cmp	r3, #4
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x3a>
 800257e:	e0db      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b73      	ldr	r3, [pc, #460]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002584:	e0db      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b73      	ldr	r3, [pc, #460]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x208>)
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800258a:	e0d8      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002594:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	2200      	movs	r2, #0
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	0159      	lsls	r1, r3, #5
 80025cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d0:	0150      	lsls	r0, r2, #5
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4621      	mov	r1, r4
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	6139      	str	r1, [r7, #16]
 80025dc:	4629      	mov	r1, r5
 80025de:	eb63 0301 	sbc.w	r3, r3, r1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f0:	4659      	mov	r1, fp
 80025f2:	018b      	lsls	r3, r1, #6
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fa:	4651      	mov	r1, sl
 80025fc:	018a      	lsls	r2, r1, #6
 80025fe:	4651      	mov	r1, sl
 8002600:	ebb2 0801 	subs.w	r8, r2, r1
 8002604:	4659      	mov	r1, fp
 8002606:	eb63 0901 	sbc.w	r9, r3, r1
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261e:	4690      	mov	r8, r2
 8002620:	4699      	mov	r9, r3
 8002622:	4623      	mov	r3, r4
 8002624:	eb18 0303 	adds.w	r3, r8, r3
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	462b      	mov	r3, r5
 800262c:	eb49 0303 	adc.w	r3, r9, r3
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800263e:	4629      	mov	r1, r5
 8002640:	024b      	lsls	r3, r1, #9
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002648:	4621      	mov	r1, r4
 800264a:	024a      	lsls	r2, r1, #9
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002652:	2200      	movs	r2, #0
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800265c:	f7fd fdc4 	bl	80001e8 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002668:	e058      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	4618      	mov	r0, r3
 8002674:	4611      	mov	r1, r2
 8002676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	f04f 0000 	mov.w	r0, #0
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	0159      	lsls	r1, r3, #5
 8002692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002696:	0150      	lsls	r0, r2, #5
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4641      	mov	r1, r8
 800269e:	ebb2 0a01 	subs.w	sl, r2, r1
 80026a2:	4649      	mov	r1, r9
 80026a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026bc:	ebb2 040a 	subs.w	r4, r2, sl
 80026c0:	eb63 050b 	sbc.w	r5, r3, fp
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	00eb      	lsls	r3, r5, #3
 80026ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d2:	00e2      	lsls	r2, r4, #3
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	4643      	mov	r3, r8
 80026da:	18e3      	adds	r3, r4, r3
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	464b      	mov	r3, r9
 80026e0:	eb45 0303 	adc.w	r3, r5, r3
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f2:	4629      	mov	r1, r5
 80026f4:	028b      	lsls	r3, r1, #10
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026fc:	4621      	mov	r1, r4
 80026fe:	028a      	lsls	r2, r1, #10
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002706:	2200      	movs	r2, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	f7fd fd6a 	bl	80001e8 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800272c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002740:	4618      	mov	r0, r3
 8002742:	3750      	adds	r7, #80	@ 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400
 8002754:	007a1200 	.word	0x007a1200

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	@ (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	0800663c 	.word	0x0800663c

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffdc 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	@ (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	0800663c 	.word	0x0800663c

080027c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e07b      	b.n	80028ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027e2:	d009      	beq.n	80027f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
 80027ea:	e005      	b.n	80027f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f85d 	bl	80028d2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287c:	ea42 0103 	orr.w	r1, r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0104 	and.w	r1, r3, #4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	f003 0210 	and.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b08c      	sub	sp, #48	@ 0x30
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_SPI_TransmitReceive+0x26>
 8002908:	2302      	movs	r3, #2
 800290a:	e18a      	b.n	8002c22 <HAL_SPI_TransmitReceive+0x33c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002914:	f7fe fe1e 	bl	8001554 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800292e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00f      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x70>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293c:	d107      	bne.n	800294e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_SPI_TransmitReceive+0x68>
 8002946:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800294a:	2b04      	cmp	r3, #4
 800294c:	d003      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002954:	e15b      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x82>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x82>
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800296e:	e14e      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b04      	cmp	r3, #4
 800297a:	d003      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2205      	movs	r2, #5
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	887a      	ldrh	r2, [r7, #2]
 80029a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b40      	cmp	r3, #64	@ 0x40
 80029c6:	d007      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e0:	d178      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x10a>
 80029ea:	8b7b      	ldrh	r3, [r7, #26]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d166      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a14:	e053      	b.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d11b      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d113      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d119      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x1b8>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a9e:	f7fe fd59 	bl	8001554 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d807      	bhi.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d003      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002abc:	e0a7      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1a6      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x130>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1a1      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x130>
 8002ad2:	e07c      	b.n	8002bce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_TransmitReceive+0x1fc>
 8002adc:	8b7b      	ldrh	r3, [r7, #26]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d16b      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b08:	e057      	b.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d11c      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d017      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d114      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <HAL_SPI_TransmitReceive+0x2ae>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b94:	f7fe fcde 	bl	8001554 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d803      	bhi.n	8002bac <HAL_SPI_TransmitReceive+0x2c6>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d102      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x2cc>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002bb8:	e029      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1a2      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x224>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d19d      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f8c0 	bl	8002d58 <SPI_EndRxTxTransaction>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002bea:	e010      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	e000      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	@ 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c38:	b2db      	uxtb	r3, r3
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c58:	f7fe fc7c 	bl	8001554 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c68:	f7fe fc74 	bl	8001554 <HAL_GetTick>
 8002c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c6e:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	015b      	lsls	r3, r3, #5
 8002c74:	0d1b      	lsrs	r3, r3, #20
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7e:	e054      	b.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d050      	beq.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c88:	f7fe fc64 	bl	8001554 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d902      	bls.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13d      	bne.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cb6:	d111      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc0:	d004      	beq.n	8002ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d107      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce4:	d10f      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e017      	b.n	8002d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d19b      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <SPI_EndRxTxTransaction+0x7c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <SPI_EndRxTxTransaction+0x80>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0d5b      	lsrs	r3, r3, #21
 8002d70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d82:	d112      	bne.n	8002daa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff ff5a 	bl	8002c48 <SPI_WaitFlagStateUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e00f      	b.n	8002dca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc0:	2b80      	cmp	r3, #128	@ 0x80
 8002dc2:	d0f2      	beq.n	8002daa <SPI_EndRxTxTransaction+0x52>
 8002dc4:	e000      	b.n	8002dc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dc6:	bf00      	nop
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	165e9f81 	.word	0x165e9f81

08002ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e03f      	b.n	8002e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f8da 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f829 	bl	8002e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b0c0      	sub	sp, #256	@ 0x100
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ed0:	f021 010c 	bic.w	r1, r1, #12
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	ea40 0301 	orr.w	r3, r0, r1
 8002efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <UART_SetConfig+0x2cc>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0xa0>
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <UART_SetConfig+0x2d0>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d104      	bne.n	8002f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7ff fc3e 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f20:	e003      	b.n	8002f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f22:	f7ff fc25 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8002f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f34:	f040 810c 	bne.w	8003150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f52:	415b      	adcs	r3, r3
 8002f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	eb12 0801 	adds.w	r8, r2, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb43 0901 	adc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	18db      	adds	r3, r3, r3
 8002faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fac:	4613      	mov	r3, r2
 8002fae:	eb42 0303 	adc.w	r3, r2, r3
 8002fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fbc:	f7fd f914 	bl	80001e8 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b61      	ldr	r3, [pc, #388]	@ (800314c <UART_SetConfig+0x2d4>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011c      	lsls	r4, r3, #4
 8002fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800300c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003010:	4692      	mov	sl, r2
 8003012:	469b      	mov	fp, r3
 8003014:	4643      	mov	r3, r8
 8003016:	eb1a 0303 	adds.w	r3, sl, r3
 800301a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800301e:	464b      	mov	r3, r9
 8003020:	eb4b 0303 	adc.w	r3, fp, r3
 8003024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800303c:	460b      	mov	r3, r1
 800303e:	18db      	adds	r3, r3, r3
 8003040:	643b      	str	r3, [r7, #64]	@ 0x40
 8003042:	4613      	mov	r3, r2
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800304e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003052:	f7fd f8c9 	bl	80001e8 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4611      	mov	r1, r2
 800305c:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <UART_SetConfig+0x2d4>)
 800305e:	fba3 2301 	umull	r2, r3, r3, r1
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2264      	movs	r2, #100	@ 0x64
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	1acb      	subs	r3, r1, r3
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003072:	4b36      	ldr	r3, [pc, #216]	@ (800314c <UART_SetConfig+0x2d4>)
 8003074:	fba3 2302 	umull	r2, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003080:	441c      	add	r4, r3
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800308c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	1891      	adds	r1, r2, r2
 800309a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800309c:	415b      	adcs	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030a4:	4641      	mov	r1, r8
 80030a6:	1851      	adds	r1, r2, r1
 80030a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80030aa:	4649      	mov	r1, r9
 80030ac:	414b      	adcs	r3, r1
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030bc:	4659      	mov	r1, fp
 80030be:	00cb      	lsls	r3, r1, #3
 80030c0:	4651      	mov	r1, sl
 80030c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c6:	4651      	mov	r1, sl
 80030c8:	00ca      	lsls	r2, r1, #3
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	4642      	mov	r2, r8
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030d8:	464b      	mov	r3, r9
 80030da:	460a      	mov	r2, r1
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030f8:	460b      	mov	r3, r1
 80030fa:	18db      	adds	r3, r3, r3
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	4613      	mov	r3, r2
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800310a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800310e:	f7fd f86b 	bl	80001e8 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <UART_SetConfig+0x2d4>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	@ 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	@ 0x32
 800312a:	4a08      	ldr	r2, [pc, #32]	@ (800314c <UART_SetConfig+0x2d4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4422      	add	r2, r4
 800313e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003140:	e106      	b.n	8003350 <UART_SetConfig+0x4d8>
 8003142:	bf00      	nop
 8003144:	40011000 	.word	0x40011000
 8003148:	40011400 	.word	0x40011400
 800314c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800315a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800315e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003162:	4642      	mov	r2, r8
 8003164:	464b      	mov	r3, r9
 8003166:	1891      	adds	r1, r2, r2
 8003168:	6239      	str	r1, [r7, #32]
 800316a:	415b      	adcs	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003172:	4641      	mov	r1, r8
 8003174:	1854      	adds	r4, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0501 	adc.w	r5, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	00eb      	lsls	r3, r5, #3
 8003186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318a:	00e2      	lsls	r2, r4, #3
 800318c:	4614      	mov	r4, r2
 800318e:	461d      	mov	r5, r3
 8003190:	4643      	mov	r3, r8
 8003192:	18e3      	adds	r3, r4, r3
 8003194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003198:	464b      	mov	r3, r9
 800319a:	eb45 0303 	adc.w	r3, r5, r3
 800319e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031be:	4629      	mov	r1, r5
 80031c0:	008b      	lsls	r3, r1, #2
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c8:	4621      	mov	r1, r4
 80031ca:	008a      	lsls	r2, r1, #2
 80031cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031d0:	f7fd f80a 	bl	80001e8 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b60      	ldr	r3, [pc, #384]	@ (800335c <UART_SetConfig+0x4e4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	61b9      	str	r1, [r7, #24]
 80031fc:	415b      	adcs	r3, r3
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003204:	4641      	mov	r1, r8
 8003206:	1851      	adds	r1, r2, r1
 8003208:	6139      	str	r1, [r7, #16]
 800320a:	4649      	mov	r1, r9
 800320c:	414b      	adcs	r3, r1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800321c:	4659      	mov	r1, fp
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4651      	mov	r1, sl
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4651      	mov	r1, sl
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4642      	mov	r2, r8
 8003232:	189b      	adds	r3, r3, r2
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003238:	464b      	mov	r3, r9
 800323a:	460a      	mov	r2, r1
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800324e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800325c:	4649      	mov	r1, r9
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003266:	4641      	mov	r1, r8
 8003268:	008a      	lsls	r2, r1, #2
 800326a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800326e:	f7fc ffbb 	bl	80001e8 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4611      	mov	r1, r2
 8003278:	4b38      	ldr	r3, [pc, #224]	@ (800335c <UART_SetConfig+0x4e4>)
 800327a:	fba3 2301 	umull	r2, r3, r3, r1
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	@ 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	@ 0x32
 800328c:	4a33      	ldr	r2, [pc, #204]	@ (800335c <UART_SetConfig+0x4e4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329e:	2200      	movs	r2, #0
 80032a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80032a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	415b      	adcs	r3, r3
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ea:	464b      	mov	r3, r9
 80032ec:	460a      	mov	r2, r1
 80032ee:	eb42 0303 	adc.w	r3, r2, r3
 80032f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800330c:	4649      	mov	r1, r9
 800330e:	008b      	lsls	r3, r1, #2
 8003310:	4641      	mov	r1, r8
 8003312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003316:	4641      	mov	r1, r8
 8003318:	008a      	lsls	r2, r1, #2
 800331a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800331e:	f7fc ff63 	bl	80001e8 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <UART_SetConfig+0x4e4>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	@ 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	3332      	adds	r3, #50	@ 0x32
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <UART_SetConfig+0x4e4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4422      	add	r2, r4
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003356:	46bd      	mov	sp, r7
 8003358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	7818      	ldrb	r0, [r3, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800337a:	b299      	uxth	r1, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 ffe2 	bl	800434a <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	7818      	ldrb	r0, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033aa:	b299      	uxth	r1, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f000 ffd9 	bl	8004368 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	7818      	ldrb	r0, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033da:	b299      	uxth	r1, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	78da      	ldrb	r2, [r3, #3]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	889b      	ldrh	r3, [r3, #4]
 80033e4:	b29c      	uxth	r4, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	88db      	ldrh	r3, [r3, #6]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4623      	mov	r3, r4
 80033f0:	f000 ffc9 	bl	8004386 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}

080033fe <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ffcb 	bl	80043ae <hci_hardware_error_event>

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b0a6      	sub	sp, #152	@ 0x98
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003442:	e02e      	b.n	80034a2 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8003444:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003454:	b29a      	uxth	r2, r3
 8003456:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3398      	adds	r3, #152	@ 0x98
 800345e:	443b      	add	r3, r7
 8003460:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003464:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003468:	3302      	adds	r3, #2
 800346a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800346e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003472:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800347e:	b29a      	uxth	r2, r3
 8003480:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3398      	adds	r3, #152	@ 0x98
 8003488:	443b      	add	r3, r7
 800348a:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800348e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003492:	3302      	adds	r3, #2
 8003494:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800349c:	3301      	adds	r3, #1
 800349e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034ae:	4293      	cmp	r3, r2
 80034b0:	dbc8      	blt.n	8003444 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 80034b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f107 0208 	add.w	r2, r7, #8
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff80 	bl	80043c4 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80034c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3798      	adds	r7, #152	@ 0x98
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 ff79 	bl	80043dc <hci_data_buffer_overflow_event>

  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 ff6d 	bl	80043f2 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f9f0 	bl	800491c <aci_blue_initialized_event>

  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f9ea 	bl	8004932 <aci_blue_events_lost_event>

  return status;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8003568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800356c:	b08d      	sub	sp, #52	@ 0x34
 800356e:	af08      	add	r7, sp, #32
 8003570:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f893 c000 	ldrb.w	ip, [r3]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	f8d1 1015 	ldr.w	r1, [r1, #21]
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f8d0 0019 	ldr.w	r0, [r0, #25]
 80035ac:	68bc      	ldr	r4, [r7, #8]
 80035ae:	f8d4 401d 	ldr.w	r4, [r4, #29]
 80035b2:	68bd      	ldr	r5, [r7, #8]
 80035b4:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 80035b8:	68be      	ldr	r6, [r7, #8]
 80035ba:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 80035c2:	9307      	str	r3, [sp, #28]
 80035c4:	9606      	str	r6, [sp, #24]
 80035c6:	9505      	str	r5, [sp, #20]
 80035c8:	9404      	str	r4, [sp, #16]
 80035ca:	9003      	str	r0, [sp, #12]
 80035cc:	9102      	str	r1, [sp, #8]
 80035ce:	9201      	str	r2, [sp, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	464b      	mov	r3, r9
 80035d6:	4642      	mov	r2, r8
 80035d8:	4671      	mov	r1, lr
 80035da:	4660      	mov	r0, ip
 80035dc:	f001 f9b3 	bl	8004946 <aci_blue_crash_info_event>

  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080035ec <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	7818      	ldrb	r0, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	7859      	ldrb	r1, [r3, #1]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800360a:	461a      	mov	r2, r3
 800360c:	f001 f9a9 	bl	8004962 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f993 0000 	ldrsb.w	r0, [r3]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8003638:	461a      	mov	r2, r3
 800363a:	f001 f9a0 	bl	800497e <aci_hal_scan_req_report_event>

  return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	7818      	ldrb	r0, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003664:	461a      	mov	r2, r3
 8003666:	f001 f998 	bl	800499a <aci_hal_fw_error_event>

  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8003680:	f000 ff4d 	bl	800451e <aci_gap_limited_discoverable_event>

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b298      	uxth	r0, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	7899      	ldrb	r1, [r3, #2]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	78db      	ldrb	r3, [r3, #3]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f000 ff3d 	bl	800452c <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 ff39 	bl	800454a <aci_gap_pass_key_req_event>

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 ff31 	bl	8004560 <aci_gap_authorization_req_event>

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8003714:	f000 ff2f 	bl	8004576 <aci_gap_slave_security_initiated_event>

  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800372e:	f000 ff29 	bl	8004584 <aci_gap_bond_lost_event>

  return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	7818      	ldrb	r0, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	7859      	ldrb	r1, [r3, #1]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800375c:	f000 ff19 	bl	8004592 <aci_gap_proc_complete_event>

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	4618      	mov	r0, r3
 8003782:	f000 ff16 	bl	80045b2 <aci_gap_addr_not_resolved_event>

  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 ff0a 	bl	80045c8 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	789b      	ldrb	r3, [r3, #2]
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 ff00 	bl	80045e0 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	885b      	ldrh	r3, [r3, #2]
 8003804:	b29b      	uxth	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f001 f843 	bl	8004894 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b298      	uxth	r0, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8003836:	461a      	mov	r2, r3
 8003838:	f001 f83a 	bl	80048b0 <aci_l2cap_proc_timeout_event>

  return status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8003846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003848:	b089      	sub	sp, #36	@ 0x24
 800384a:	af04      	add	r7, sp, #16
 800384c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b298      	uxth	r0, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	789c      	ldrb	r4, [r3, #2]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003866:	b29d      	uxth	r5, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800386e:	b29e      	uxth	r6, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003876:	b29b      	uxth	r3, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800387e:	b292      	uxth	r2, r2
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8003886:	b289      	uxth	r1, r1
 8003888:	9102      	str	r1, [sp, #8]
 800388a:	9201      	str	r2, [sp, #4]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4633      	mov	r3, r6
 8003890:	462a      	mov	r2, r5
 8003892:	4621      	mov	r1, r4
 8003894:	f001 f81a 	bl	80048cc <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038a2 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80038a2:	b590      	push	{r4, r7, lr}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af02      	add	r7, sp, #8
 80038a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b298      	uxth	r0, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	7899      	ldrb	r1, [r3, #2]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	4623      	mov	r3, r4
 80038d0:	f001 f810 	bl	80048f4 <aci_l2cap_command_reject_event>

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd90      	pop	{r4, r7, pc}

080038de <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80038de:	b590      	push	{r4, r7, lr}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af02      	add	r7, sp, #8
 80038e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b298      	uxth	r0, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	885b      	ldrh	r3, [r3, #2]
 80038f8:	b299      	uxth	r1, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	889b      	ldrh	r3, [r3, #4]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	88db      	ldrh	r3, [r3, #6]
 8003904:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4623      	mov	r3, r4
 800390e:	f7fd fa71 	bl	8000df4 <aci_gatt_attribute_modified_event>

  return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}

0800391c <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fe62 	bl	80045fc <aci_gatt_proc_timeout_event>

  return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29a      	uxth	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	885b      	ldrh	r3, [r3, #2]
 800395c:	b29b      	uxth	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 fe56 	bl	8004612 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8003966:	7bfb      	ldrb	r3, [r7, #15]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b298      	uxth	r0, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	7899      	ldrb	r1, [r3, #2]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003992:	f000 fe4c 	bl	800462e <aci_att_find_info_resp_event>

  return status;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0a6      	sub	sp, #152	@ 0x98
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 80039b4:	2303      	movs	r3, #3
 80039b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039c0:	e02e      	b.n	8003a20 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80039c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80039c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	3398      	adds	r3, #152	@ 0x98
 80039dc:	443b      	add	r3, r7
 80039de:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80039e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80039e6:	3302      	adds	r3, #2
 80039e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80039ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80039f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3398      	adds	r3, #152	@ 0x98
 8003a06:	443b      	add	r3, r7
 8003a08:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003a0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003a10:	3302      	adds	r3, #2
 8003a12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a24:	789b      	ldrb	r3, [r3, #2]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	dbc8      	blt.n	80039c2 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8003a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b298      	uxth	r0, r3
 8003a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a3c:	789b      	ldrb	r3, [r3, #2]
 8003a3e:	f107 0208 	add.w	r2, r7, #8
 8003a42:	4619      	mov	r1, r3
 8003a44:	f000 fe03 	bl	800464e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8003a48:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3798      	adds	r7, #152	@ 0x98
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b298      	uxth	r0, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	7899      	ldrb	r1, [r3, #2]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a76:	f000 fdf8 	bl	800466a <aci_att_read_by_type_resp_event>

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b298      	uxth	r0, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 fdf1 	bl	800468a <aci_att_read_resp_event>

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b298      	uxth	r0, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f000 fde8 	bl	80046a6 <aci_att_read_blob_resp_event>

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b298      	uxth	r0, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fddf 	bl	80046c2 <aci_att_read_multiple_resp_event>

  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b298      	uxth	r0, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	7899      	ldrb	r1, [r3, #2]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003b30:	f000 fdd5 	bl	80046de <aci_att_read_by_group_type_resp_event>

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8003b3e:	b590      	push	{r4, r7, lr}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af02      	add	r7, sp, #8
 8003b44:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b298      	uxth	r0, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	885b      	ldrh	r3, [r3, #2]
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	889b      	ldrh	r3, [r3, #4]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f000 fdc7 	bl	80046fe <aci_att_prepare_write_resp_event>

  return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fdc8 	bl	8004726 <aci_att_exec_write_resp_event>

  return status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b298      	uxth	r0, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	885b      	ldrh	r3, [r3, #2]
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003bc4:	f000 fdba 	bl	800473c <aci_gatt_indication_event>

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b298      	uxth	r0, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	885b      	ldrh	r3, [r3, #2]
 8003bec:	b299      	uxth	r1, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003bf6:	f000 fdb1 	bl	800475c <aci_gatt_notification_event>

  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f000 fdab 	bl	800477c <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b298      	uxth	r0, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	7899      	ldrb	r1, [r3, #2]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	795b      	ldrb	r3, [r3, #5]
 8003c56:	f000 fd9f 	bl	8004798 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	b298      	uxth	r0, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	885b      	ldrh	r3, [r3, #2]
 8003c7e:	b299      	uxth	r1, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c88:	f000 fd9a 	bl	80047c0 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b298      	uxth	r0, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	885b      	ldrh	r3, [r3, #2]
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003cba:	f000 fd91 	bl	80047e0 <aci_gatt_write_permit_req_event>

  return status;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b298      	uxth	r0, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	885b      	ldrh	r3, [r3, #2]
 8003ce2:	b299      	uxth	r1, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	889b      	ldrh	r3, [r3, #4]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 fd88 	bl	8004800 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b0a6      	sub	sp, #152	@ 0x98
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d1a:	e019      	b.n	8003d50 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8003d1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	3398      	adds	r3, #152	@ 0x98
 8003d36:	443b      	add	r3, r7
 8003d38:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003d3c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003d40:	3302      	adds	r3, #2
 8003d42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d54:	789b      	ldrb	r3, [r3, #2]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	dbdd      	blt.n	8003d1c <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8003d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b298      	uxth	r0, r3
 8003d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d6c:	789b      	ldrb	r3, [r3, #2]
 8003d6e:	f107 0208 	add.w	r2, r7, #8
 8003d72:	4619      	mov	r1, r3
 8003d74:	f000 fd53 	bl	800481e <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8003d78:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3798      	adds	r7, #152	@ 0x98
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	885b      	ldrh	r3, [r3, #2]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fd49 	bl	800483a <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fd44 	bl	8004856 <aci_gatt_server_confirmation_event>

  return status;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b298      	uxth	r0, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	885b      	ldrh	r3, [r3, #2]
 8003df2:	b299      	uxth	r1, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4623      	mov	r3, r4
 8003e06:	f000 fd31 	bl	800486c <aci_gatt_prepare_write_permit_req_event>

  return status;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}

08003e14 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8003e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e16:	b08b      	sub	sp, #44	@ 0x2c
 8003e18:	af06      	add	r7, sp, #24
 8003e1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781d      	ldrb	r5, [r3, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e2e:	b29e      	uxth	r6, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8003e46:	b292      	uxth	r2, r2
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8003e4e:	b289      	uxth	r1, r1
 8003e50:	68b8      	ldr	r0, [r7, #8]
 8003e52:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8003e56:	b280      	uxth	r0, r0
 8003e58:	68bc      	ldr	r4, [r7, #8]
 8003e5a:	7c64      	ldrb	r4, [r4, #17]
 8003e5c:	9404      	str	r4, [sp, #16]
 8003e5e:	9003      	str	r0, [sp, #12]
 8003e60:	9102      	str	r1, [sp, #8]
 8003e62:	9201      	str	r2, [sp, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4673      	mov	r3, lr
 8003e68:	4662      	mov	r2, ip
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7fc ffdb 	bl	8000e28 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e7c <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b0a4      	sub	sp, #144	@ 0x90
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e9c:	e0b3      	b.n	8004006 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8003e9e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003ea2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	7819      	ldrb	r1, [r3, #0]
 8003eb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	3390      	adds	r3, #144	@ 0x90
 8003ec4:	443b      	add	r3, r7
 8003ec6:	3b88      	subs	r3, #136	@ 0x88
 8003ec8:	460a      	mov	r2, r1
 8003eca:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003ecc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8003ed6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003eda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3302      	adds	r3, #2
 8003eec:	7819      	ldrb	r1, [r3, #0]
 8003eee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	3390      	adds	r3, #144	@ 0x90
 8003efc:	443b      	add	r3, r7
 8003efe:	3b87      	subs	r3, #135	@ 0x87
 8003f00:	460a      	mov	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003f04:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8003f0e:	f107 0108 	add.w	r1, r7, #8
 8003f12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	1c98      	adds	r0, r3, #2
 8003f22:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f34:	4413      	add	r3, r2
 8003f36:	3303      	adds	r3, #3
 8003f38:	2206      	movs	r2, #6
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f002 f873 	bl	8006026 <memcpy>
    size += 6;
 8003f40:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f44:	3306      	adds	r3, #6
 8003f46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8003f4a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003f4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3309      	adds	r3, #9
 8003f60:	7819      	ldrb	r1, [r3, #0]
 8003f62:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3390      	adds	r3, #144	@ 0x90
 8003f70:	443b      	add	r3, r7
 8003f72:	3b80      	subs	r3, #128	@ 0x80
 8003f74:	460a      	mov	r2, r1
 8003f76:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003f78:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8003f82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	3308      	adds	r3, #8
 8003f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f96:	4413      	add	r3, r2
 8003f98:	1c99      	adds	r1, r3, #2
 8003f9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	3390      	adds	r3, #144	@ 0x90
 8003fa8:	443b      	add	r3, r7
 8003faa:	3b7c      	subs	r3, #124	@ 0x7c
 8003fac:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8003fae:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3309      	adds	r3, #9
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003fca:	4413      	add	r3, r2
 8003fcc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8003fd0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b259      	sxtb	r1, r3
 8003fdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3390      	adds	r3, #144	@ 0x90
 8003fea:	443b      	add	r3, r7
 8003fec:	3b78      	subs	r3, #120	@ 0x78
 8003fee:	460a      	mov	r2, r1
 8003ff0:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003ff2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8003ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004000:	3301      	adds	r3, #1
 8004002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004006:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004012:	4293      	cmp	r3, r2
 8004014:	f6ff af43 	blt.w	8003e9e <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8004018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f9f2 	bl	800440e <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800402a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800402e:	4618      	mov	r0, r3
 8004030:	3790      	adds	r7, #144	@ 0x90
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8004036:	b590      	push	{r4, r7, lr}
 8004038:	b087      	sub	sp, #28
 800403a:	af02      	add	r7, sp, #8
 800403c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	7818      	ldrb	r0, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004050:	b299      	uxth	r1, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004058:	b29a      	uxth	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004060:	b29c      	uxth	r4, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004068:	b29b      	uxth	r3, r3
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4623      	mov	r3, r4
 800406e:	f000 f9da 	bl	8004426 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}

0800407c <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	7818      	ldrb	r0, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004096:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800409c:	461a      	mov	r2, r3
 800409e:	f000 f9d6 	bl	800444e <hci_le_read_remote_used_features_complete_event>

  return status;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	895b      	ldrh	r3, [r3, #10]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	f000 f9cc 	bl	800446a <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b087      	sub	sp, #28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b298      	uxth	r0, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	885b      	ldrh	r3, [r3, #2]
 80040f6:	b299      	uxth	r1, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	889b      	ldrh	r3, [r3, #4]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	88db      	ldrh	r3, [r3, #6]
 8004102:	b29c      	uxth	r4, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	891b      	ldrh	r3, [r3, #8]
 8004108:	b29b      	uxth	r3, r3
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4623      	mov	r3, r4
 800410e:	f000 f9ba 	bl	8004486 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}

0800411c <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f9b9 	bl	80044ae <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 f9b0 	bl	80044c6 <hci_le_generate_dhkey_complete_event>

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8004170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004174:	b08d      	sub	sp, #52	@ 0x34
 8004176:	af08      	add	r7, sp, #32
 8004178:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f893 c000 	ldrb.w	ip, [r3]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800418e:	fa1f fe83 	uxth.w	lr, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f893 8003 	ldrb.w	r8, [r3, #3]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80041aa:	68b8      	ldr	r0, [r7, #8]
 80041ac:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 80041b0:	b280      	uxth	r0, r0
 80041b2:	68bc      	ldr	r4, [r7, #8]
 80041b4:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 80041b8:	b2a4      	uxth	r4, r4
 80041ba:	68bd      	ldr	r5, [r7, #8]
 80041bc:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80041c0:	b2ad      	uxth	r5, r5
 80041c2:	68be      	ldr	r6, [r7, #8]
 80041c4:	7f76      	ldrb	r6, [r6, #29]
 80041c6:	9606      	str	r6, [sp, #24]
 80041c8:	9505      	str	r5, [sp, #20]
 80041ca:	9404      	str	r4, [sp, #16]
 80041cc:	9003      	str	r0, [sp, #12]
 80041ce:	9102      	str	r1, [sp, #8]
 80041d0:	9201      	str	r2, [sp, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	464b      	mov	r3, r9
 80041d6:	4642      	mov	r2, r8
 80041d8:	4671      	mov	r1, lr
 80041da:	4660      	mov	r0, ip
 80041dc:	f000 f97f 	bl	80044de <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041ec <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0a6      	sub	sp, #152	@ 0x98
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800420c:	e085      	b.n	800431a <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800420e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	3301      	adds	r3, #1
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	3398      	adds	r3, #152	@ 0x98
 8004226:	443b      	add	r3, r7
 8004228:	3b90      	subs	r3, #144	@ 0x90
 800422a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800422c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004230:	3301      	adds	r3, #1
 8004232:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8004236:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800423a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	4413      	add	r3, r2
 8004242:	3302      	adds	r3, #2
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	3398      	adds	r3, #152	@ 0x98
 800424e:	443b      	add	r3, r7
 8004250:	3b8f      	subs	r3, #143	@ 0x8f
 8004252:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004254:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004258:	3301      	adds	r3, #1
 800425a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800425e:	f107 0208 	add.w	r2, r7, #8
 8004262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	1c98      	adds	r0, r3, #2
 800426c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004276:	4413      	add	r3, r2
 8004278:	3303      	adds	r3, #3
 800427a:	2206      	movs	r2, #6
 800427c:	4619      	mov	r1, r3
 800427e:	f001 fed2 	bl	8006026 <memcpy>
    size += 6;
 8004282:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004286:	3306      	adds	r3, #6
 8004288:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800428c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	4413      	add	r3, r2
 8004298:	3309      	adds	r3, #9
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3398      	adds	r3, #152	@ 0x98
 80042a4:	443b      	add	r3, r7
 80042a6:	3b88      	subs	r3, #136	@ 0x88
 80042a8:	701a      	strb	r2, [r3, #0]
    size += 1;
 80042aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80042ae:	3301      	adds	r3, #1
 80042b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80042b4:	f107 0208 	add.w	r2, r7, #8
 80042b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3308      	adds	r3, #8
 80042c0:	4413      	add	r3, r2
 80042c2:	1c58      	adds	r0, r3, #1
 80042c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	3308      	adds	r3, #8
 80042cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80042d0:	4413      	add	r3, r2
 80042d2:	3302      	adds	r3, #2
 80042d4:	2206      	movs	r2, #6
 80042d6:	4619      	mov	r1, r3
 80042d8:	f001 fea5 	bl	8006026 <memcpy>
    size += 6;
 80042dc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80042e0:	3306      	adds	r3, #6
 80042e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80042e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80042ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	3310      	adds	r3, #16
 80042f4:	f993 2000 	ldrsb.w	r2, [r3]
 80042f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	3398      	adds	r3, #152	@ 0x98
 8004300:	443b      	add	r3, r7
 8004302:	3b81      	subs	r3, #129	@ 0x81
 8004304:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004306:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800430a:	3301      	adds	r3, #1
 800430c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8004310:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800431a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004326:	4293      	cmp	r3, r2
 8004328:	f6ff af71 	blt.w	800420e <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800432c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f107 0208 	add.w	r2, r7, #8
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f8e4 	bl	8004506 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800433e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004342:	4618      	mov	r0, r3
 8004344:	3798      	adds	r7, #152	@ 0x98
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <hci_disconnection_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason))
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	460b      	mov	r3, r1
 8004356:	80bb      	strh	r3, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_disconnection_complete_event\r\n");
            
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	71fb      	strb	r3, [r7, #7]
 8004372:	460b      	mov	r3, r1
 8004374:	80bb      	strh	r3, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8004386:	b490      	push	{r4, r7}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	4604      	mov	r4, r0
 800438e:	4608      	mov	r0, r1
 8004390:	4611      	mov	r1, r2
 8004392:	461a      	mov	r2, r3
 8004394:	4623      	mov	r3, r4
 8004396:	71fb      	strb	r3, [r7, #7]
 8004398:	4603      	mov	r3, r0
 800439a:	80bb      	strh	r3, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	71bb      	strb	r3, [r7, #6]
 80043a0:	4613      	mov	r3, r2
 80043a2:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc90      	pop	{r4, r7}
 80043ac:	4770      	bx	lr

080043ae <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	460a      	mov	r2, r1
 80043fc:	71fb      	strb	r3, [r7, #7]
 80043fe:	4613      	mov	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	6039      	str	r1, [r7, #0]
 8004418:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8004426:	b490      	push	{r4, r7}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	4604      	mov	r4, r0
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	461a      	mov	r2, r3
 8004434:	4623      	mov	r3, r4
 8004436:	71fb      	strb	r3, [r7, #7]
 8004438:	4603      	mov	r3, r0
 800443a:	80bb      	strh	r3, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
 8004440:	4613      	mov	r3, r2
 8004442:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bc90      	pop	{r4, r7}
 800444c:	4770      	bx	lr

0800444e <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	603a      	str	r2, [r7, #0]
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	460b      	mov	r3, r1
 800445c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	6039      	str	r1, [r7, #0]
 8004474:	80fb      	strh	r3, [r7, #6]
 8004476:	4613      	mov	r3, r2
 8004478:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8004486:	b490      	push	{r4, r7}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4604      	mov	r4, r0
 800448e:	4608      	mov	r0, r1
 8004490:	4611      	mov	r1, r2
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	80fb      	strh	r3, [r7, #6]
 8004498:	4603      	mov	r3, r0
 800449a:	80bb      	strh	r3, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc90      	pop	{r4, r7}
 80044ac:	4770      	bx	lr

080044ae <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	6039      	str	r1, [r7, #0]
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	4603      	mov	r3, r0
 80044ce:	6039      	str	r1, [r7, #0]
 80044d0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80044de:	b490      	push	{r4, r7}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4604      	mov	r4, r0
 80044e6:	4608      	mov	r0, r1
 80044e8:	4611      	mov	r1, r2
 80044ea:	461a      	mov	r2, r3
 80044ec:	4623      	mov	r3, r4
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	4603      	mov	r3, r0
 80044f2:	80bb      	strh	r3, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	71bb      	strb	r3, [r7, #6]
 80044f8:	4613      	mov	r3, r2
 80044fa:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bc90      	pop	{r4, r7}
 8004504:	4770      	bx	lr

08004506 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	6039      	str	r1, [r7, #0]
 8004510:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
 8004536:	460b      	mov	r3, r1
 8004538:	717b      	strb	r3, [r7, #5]
 800453a:	4613      	mov	r3, r2
 800453c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
 800459e:	460b      	mov	r3, r1
 80045a0:	71bb      	strb	r3, [r7, #6]
 80045a2:	4613      	mov	r3, r2
 80045a4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	460a      	mov	r2, r1
 80045ea:	80fb      	strh	r3, [r7, #6]
 80045ec:	4613      	mov	r3, r2
 80045ee:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	460a      	mov	r2, r1
 800461c:	80fb      	strh	r3, [r7, #6]
 800461e:	4613      	mov	r3, r2
 8004620:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
 800463a:	460b      	mov	r3, r1
 800463c:	717b      	strb	r3, [r7, #5]
 800463e:	4613      	mov	r3, r2
 8004640:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	603a      	str	r2, [r7, #0]
 8004658:	80fb      	strh	r3, [r7, #6]
 800465a:	460b      	mov	r3, r1
 800465c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
 8004676:	460b      	mov	r3, r1
 8004678:	717b      	strb	r3, [r7, #5]
 800467a:	4613      	mov	r3, r2
 800467c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	603a      	str	r2, [r7, #0]
 8004694:	80fb      	strh	r3, [r7, #6]
 8004696:	460b      	mov	r3, r1
 8004698:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	603a      	str	r2, [r7, #0]
 80046b0:	80fb      	strh	r3, [r7, #6]
 80046b2:	460b      	mov	r3, r1
 80046b4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	603a      	str	r2, [r7, #0]
 80046cc:	80fb      	strh	r3, [r7, #6]
 80046ce:	460b      	mov	r3, r1
 80046d0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
 80046ea:	460b      	mov	r3, r1
 80046ec:	717b      	strb	r3, [r7, #5]
 80046ee:	4613      	mov	r3, r2
 80046f0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 80046fe:	b490      	push	{r4, r7}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	80fb      	strh	r3, [r7, #6]
 8004710:	4603      	mov	r3, r0
 8004712:	80bb      	strh	r3, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bc90      	pop	{r4, r7}
 8004724:	4770      	bx	lr

08004726 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	4603      	mov	r3, r0
 8004746:	81fb      	strh	r3, [r7, #14]
 8004748:	460b      	mov	r3, r1
 800474a:	81bb      	strh	r3, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	4603      	mov	r3, r0
 8004766:	81fb      	strh	r3, [r7, #14]
 8004768:	460b      	mov	r3, r1
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	460a      	mov	r2, r1
 8004786:	80fb      	strh	r3, [r7, #6]
 8004788:	4613      	mov	r3, r2
 800478a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8004798:	b490      	push	{r4, r7}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	80fb      	strh	r3, [r7, #6]
 80047aa:	4603      	mov	r3, r0
 80047ac:	717b      	strb	r3, [r7, #5]
 80047ae:	460b      	mov	r3, r1
 80047b0:	807b      	strh	r3, [r7, #2]
 80047b2:	4613      	mov	r3, r2
 80047b4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc90      	pop	{r4, r7}
 80047be:	4770      	bx	lr

080047c0 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	4603      	mov	r3, r0
 80047ca:	81fb      	strh	r3, [r7, #14]
 80047cc:	460b      	mov	r3, r1
 80047ce:	81bb      	strh	r3, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	4603      	mov	r3, r0
 80047ea:	81fb      	strh	r3, [r7, #14]
 80047ec:	460b      	mov	r3, r1
 80047ee:	81bb      	strh	r3, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	80fb      	strh	r3, [r7, #6]
 800480a:	460b      	mov	r3, r1
 800480c:	80bb      	strh	r3, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	603a      	str	r2, [r7, #0]
 8004828:	80fb      	strh	r3, [r7, #6]
 800482a:	460b      	mov	r3, r1
 800482c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	4603      	mov	r3, r0
 8004842:	460a      	mov	r2, r1
 8004844:	80fb      	strh	r3, [r7, #6]
 8004846:	4613      	mov	r3, r2
 8004848:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800486c:	b490      	push	{r4, r7}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4623      	mov	r3, r4
 800487c:	80fb      	strh	r3, [r7, #6]
 800487e:	4603      	mov	r3, r0
 8004880:	80bb      	strh	r3, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	807b      	strh	r3, [r7, #2]
 8004886:	4613      	mov	r3, r2
 8004888:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bc90      	pop	{r4, r7}
 8004892:	4770      	bx	lr

08004894 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	460a      	mov	r2, r1
 800489e:	80fb      	strh	r3, [r7, #6]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	603a      	str	r2, [r7, #0]
 80048ba:	80fb      	strh	r3, [r7, #6]
 80048bc:	460b      	mov	r3, r1
 80048be:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80048cc:	b490      	push	{r4, r7}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	4603      	mov	r3, r0
 80048e0:	717b      	strb	r3, [r7, #5]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
 80048e6:	4613      	mov	r3, r2
 80048e8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc90      	pop	{r4, r7}
 80048f2:	4770      	bx	lr

080048f4 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80048f4:	b490      	push	{r4, r7}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4623      	mov	r3, r4
 8004904:	80fb      	strh	r3, [r7, #6]
 8004906:	4603      	mov	r3, r0
 8004908:	717b      	strb	r3, [r7, #5]
 800490a:	460b      	mov	r3, r1
 800490c:	807b      	strh	r3, [r7, #2]
 800490e:	4613      	mov	r3, r2
 8004910:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bc90      	pop	{r4, r7}
 800491a:	4770      	bx	lr

0800491c <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	603a      	str	r2, [r7, #0]
 800496c:	71fb      	strb	r3, [r7, #7]
 800496e:	460b      	mov	r3, r1
 8004970:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	603a      	str	r2, [r7, #0]
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	460b      	mov	r3, r1
 800498c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	603a      	str	r2, [r7, #0]
 80049a4:	71fb      	strb	r3, [r7, #7]
 80049a6:	460b      	mov	r3, r1
 80049a8:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	2218      	movs	r2, #24
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fab1 	bl	8005f30 <memset>
  rq.ogf = 0x03;
 80049ce:	2303      	movs	r3, #3
 80049d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80049d2:	2303      	movs	r3, #3
 80049d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80049de:	f107 0308 	add.w	r3, r7, #8
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fe03 	bl	80055f0 <hci_send_req>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da01      	bge.n	80049f4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80049f0:	23ff      	movs	r3, #255	@ 0xff
 80049f2:	e005      	b.n	8004a00 <hci_reset+0x4a>
  if (status) {
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <hci_reset+0x48>
    return status;
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	e000      	b.n	8004a00 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b0ce      	sub	sp, #312	@ 0x138
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4605      	mov	r5, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a1a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004a1e:	462a      	mov	r2, r5
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a32:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8004a36:	4602      	mov	r2, r0
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a3e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004a42:	460a      	mov	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a4e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004a52:	3308      	adds	r3, #8
 8004a54:	f107 020c 	add.w	r2, r7, #12
 8004a58:	4413      	add	r3, r2
 8004a5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a5e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004a62:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004a66:	4413      	add	r3, r2
 8004a68:	3309      	adds	r3, #9
 8004a6a:	f107 020c 	add.w	r2, r7, #12
 8004a6e:	4413      	add	r3, r2
 8004a70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a78:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a8a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004a8e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a96:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004aa4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004aa8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004ab2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ac0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ac4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8004ac8:	8812      	ldrh	r2, [r2, #0]
 8004aca:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004ace:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004ad8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004adc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ae0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004ae4:	7812      	ldrb	r2, [r2, #0]
 8004ae6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004ae8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004aec:	3301      	adds	r3, #1
 8004aee:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004af2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004af6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004afa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004afc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b00:	3301      	adds	r3, #1
 8004b02:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b0a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004b0e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004b10:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b14:	3301      	adds	r3, #1
 8004b16:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8004b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b1e:	3308      	adds	r3, #8
 8004b20:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004b24:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fa7c 	bl	8006026 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8004b2e:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004b32:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004b36:	4413      	add	r3, r2
 8004b38:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b40:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004b44:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b46:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8004b50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b54:	3301      	adds	r3, #1
 8004b56:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004b5a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fa61 	bl	8006026 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8004b64:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004b68:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b76:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8004b7a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b7c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b80:	3302      	adds	r3, #2
 8004b82:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b8a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8004b8e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004b90:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004b94:	3302      	adds	r3, #2
 8004b96:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b9e:	2218      	movs	r2, #24
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f9c4 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8004ba8:	233f      	movs	r3, #63	@ 0x3f
 8004baa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8004bae:	2383      	movs	r3, #131	@ 0x83
 8004bb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004bbc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004bc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004bc4:	f107 030b 	add.w	r3, r7, #11
 8004bc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004bd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd09 	bl	80055f0 <hci_send_req>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da01      	bge.n	8004be8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004be4:	23ff      	movs	r3, #255	@ 0xff
 8004be6:	e00d      	b.n	8004c04 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8004be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004bec:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <aci_gap_set_discoverable+0x1fa>
    return status;
 8004bf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004bfa:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	e000      	b.n	8004c04 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bdb0      	pop	{r4, r5, r7, pc}

08004c0e <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b0cf      	sub	sp, #316	@ 0x13c
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4604      	mov	r4, r0
 8004c16:	4608      	mov	r0, r1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004c1e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c28:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c34:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004c38:	4602      	mov	r2, r0
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c40:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004c44:	460a      	mov	r2, r1
 8004c46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	2207      	movs	r2, #7
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f969 	bl	8005f30 <memset>
  uint8_t index_input = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 8004c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c68:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004c6c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c74:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c82:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004c86:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004c8e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004c92:	3301      	adds	r3, #1
 8004c94:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c9c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ca0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004ca8:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004cac:	3301      	adds	r3, #1
 8004cae:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004cb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cb6:	2218      	movs	r2, #24
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 f938 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8004cc0:	233f      	movs	r3, #63	@ 0x3f
 8004cc2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 8004cc6:	238a      	movs	r3, #138	@ 0x8a
 8004cc8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8004cd4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8004cd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8004ce4:	2307      	movs	r3, #7
 8004ce6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8004cea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fc7d 	bl	80055f0 <hci_send_req>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da01      	bge.n	8004d00 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004cfc:	23ff      	movs	r3, #255	@ 0xff
 8004cfe:	e02e      	b.n	8004d5e <aci_gap_init+0x150>
  if (resp.Status) {
 8004d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <aci_gap_init+0x10c>
    return resp.Status;
 8004d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	e021      	b.n	8004d5e <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004d34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d3c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004d46:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d50:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d5a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd90      	pop	{r4, r7, pc}

08004d68 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	2218      	movs	r2, #24
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f8d8 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8004d80:	233f      	movs	r3, #63	@ 0x3f
 8004d82:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004d84:	f240 1301 	movw	r3, #257	@ 0x101
 8004d88:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d92:	f107 0308 	add.w	r3, r7, #8
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fc29 	bl	80055f0 <hci_send_req>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da01      	bge.n	8004da8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004da4:	23ff      	movs	r3, #255	@ 0xff
 8004da6:	e005      	b.n	8004db4 <aci_gatt_init+0x4c>
  if (status) {
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <aci_gatt_init+0x4a>
    return status;
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	e000      	b.n	8004db4 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b0cf      	sub	sp, #316	@ 0x13c
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8004dc8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8004dcc:	6001      	str	r1, [r0, #0]
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004dd6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004dda:	4622      	mov	r2, r4
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004de2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004de6:	4602      	mov	r2, r0
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004dee:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004df2:	460a      	mov	r2, r1
 8004df4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004df6:	f107 030c 	add.w	r3, r7, #12
 8004dfa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004dfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e02:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d00a      	beq.n	8004e22 <aci_gatt_add_service+0x66>
 8004e0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e10:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d101      	bne.n	8004e1e <aci_gatt_add_service+0x62>
 8004e1a:	2311      	movs	r3, #17
 8004e1c:	e002      	b.n	8004e24 <aci_gatt_add_service+0x68>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <aci_gatt_add_service+0x68>
 8004e22:	2303      	movs	r3, #3
 8004e24:	f107 020c 	add.w	r2, r7, #12
 8004e28:	4413      	add	r3, r2
 8004e2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	2203      	movs	r2, #3
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 f87a 	bl	8005f30 <memset>
  uint8_t index_input = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004e46:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004e4a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e52:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004e56:	3301      	adds	r3, #1
 8004e58:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004e5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e60:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <aci_gatt_add_service+0xb4>
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d004      	beq.n	8004e78 <aci_gatt_add_service+0xbc>
 8004e6e:	e007      	b.n	8004e80 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004e76:	e005      	b.n	8004e84 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004e7e:	e001      	b.n	8004e84 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004e80:	2347      	movs	r3, #71	@ 0x47
 8004e82:	e06c      	b.n	8004f5e <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004e88:	1c58      	adds	r0, r3, #1
 8004e8a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8004e8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004e92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	f001 f8c5 	bl	8006026 <memcpy>
    index_input += size;
 8004e9c:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8004ea0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004eae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004eb2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004eba:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ec8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004ecc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004ed4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ee2:	2218      	movs	r2, #24
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f822 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8004eec:	233f      	movs	r3, #63	@ 0x3f
 8004eee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8004ef2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004ef6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004efa:	f107 030c 	add.w	r3, r7, #12
 8004efe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004f02:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004f06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8004f0a:	f107 0308 	add.w	r3, r7, #8
 8004f0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8004f12:	2303      	movs	r3, #3
 8004f14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004f18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fb66 	bl	80055f0 <hci_send_req>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	da01      	bge.n	8004f2e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8004f2a:	23ff      	movs	r3, #255	@ 0xff
 8004f2c:	e017      	b.n	8004f5e <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8004f2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004f3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	e00a      	b.n	8004f5e <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004f48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004f5a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd90      	pop	{r4, r7, pc}

08004f68 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b0d1      	sub	sp, #324	@ 0x144
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8004f76:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8004f7a:	600a      	str	r2, [r1, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f82:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004f86:	4622      	mov	r2, r4
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f8e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004f92:	4602      	mov	r2, r0
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f9a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004faa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fae:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d00a      	beq.n	8004fce <aci_gatt_add_char+0x66>
 8004fb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fbc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d101      	bne.n	8004fca <aci_gatt_add_char+0x62>
 8004fc6:	2313      	movs	r3, #19
 8004fc8:	e002      	b.n	8004fd0 <aci_gatt_add_char+0x68>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e000      	b.n	8004fd0 <aci_gatt_add_char+0x68>
 8004fce:	2305      	movs	r3, #5
 8004fd0:	f107 0214 	add.w	r2, r7, #20
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004fda:	f107 0310 	add.w	r3, r7, #16
 8004fde:	2203      	movs	r2, #3
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 ffa4 	bl	8005f30 <memset>
  uint8_t index_input = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004fee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004ff2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8004ff6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004ffa:	8812      	ldrh	r2, [r2, #0]
 8004ffc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004ffe:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005002:	3302      	adds	r3, #2
 8005004:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005008:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800500c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005010:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005018:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800501c:	3301      	adds	r3, #1
 800501e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8005022:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005026:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d002      	beq.n	8005036 <aci_gatt_add_char+0xce>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d004      	beq.n	800503e <aci_gatt_add_char+0xd6>
 8005034:	e007      	b.n	8005046 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8005036:	2302      	movs	r3, #2
 8005038:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800503c:	e005      	b.n	800504a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800503e:	2310      	movs	r3, #16
 8005040:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005044:	e001      	b.n	800504a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005046:	2347      	movs	r3, #71	@ 0x47
 8005048:	e091      	b.n	800516e <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800504a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800504e:	1cd8      	adds	r0, r3, #3
 8005050:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005054:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005058:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	f000 ffe2 	bl	8006026 <memcpy>
    index_input += size;
 8005062:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8005066:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800506a:	4413      	add	r3, r2
 800506c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005070:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005074:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005078:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005080:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005084:	3302      	adds	r3, #2
 8005086:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800508a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800508e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005092:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005094:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005098:	3301      	adds	r3, #1
 800509a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800509e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80050a6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80050a8:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050ac:	3301      	adds	r3, #1
 80050ae:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80050b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050b6:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80050ba:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80050bc:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050c0:	3301      	adds	r3, #1
 80050c2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80050c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050ca:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80050ce:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80050d0:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050d4:	3301      	adds	r3, #1
 80050d6:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80050da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050de:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80050e2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80050e4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80050e8:	3301      	adds	r3, #1
 80050ea:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80050f2:	2218      	movs	r2, #24
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 ff1a 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 80050fc:	233f      	movs	r3, #63	@ 0x3f
 80050fe:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005102:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005106:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800510a:	f107 0314 	add.w	r3, r7, #20
 800510e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005112:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8005116:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800511a:	f107 0310 	add.w	r3, r7, #16
 800511e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005122:	2303      	movs	r3, #3
 8005124:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005128:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fa5e 	bl	80055f0 <hci_send_req>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	da01      	bge.n	800513e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800513a:	23ff      	movs	r3, #255	@ 0xff
 800513c:	e017      	b.n	800516e <aci_gatt_add_char+0x206>
  if (resp.Status) {
 800513e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800514c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005150:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	e00a      	b.n	800516e <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005158:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005160:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005164:	b29a      	uxth	r2, r3
 8005166:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800516a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b0cc      	sub	sp, #304	@ 0x130
 800517c:	af00      	add	r7, sp, #0
 800517e:	4605      	mov	r5, r0
 8005180:	460c      	mov	r4, r1
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800518a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800518e:	462a      	mov	r2, r5
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005196:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800519a:	4622      	mov	r2, r4
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051a2:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80051a6:	4602      	mov	r2, r0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051ae:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80051b2:	460a      	mov	r2, r1
 80051b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80051be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051c2:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80051d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80051d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80051dc:	8812      	ldrh	r2, [r2, #0]
 80051de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80051e0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80051e4:	3302      	adds	r3, #2
 80051e6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80051ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80051f2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80051fa:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80051fe:	3302      	adds	r3, #2
 8005200:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005208:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800520c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005214:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005218:	3301      	adds	r3, #1
 800521a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005222:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005226:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800522e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005232:	3301      	adds	r3, #1
 8005234:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800523c:	1d98      	adds	r0, r3, #6
 800523e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005242:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800524e:	f000 feea 	bl	8006026 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8005252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005256:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800525a:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	4413      	add	r3, r2
 8005262:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800526a:	2218      	movs	r2, #24
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fe5e 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8005274:	233f      	movs	r3, #63	@ 0x3f
 8005276:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800527a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800527e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005282:	f107 030c 	add.w	r3, r7, #12
 8005286:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800528a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800528e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005292:	f107 030b 	add.w	r3, r7, #11
 8005296:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80052a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f9a2 	bl	80055f0 <hci_send_req>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da01      	bge.n	80052b6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80052b2:	23ff      	movs	r3, #255	@ 0xff
 80052b4:	e00d      	b.n	80052d2 <aci_gatt_update_char_value+0x15a>
  if (status) {
 80052b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052ba:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <aci_gatt_update_char_value+0x158>
    return status;
 80052c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052c8:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	e000      	b.n	80052d2 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b0cc      	sub	sp, #304	@ 0x130
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80052f4:	4602      	mov	r2, r0
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005300:	460a      	mov	r2, r1
 8005302:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800530c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005310:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005322:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005326:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800532a:	7812      	ldrb	r2, [r2, #0]
 800532c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800532e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005332:	3301      	adds	r3, #1
 8005334:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 8005338:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800533c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005340:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005348:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800534c:	3301      	adds	r3, #1
 800534e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005356:	1c98      	adds	r0, r3, #2
 8005358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800535c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	f000 fe5b 	bl	8006026 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8005370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005374:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005378:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4413      	add	r3, r2
 8005380:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005384:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005388:	2218      	movs	r2, #24
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fdcf 	bl	8005f30 <memset>
  rq.ogf = 0x3f;
 8005392:	233f      	movs	r3, #63	@ 0x3f
 8005394:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8005398:	230c      	movs	r3, #12
 800539a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80053a6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80053aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80053ae:	f107 030b 	add.w	r3, r7, #11
 80053b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80053bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f914 	bl	80055f0 <hci_send_req>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da01      	bge.n	80053d2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80053ce:	23ff      	movs	r3, #255	@ 0xff
 80053d0:	e00d      	b.n	80053ee <aci_hal_write_config_data+0x112>
  if (status) {
 80053d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053d6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <aci_hal_write_config_data+0x110>
    return status;
 80053e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053e4:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	e000      	b.n	80053ee <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3308      	adds	r3, #8
 8005404:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d001      	beq.n	8005412 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800540e:	2301      	movs	r3, #1
 8005410:	e00c      	b.n	800542c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3302      	adds	r3, #2
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005420:	3b03      	subs	r3, #3
 8005422:	429a      	cmp	r2, r3
 8005424:	d001      	beq.n	800542a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005426:	2302      	movs	r3, #2
 8005428:	e000      	b.n	800542c <verify_packet+0x34>
  
  return 0;      
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b0a6      	sub	sp, #152	@ 0x98
 800543c:	af00      	add	r7, sp, #0
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	4603      	mov	r3, r0
 8005442:	81fb      	strh	r3, [r7, #14]
 8005444:	460b      	mov	r3, r1
 8005446:	81bb      	strh	r3, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800544c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005454:	b21a      	sxth	r2, r3
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	029b      	lsls	r3, r3, #10
 800545a:	b21b      	sxth	r3, r3
 800545c:	4313      	orrs	r3, r2
 800545e:	b21b      	sxth	r3, r3
 8005460:	b29b      	uxth	r3, r3
 8005462:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005464:	7afb      	ldrb	r3, [r7, #11]
 8005466:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005468:	2301      	movs	r3, #1
 800546a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800546c:	f107 0318 	add.w	r3, r7, #24
 8005470:	3301      	adds	r3, #1
 8005472:	461a      	mov	r2, r3
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	8819      	ldrh	r1, [r3, #0]
 800547a:	789b      	ldrb	r3, [r3, #2]
 800547c:	8011      	strh	r1, [r2, #0]
 800547e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005480:	f107 0318 	add.w	r3, r7, #24
 8005484:	3304      	adds	r3, #4
 8005486:	7afa      	ldrb	r2, [r7, #11]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fdcb 	bl	8006026 <memcpy>
  
  if (hciContext.io.Send)
 8005490:	4b08      	ldr	r3, [pc, #32]	@ (80054b4 <send_cmd+0x7c>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005498:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <send_cmd+0x7c>)
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	7afa      	ldrb	r2, [r7, #11]
 800549e:	b292      	uxth	r2, r2
 80054a0:	3204      	adds	r2, #4
 80054a2:	b291      	uxth	r1, r2
 80054a4:	f107 0218 	add.w	r2, r7, #24
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
  }
}
 80054ac:	bf00      	nop
 80054ae:	3798      	adds	r7, #152	@ 0x98
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200007d0 	.word	0x200007d0

080054b8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80054c2:	e00a      	b.n	80054da <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	4619      	mov	r1, r3
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f000 fae8 	bl	8005aa0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa4f 	bl	8005978 <list_insert_head>
  while (!list_is_empty(src_list))
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f000 fa2a 	bl	8005934 <list_is_empty>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ee      	beq.n	80054c4 <move_list+0xc>
  }
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80054f6:	e009      	b.n	800550c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4809      	ldr	r0, [pc, #36]	@ (8005524 <free_event_list+0x34>)
 80054fe:	f000 faa8 	bl	8005a52 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4619      	mov	r1, r3
 8005506:	4808      	ldr	r0, [pc, #32]	@ (8005528 <free_event_list+0x38>)
 8005508:	f000 fa5c 	bl	80059c4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800550c:	4806      	ldr	r0, [pc, #24]	@ (8005528 <free_event_list+0x38>)
 800550e:	f000 faee 	bl	8005aee <list_get_size>
 8005512:	4603      	mov	r3, r0
 8005514:	2b04      	cmp	r3, #4
 8005516:	ddef      	ble.n	80054f8 <free_event_list+0x8>
  }
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000250 	.word	0x20000250
 8005528:	20000248 	.word	0x20000248

0800552c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800553c:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <hci_init+0x74>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005542:	4818      	ldr	r0, [pc, #96]	@ (80055a4 <hci_init+0x78>)
 8005544:	f000 f9e6 	bl	8005914 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005548:	4817      	ldr	r0, [pc, #92]	@ (80055a8 <hci_init+0x7c>)
 800554a:	f000 f9e3 	bl	8005914 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800554e:	f7fb f933 	bl	80007b8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
 8005556:	e00c      	b.n	8005572 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	228c      	movs	r2, #140	@ 0x8c
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <hci_init+0x80>)
 8005562:	4413      	add	r3, r2
 8005564:	4619      	mov	r1, r3
 8005566:	480f      	ldr	r0, [pc, #60]	@ (80055a4 <hci_init+0x78>)
 8005568:	f000 fa2c 	bl	80059c4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	3301      	adds	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b09      	cmp	r3, #9
 8005576:	d9ef      	bls.n	8005558 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <hci_init+0x74>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <hci_init+0x5c>
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <hci_init+0x74>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2000      	movs	r0, #0
 8005586:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <hci_init+0x74>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <hci_init+0x6a>
 8005590:	4b03      	ldr	r3, [pc, #12]	@ (80055a0 <hci_init+0x74>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4798      	blx	r3
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200007d0 	.word	0x200007d0
 80055a4:	20000248 	.word	0x20000248
 80055a8:	20000250 	.word	0x20000250
 80055ac:	20000258 	.word	0x20000258

080055b0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a0b      	ldr	r2, [pc, #44]	@ (80055ec <hci_register_io_bus+0x3c>)
 80055be:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <hci_register_io_bus+0x3c>)
 80055c6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <hci_register_io_bus+0x3c>)
 80055ce:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4a05      	ldr	r2, [pc, #20]	@ (80055ec <hci_register_io_bus+0x3c>)
 80055d6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a03      	ldr	r2, [pc, #12]	@ (80055ec <hci_register_io_bus+0x3c>)
 80055de:	6093      	str	r3, [r2, #8]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	200007d0 	.word	0x200007d0

080055f0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	885b      	ldrh	r3, [r3, #2]
 8005600:	b21b      	sxth	r3, r3
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	b21a      	sxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b21b      	sxth	r3, r3
 8005610:	4313      	orrs	r3, r2
 8005612:	b21b      	sxth	r3, r3
 8005614:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f978 	bl	8005914 <list_init_head>

  free_event_list();
 8005624:	f7ff ff64 	bl	80054f0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8818      	ldrh	r0, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8859      	ldrh	r1, [r3, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f7ff fefd 	bl	8005438 <send_cmd>
  
  if (async)
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <hci_send_req+0x58>
  {
    return 0;
 8005644:	2300      	movs	r3, #0
 8005646:	e0e2      	b.n	800580e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005648:	f7fb ff84 	bl	8001554 <HAL_GetTick>
 800564c:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800564e:	f7fb ff81 	bl	8001554 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800565c:	f200 80b3 	bhi.w	80057c6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005660:	486d      	ldr	r0, [pc, #436]	@ (8005818 <hci_send_req+0x228>)
 8005662:	f000 f967 	bl	8005934 <list_is_empty>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d000      	beq.n	800566e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800566c:	e7ef      	b.n	800564e <hci_send_req+0x5e>
      {
        break;
 800566e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005670:	f107 0310 	add.w	r3, r7, #16
 8005674:	4619      	mov	r1, r3
 8005676:	4868      	ldr	r0, [pc, #416]	@ (8005818 <hci_send_req+0x228>)
 8005678:	f000 f9eb 	bl	8005a52 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3308      	adds	r3, #8
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d17f      	bne.n	800578a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	3301      	adds	r3, #1
 800568e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3308      	adds	r3, #8
 8005694:	3303      	adds	r3, #3
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800569e:	3b03      	subs	r3, #3
 80056a0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80056a8:	d04c      	beq.n	8005744 <hci_send_req+0x154>
 80056aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80056ac:	dc68      	bgt.n	8005780 <hci_send_req+0x190>
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	f000 808b 	beq.w	80057ca <hci_send_req+0x1da>
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	dc63      	bgt.n	8005780 <hci_send_req+0x190>
 80056b8:	2b0e      	cmp	r3, #14
 80056ba:	d023      	beq.n	8005704 <hci_send_req+0x114>
 80056bc:	2b0f      	cmp	r3, #15
 80056be:	d15f      	bne.n	8005780 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	885b      	ldrh	r3, [r3, #2]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d17e      	bne.n	80057ce <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b0f      	cmp	r3, #15
 80056d6:	d004      	beq.n	80056e2 <hci_send_req+0xf2>
          if (cs->status) {
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d051      	beq.n	8005784 <hci_send_req+0x194>
            goto failed;
 80056e0:	e078      	b.n	80057d4 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf28      	it	cs
 80056ec:	461a      	movcs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6918      	ldr	r0, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	461a      	mov	r2, r3
 80056fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056fe:	f000 fc92 	bl	8006026 <memcpy>
        goto done;
 8005702:	e078      	b.n	80057f6 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800570e:	b29b      	uxth	r3, r3
 8005710:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005712:	429a      	cmp	r2, r3
 8005714:	d15d      	bne.n	80057d2 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	3303      	adds	r3, #3
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	3b03      	subs	r3, #3
 8005720:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	429a      	cmp	r2, r3
 800572a:	bf28      	it	cs
 800572c:	461a      	movcs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6918      	ldr	r0, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	461a      	mov	r2, r3
 800573c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800573e:	f000 fc72 	bl	8006026 <memcpy>
        goto done;
 8005742:	e058      	b.n	80057f6 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d118      	bne.n	8005788 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	3b01      	subs	r3, #1
 800575a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	429a      	cmp	r2, r3
 8005764:	bf28      	it	cs
 8005766:	461a      	movcs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6918      	ldr	r0, [r3, #16]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	1c59      	adds	r1, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	461a      	mov	r2, r3
 800577a:	f000 fc54 	bl	8006026 <memcpy>
        goto done;
 800577e:	e03a      	b.n	80057f6 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8005780:	bf00      	nop
 8005782:	e002      	b.n	800578a <hci_send_req+0x19a>
          break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <hci_send_req+0x19a>
          break;
 8005788:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800578a:	4824      	ldr	r0, [pc, #144]	@ (800581c <hci_send_req+0x22c>)
 800578c:	f000 f8d2 	bl	8005934 <list_is_empty>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <hci_send_req+0x1c2>
 8005796:	4820      	ldr	r0, [pc, #128]	@ (8005818 <hci_send_req+0x228>)
 8005798:	f000 f8cc 	bl	8005934 <list_is_empty>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4619      	mov	r1, r3
 80057a6:	481d      	ldr	r0, [pc, #116]	@ (800581c <hci_send_req+0x22c>)
 80057a8:	f000 f90c 	bl	80059c4 <list_insert_tail>
      hciReadPacket=NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e008      	b.n	80057c4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f902 	bl	80059c4 <list_insert_tail>
      hciReadPacket=NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  {
 80057c4:	e740      	b.n	8005648 <hci_send_req+0x58>
        goto failed;
 80057c6:	bf00      	nop
 80057c8:	e004      	b.n	80057d4 <hci_send_req+0x1e4>
        goto failed;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <hci_send_req+0x1e4>
          goto failed;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <hci_send_req+0x1e4>
          goto failed;
 80057d2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	4619      	mov	r1, r3
 80057de:	480f      	ldr	r0, [pc, #60]	@ (800581c <hci_send_req+0x22c>)
 80057e0:	f000 f8ca 	bl	8005978 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	480b      	ldr	r0, [pc, #44]	@ (8005818 <hci_send_req+0x228>)
 80057ec:	f7ff fe64 	bl	80054b8 <move_list>

  return -1;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	e00b      	b.n	800580e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4619      	mov	r1, r3
 80057fa:	4808      	ldr	r0, [pc, #32]	@ (800581c <hci_send_req+0x22c>)
 80057fc:	f000 f8bc 	bl	8005978 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005800:	f107 0308 	add.w	r3, r7, #8
 8005804:	4619      	mov	r1, r3
 8005806:	4804      	ldr	r0, [pc, #16]	@ (8005818 <hci_send_req+0x228>)
 8005808:	f7ff fe56 	bl	80054b8 <move_list>

  return 0;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3738      	adds	r7, #56	@ 0x38
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000250 	.word	0x20000250
 800581c:	20000248 	.word	0x20000248

08005820 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800582a:	e013      	b.n	8005854 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	4619      	mov	r1, r3
 8005830:	480e      	ldr	r0, [pc, #56]	@ (800586c <hci_user_evt_proc+0x4c>)
 8005832:	f000 f90e 	bl	8005a52 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005836:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <hci_user_evt_proc+0x50>)
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <hci_user_evt_proc+0x50>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	3208      	adds	r2, #8
 8005846:	4610      	mov	r0, r2
 8005848:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4619      	mov	r1, r3
 800584e:	4809      	ldr	r0, [pc, #36]	@ (8005874 <hci_user_evt_proc+0x54>)
 8005850:	f000 f8b8 	bl	80059c4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005854:	4805      	ldr	r0, [pc, #20]	@ (800586c <hci_user_evt_proc+0x4c>)
 8005856:	f000 f86d 	bl	8005934 <list_is_empty>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0e5      	beq.n	800582c <hci_user_evt_proc+0xc>
  }
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000250 	.word	0x20000250
 8005870:	200007d0 	.word	0x200007d0
 8005874:	20000248 	.word	0x20000248

08005878 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005888:	481f      	ldr	r0, [pc, #124]	@ (8005908 <hci_notify_asynch_evt+0x90>)
 800588a:	f000 f853 	bl	8005934 <list_is_empty>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d132      	bne.n	80058fa <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	4619      	mov	r1, r3
 800589a:	481b      	ldr	r0, [pc, #108]	@ (8005908 <hci_notify_asynch_evt+0x90>)
 800589c:	f000 f8d9 	bl	8005a52 <list_remove_head>
    
    if (hciContext.io.Receive)
 80058a0:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <hci_notify_asynch_evt+0x94>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02a      	beq.n	80058fe <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80058a8:	4b18      	ldr	r3, [pc, #96]	@ (800590c <hci_notify_asynch_evt+0x94>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	3208      	adds	r2, #8
 80058b0:	2180      	movs	r1, #128	@ 0x80
 80058b2:	4610      	mov	r0, r2
 80058b4:	4798      	blx	r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	7cfa      	ldrb	r2, [r7, #19]
 80058c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fd94 	bl	80053f8 <verify_packet>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4619      	mov	r1, r3
 80058da:	480d      	ldr	r0, [pc, #52]	@ (8005910 <hci_notify_asynch_evt+0x98>)
 80058dc:	f000 f872 	bl	80059c4 <list_insert_tail>
 80058e0:	e00d      	b.n	80058fe <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4808      	ldr	r0, [pc, #32]	@ (8005908 <hci_notify_asynch_evt+0x90>)
 80058e8:	f000 f846 	bl	8005978 <list_insert_head>
 80058ec:	e007      	b.n	80058fe <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4619      	mov	r1, r3
 80058f2:	4805      	ldr	r0, [pc, #20]	@ (8005908 <hci_notify_asynch_evt+0x90>)
 80058f4:	f000 f840 	bl	8005978 <list_insert_head>
 80058f8:	e001      	b.n	80058fe <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80058fe:	697b      	ldr	r3, [r7, #20]
  
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000248 	.word	0x20000248
 800590c:	200007d0 	.word	0x200007d0
 8005910:	20000250 	.word	0x20000250

08005914 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	605a      	str	r2, [r3, #4]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593c:	f3ef 8310 	mrs	r3, PRIMASK
 8005940:	60fb      	str	r3, [r7, #12]
  return(result);
 8005942:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005946:	b672      	cpsid	i
}
 8005948:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d102      	bne.n	800595a <list_is_empty+0x26>
  {
    return_value = 1;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
 8005958:	e001      	b.n	800595e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f383 8810 	msr	PRIMASK, r3
}
 8005968:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005982:	f3ef 8310 	mrs	r3, PRIMASK
 8005986:	60fb      	str	r3, [r7, #12]
  return(result);
 8005988:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800598a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800598c:	b672      	cpsid	i
}
 800598e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ce:	f3ef 8310 	mrs	r3, PRIMASK
 80059d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059d8:	b672      	cpsid	i
}
 80059da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a18:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a22:	b672      	cpsid	i
}
 8005a24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6852      	ldr	r2, [r2, #4]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f383 8810 	msr	PRIMASK, r3
}
 8005a44:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a62:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a66:	b672      	cpsid	i
}
 8005a68:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff ffca 	bl	8005a10 <list_remove_node>
  (*node)->next = NULL;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f383 8810 	msr	PRIMASK, r3
}
 8005a96:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005aae:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab4:	b672      	cpsid	i
}
 8005ab6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ffa3 	bl	8005a10 <list_remove_node>
  (*node)->next = NULL;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f383 8810 	msr	PRIMASK, r3
}
 8005ae4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b089      	sub	sp, #36	@ 0x24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	613b      	str	r3, [r7, #16]
  return(result);
 8005b00:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b04:	b672      	cpsid	i
}
 8005b06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005b0e:	e005      	b.n	8005b1c <list_get_size+0x2e>
  {
    size++;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	3301      	adds	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d1f5      	bne.n	8005b10 <list_get_size+0x22>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f383 8810 	msr	PRIMASK, r3
}
 8005b2e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005b30:	69fb      	ldr	r3, [r7, #28]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3724      	adds	r7, #36	@ 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <std>:
 8005b40:	2300      	movs	r3, #0
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4e:	6083      	str	r3, [r0, #8]
 8005b50:	8181      	strh	r1, [r0, #12]
 8005b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b54:	81c2      	strh	r2, [r0, #14]
 8005b56:	6183      	str	r3, [r0, #24]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	305c      	adds	r0, #92	@ 0x5c
 8005b5e:	f000 f9e7 	bl	8005f30 <memset>
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x58>)
 8005b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x5c>)
 8005b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <std+0x60>)
 8005b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <std+0x64>)
 8005b70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <std+0x68>)
 8005b74:	6224      	str	r4, [r4, #32]
 8005b76:	429c      	cmp	r4, r3
 8005b78:	d006      	beq.n	8005b88 <std+0x48>
 8005b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b7e:	4294      	cmp	r4, r2
 8005b80:	d002      	beq.n	8005b88 <std+0x48>
 8005b82:	33d0      	adds	r3, #208	@ 0xd0
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d105      	bne.n	8005b94 <std+0x54>
 8005b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f000 ba46 	b.w	8006020 <__retarget_lock_init_recursive>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	08005d81 	.word	0x08005d81
 8005b9c:	08005da3 	.word	0x08005da3
 8005ba0:	08005ddb 	.word	0x08005ddb
 8005ba4:	08005dff 	.word	0x08005dff
 8005ba8:	200007f0 	.word	0x200007f0

08005bac <stdio_exit_handler>:
 8005bac:	4a02      	ldr	r2, [pc, #8]	@ (8005bb8 <stdio_exit_handler+0xc>)
 8005bae:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <stdio_exit_handler+0x10>)
 8005bb0:	4803      	ldr	r0, [pc, #12]	@ (8005bc0 <stdio_exit_handler+0x14>)
 8005bb2:	f000 b869 	b.w	8005c88 <_fwalk_sglue>
 8005bb6:	bf00      	nop
 8005bb8:	20000014 	.word	0x20000014
 8005bbc:	0800633d 	.word	0x0800633d
 8005bc0:	20000024 	.word	0x20000024

08005bc4 <cleanup_stdio>:
 8005bc4:	6841      	ldr	r1, [r0, #4]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <cleanup_stdio+0x34>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	d001      	beq.n	8005bd4 <cleanup_stdio+0x10>
 8005bd0:	f000 fbb4 	bl	800633c <_fflush_r>
 8005bd4:	68a1      	ldr	r1, [r4, #8]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <cleanup_stdio+0x38>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <cleanup_stdio+0x1e>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 fbad 	bl	800633c <_fflush_r>
 8005be2:	68e1      	ldr	r1, [r4, #12]
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <cleanup_stdio+0x3c>)
 8005be6:	4299      	cmp	r1, r3
 8005be8:	d004      	beq.n	8005bf4 <cleanup_stdio+0x30>
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf0:	f000 bba4 	b.w	800633c <_fflush_r>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200007f0 	.word	0x200007f0
 8005bfc:	20000858 	.word	0x20000858
 8005c00:	200008c0 	.word	0x200008c0

08005c04 <global_stdio_init.part.0>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <global_stdio_init.part.0+0x30>)
 8005c08:	4c0b      	ldr	r4, [pc, #44]	@ (8005c38 <global_stdio_init.part.0+0x34>)
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c3c <global_stdio_init.part.0+0x38>)
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	2200      	movs	r2, #0
 8005c12:	2104      	movs	r1, #4
 8005c14:	f7ff ff94 	bl	8005b40 <std>
 8005c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2109      	movs	r1, #9
 8005c20:	f7ff ff8e 	bl	8005b40 <std>
 8005c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c28:	2202      	movs	r2, #2
 8005c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2e:	2112      	movs	r1, #18
 8005c30:	f7ff bf86 	b.w	8005b40 <std>
 8005c34:	20000928 	.word	0x20000928
 8005c38:	200007f0 	.word	0x200007f0
 8005c3c:	08005bad 	.word	0x08005bad

08005c40 <__sfp_lock_acquire>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__sfp_lock_acquire+0x8>)
 8005c42:	f000 b9ee 	b.w	8006022 <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	20000931 	.word	0x20000931

08005c4c <__sfp_lock_release>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	@ (8005c54 <__sfp_lock_release+0x8>)
 8005c4e:	f000 b9e9 	b.w	8006024 <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	20000931 	.word	0x20000931

08005c58 <__sinit>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	f7ff fff0 	bl	8005c40 <__sfp_lock_acquire>
 8005c60:	6a23      	ldr	r3, [r4, #32]
 8005c62:	b11b      	cbz	r3, 8005c6c <__sinit+0x14>
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f7ff bff0 	b.w	8005c4c <__sfp_lock_release>
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <__sinit+0x28>)
 8005c6e:	6223      	str	r3, [r4, #32]
 8005c70:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <__sinit+0x2c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f5      	bne.n	8005c64 <__sinit+0xc>
 8005c78:	f7ff ffc4 	bl	8005c04 <global_stdio_init.part.0>
 8005c7c:	e7f2      	b.n	8005c64 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08005bc5 	.word	0x08005bc5
 8005c84:	20000928 	.word	0x20000928

08005c88 <_fwalk_sglue>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	4688      	mov	r8, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	2600      	movs	r6, #0
 8005c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c98:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9c:	d505      	bpl.n	8005caa <_fwalk_sglue+0x22>
 8005c9e:	6824      	ldr	r4, [r4, #0]
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	d1f7      	bne.n	8005c94 <_fwalk_sglue+0xc>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d907      	bls.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	4306      	orrs	r6, r0
 8005cc0:	3568      	adds	r5, #104	@ 0x68
 8005cc2:	e7e9      	b.n	8005c98 <_fwalk_sglue+0x10>

08005cc4 <_puts_r>:
 8005cc4:	6a03      	ldr	r3, [r0, #32]
 8005cc6:	b570      	push	{r4, r5, r6, lr}
 8005cc8:	6884      	ldr	r4, [r0, #8]
 8005cca:	4605      	mov	r5, r0
 8005ccc:	460e      	mov	r6, r1
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_puts_r+0x10>
 8005cd0:	f7ff ffc2 	bl	8005c58 <__sinit>
 8005cd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d405      	bmi.n	8005ce6 <_puts_r+0x22>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	0598      	lsls	r0, r3, #22
 8005cde:	d402      	bmi.n	8005ce6 <_puts_r+0x22>
 8005ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ce2:	f000 f99e 	bl	8006022 <__retarget_lock_acquire_recursive>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	0719      	lsls	r1, r3, #28
 8005cea:	d502      	bpl.n	8005cf2 <_puts_r+0x2e>
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d135      	bne.n	8005d5e <_puts_r+0x9a>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f8c5 	bl	8005e84 <__swsetup_r>
 8005cfa:	b380      	cbz	r0, 8005d5e <_puts_r+0x9a>
 8005cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8005d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d02:	07da      	lsls	r2, r3, #31
 8005d04:	d405      	bmi.n	8005d12 <_puts_r+0x4e>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <_puts_r+0x4e>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0e:	f000 f989 	bl	8006024 <__retarget_lock_release_recursive>
 8005d12:	4628      	mov	r0, r5
 8005d14:	bd70      	pop	{r4, r5, r6, pc}
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da04      	bge.n	8005d24 <_puts_r+0x60>
 8005d1a:	69a2      	ldr	r2, [r4, #24]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	dc17      	bgt.n	8005d50 <_puts_r+0x8c>
 8005d20:	290a      	cmp	r1, #10
 8005d22:	d015      	beq.n	8005d50 <_puts_r+0x8c>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	7019      	strb	r1, [r3, #0]
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d32:	3b01      	subs	r3, #1
 8005d34:	60a3      	str	r3, [r4, #8]
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d1ed      	bne.n	8005d16 <_puts_r+0x52>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da11      	bge.n	8005d62 <_puts_r+0x9e>
 8005d3e:	4622      	mov	r2, r4
 8005d40:	210a      	movs	r1, #10
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f85f 	bl	8005e06 <__swbuf_r>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0d7      	beq.n	8005cfc <_puts_r+0x38>
 8005d4c:	250a      	movs	r5, #10
 8005d4e:	e7d7      	b.n	8005d00 <_puts_r+0x3c>
 8005d50:	4622      	mov	r2, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f857 	bl	8005e06 <__swbuf_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1e7      	bne.n	8005d2c <_puts_r+0x68>
 8005d5c:	e7ce      	b.n	8005cfc <_puts_r+0x38>
 8005d5e:	3e01      	subs	r6, #1
 8005d60:	e7e4      	b.n	8005d2c <_puts_r+0x68>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	220a      	movs	r2, #10
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e7ee      	b.n	8005d4c <_puts_r+0x88>
	...

08005d70 <puts>:
 8005d70:	4b02      	ldr	r3, [pc, #8]	@ (8005d7c <puts+0xc>)
 8005d72:	4601      	mov	r1, r0
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f7ff bfa5 	b.w	8005cc4 <_puts_r>
 8005d7a:	bf00      	nop
 8005d7c:	20000020 	.word	0x20000020

08005d80 <__sread>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	460c      	mov	r4, r1
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	f000 f8fc 	bl	8005f84 <_read_r>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	bfab      	itete	ge
 8005d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d92:	89a3      	ldrhlt	r3, [r4, #12]
 8005d94:	181b      	addge	r3, r3, r0
 8005d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d9a:	bfac      	ite	ge
 8005d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d9e:	81a3      	strhlt	r3, [r4, #12]
 8005da0:	bd10      	pop	{r4, pc}

08005da2 <__swrite>:
 8005da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	461f      	mov	r7, r3
 8005da8:	898b      	ldrh	r3, [r1, #12]
 8005daa:	05db      	lsls	r3, r3, #23
 8005dac:	4605      	mov	r5, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	4616      	mov	r6, r2
 8005db2:	d505      	bpl.n	8005dc0 <__swrite+0x1e>
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	2302      	movs	r3, #2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f000 f8d0 	bl	8005f60 <_lseek_r>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	4632      	mov	r2, r6
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	f000 b8e7 	b.w	8005fa8 <_write_r>

08005dda <__sseek>:
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	460c      	mov	r4, r1
 8005dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de2:	f000 f8bd 	bl	8005f60 <_lseek_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	bf15      	itete	ne
 8005dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005df6:	81a3      	strheq	r3, [r4, #12]
 8005df8:	bf18      	it	ne
 8005dfa:	81a3      	strhne	r3, [r4, #12]
 8005dfc:	bd10      	pop	{r4, pc}

08005dfe <__sclose>:
 8005dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e02:	f000 b89d 	b.w	8005f40 <_close_r>

08005e06 <__swbuf_r>:
 8005e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e08:	460e      	mov	r6, r1
 8005e0a:	4614      	mov	r4, r2
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	b118      	cbz	r0, 8005e18 <__swbuf_r+0x12>
 8005e10:	6a03      	ldr	r3, [r0, #32]
 8005e12:	b90b      	cbnz	r3, 8005e18 <__swbuf_r+0x12>
 8005e14:	f7ff ff20 	bl	8005c58 <__sinit>
 8005e18:	69a3      	ldr	r3, [r4, #24]
 8005e1a:	60a3      	str	r3, [r4, #8]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	071a      	lsls	r2, r3, #28
 8005e20:	d501      	bpl.n	8005e26 <__swbuf_r+0x20>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	b943      	cbnz	r3, 8005e38 <__swbuf_r+0x32>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 f82b 	bl	8005e84 <__swsetup_r>
 8005e2e:	b118      	cbz	r0, 8005e38 <__swbuf_r+0x32>
 8005e30:	f04f 37ff 	mov.w	r7, #4294967295
 8005e34:	4638      	mov	r0, r7
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	6922      	ldr	r2, [r4, #16]
 8005e3c:	1a98      	subs	r0, r3, r2
 8005e3e:	6963      	ldr	r3, [r4, #20]
 8005e40:	b2f6      	uxtb	r6, r6
 8005e42:	4283      	cmp	r3, r0
 8005e44:	4637      	mov	r7, r6
 8005e46:	dc05      	bgt.n	8005e54 <__swbuf_r+0x4e>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 fa76 	bl	800633c <_fflush_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d1ed      	bne.n	8005e30 <__swbuf_r+0x2a>
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	60a3      	str	r3, [r4, #8]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	701e      	strb	r6, [r3, #0]
 8005e62:	6962      	ldr	r2, [r4, #20]
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d004      	beq.n	8005e74 <__swbuf_r+0x6e>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	07db      	lsls	r3, r3, #31
 8005e6e:	d5e1      	bpl.n	8005e34 <__swbuf_r+0x2e>
 8005e70:	2e0a      	cmp	r6, #10
 8005e72:	d1df      	bne.n	8005e34 <__swbuf_r+0x2e>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fa60 	bl	800633c <_fflush_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d0d9      	beq.n	8005e34 <__swbuf_r+0x2e>
 8005e80:	e7d6      	b.n	8005e30 <__swbuf_r+0x2a>
	...

08005e84 <__swsetup_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <__swsetup_r+0xa8>)
 8005e88:	4605      	mov	r5, r0
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	b118      	cbz	r0, 8005e98 <__swsetup_r+0x14>
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	b90b      	cbnz	r3, 8005e98 <__swsetup_r+0x14>
 8005e94:	f7ff fee0 	bl	8005c58 <__sinit>
 8005e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9c:	0719      	lsls	r1, r3, #28
 8005e9e:	d422      	bmi.n	8005ee6 <__swsetup_r+0x62>
 8005ea0:	06da      	lsls	r2, r3, #27
 8005ea2:	d407      	bmi.n	8005eb4 <__swsetup_r+0x30>
 8005ea4:	2209      	movs	r2, #9
 8005ea6:	602a      	str	r2, [r5, #0]
 8005ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb2:	e033      	b.n	8005f1c <__swsetup_r+0x98>
 8005eb4:	0758      	lsls	r0, r3, #29
 8005eb6:	d512      	bpl.n	8005ede <__swsetup_r+0x5a>
 8005eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eba:	b141      	cbz	r1, 8005ece <__swsetup_r+0x4a>
 8005ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d002      	beq.n	8005eca <__swsetup_r+0x46>
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 f8bd 	bl	8006044 <_free_r>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f043 0308 	orr.w	r3, r3, #8
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	b94b      	cbnz	r3, 8005efe <__swsetup_r+0x7a>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef4:	d003      	beq.n	8005efe <__swsetup_r+0x7a>
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 fa6d 	bl	80063d8 <__smakebuf_r>
 8005efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f02:	f013 0201 	ands.w	r2, r3, #1
 8005f06:	d00a      	beq.n	8005f1e <__swsetup_r+0x9a>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	60a2      	str	r2, [r4, #8]
 8005f0c:	6962      	ldr	r2, [r4, #20]
 8005f0e:	4252      	negs	r2, r2
 8005f10:	61a2      	str	r2, [r4, #24]
 8005f12:	6922      	ldr	r2, [r4, #16]
 8005f14:	b942      	cbnz	r2, 8005f28 <__swsetup_r+0xa4>
 8005f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f1a:	d1c5      	bne.n	8005ea8 <__swsetup_r+0x24>
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	0799      	lsls	r1, r3, #30
 8005f20:	bf58      	it	pl
 8005f22:	6962      	ldrpl	r2, [r4, #20]
 8005f24:	60a2      	str	r2, [r4, #8]
 8005f26:	e7f4      	b.n	8005f12 <__swsetup_r+0x8e>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7f7      	b.n	8005f1c <__swsetup_r+0x98>
 8005f2c:	20000020 	.word	0x20000020

08005f30 <memset>:
 8005f30:	4402      	add	r2, r0
 8005f32:	4603      	mov	r3, r0
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d100      	bne.n	8005f3a <memset+0xa>
 8005f38:	4770      	bx	lr
 8005f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3e:	e7f9      	b.n	8005f34 <memset+0x4>

08005f40 <_close_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d06      	ldr	r5, [pc, #24]	@ (8005f5c <_close_r+0x1c>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fb f9f5 	bl	800133a <_close>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_close_r+0x1a>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_close_r+0x1a>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	2000092c 	.word	0x2000092c

08005f60 <_lseek_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d07      	ldr	r5, [pc, #28]	@ (8005f80 <_lseek_r+0x20>)
 8005f64:	4604      	mov	r4, r0
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fb fa0a 	bl	8001388 <_lseek>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_lseek_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_lseek_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	2000092c 	.word	0x2000092c

08005f84 <_read_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	@ (8005fa4 <_read_r+0x20>)
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fb f998 	bl	80012c8 <_read>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_read_r+0x1e>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_read_r+0x1e>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	2000092c 	.word	0x2000092c

08005fa8 <_write_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	@ (8005fc8 <_write_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fb f9a3 	bl	8001302 <_write>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_write_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_write_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	2000092c 	.word	0x2000092c

08005fcc <__errno>:
 8005fcc:	4b01      	ldr	r3, [pc, #4]	@ (8005fd4 <__errno+0x8>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000020 	.word	0x20000020

08005fd8 <__libc_init_array>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4d0d      	ldr	r5, [pc, #52]	@ (8006010 <__libc_init_array+0x38>)
 8005fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8006014 <__libc_init_array+0x3c>)
 8005fde:	1b64      	subs	r4, r4, r5
 8005fe0:	10a4      	asrs	r4, r4, #2
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	d109      	bne.n	8005ffc <__libc_init_array+0x24>
 8005fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8006018 <__libc_init_array+0x40>)
 8005fea:	4c0c      	ldr	r4, [pc, #48]	@ (800601c <__libc_init_array+0x44>)
 8005fec:	f000 fa62 	bl	80064b4 <_init>
 8005ff0:	1b64      	subs	r4, r4, r5
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	42a6      	cmp	r6, r4
 8005ff8:	d105      	bne.n	8006006 <__libc_init_array+0x2e>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006000:	4798      	blx	r3
 8006002:	3601      	adds	r6, #1
 8006004:	e7ee      	b.n	8005fe4 <__libc_init_array+0xc>
 8006006:	f855 3b04 	ldr.w	r3, [r5], #4
 800600a:	4798      	blx	r3
 800600c:	3601      	adds	r6, #1
 800600e:	e7f2      	b.n	8005ff6 <__libc_init_array+0x1e>
 8006010:	0800682c 	.word	0x0800682c
 8006014:	0800682c 	.word	0x0800682c
 8006018:	0800682c 	.word	0x0800682c
 800601c:	08006830 	.word	0x08006830

08006020 <__retarget_lock_init_recursive>:
 8006020:	4770      	bx	lr

08006022 <__retarget_lock_acquire_recursive>:
 8006022:	4770      	bx	lr

08006024 <__retarget_lock_release_recursive>:
 8006024:	4770      	bx	lr

08006026 <memcpy>:
 8006026:	440a      	add	r2, r1
 8006028:	4291      	cmp	r1, r2
 800602a:	f100 33ff 	add.w	r3, r0, #4294967295
 800602e:	d100      	bne.n	8006032 <memcpy+0xc>
 8006030:	4770      	bx	lr
 8006032:	b510      	push	{r4, lr}
 8006034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603c:	4291      	cmp	r1, r2
 800603e:	d1f9      	bne.n	8006034 <memcpy+0xe>
 8006040:	bd10      	pop	{r4, pc}
	...

08006044 <_free_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4605      	mov	r5, r0
 8006048:	2900      	cmp	r1, #0
 800604a:	d041      	beq.n	80060d0 <_free_r+0x8c>
 800604c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006050:	1f0c      	subs	r4, r1, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	bfb8      	it	lt
 8006056:	18e4      	addlt	r4, r4, r3
 8006058:	f000 f8e0 	bl	800621c <__malloc_lock>
 800605c:	4a1d      	ldr	r2, [pc, #116]	@ (80060d4 <_free_r+0x90>)
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	b933      	cbnz	r3, 8006070 <_free_r+0x2c>
 8006062:	6063      	str	r3, [r4, #4]
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	4628      	mov	r0, r5
 8006068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606c:	f000 b8dc 	b.w	8006228 <__malloc_unlock>
 8006070:	42a3      	cmp	r3, r4
 8006072:	d908      	bls.n	8006086 <_free_r+0x42>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	1821      	adds	r1, r4, r0
 8006078:	428b      	cmp	r3, r1
 800607a:	bf01      	itttt	eq
 800607c:	6819      	ldreq	r1, [r3, #0]
 800607e:	685b      	ldreq	r3, [r3, #4]
 8006080:	1809      	addeq	r1, r1, r0
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	e7ed      	b.n	8006062 <_free_r+0x1e>
 8006086:	461a      	mov	r2, r3
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b10b      	cbz	r3, 8006090 <_free_r+0x4c>
 800608c:	42a3      	cmp	r3, r4
 800608e:	d9fa      	bls.n	8006086 <_free_r+0x42>
 8006090:	6811      	ldr	r1, [r2, #0]
 8006092:	1850      	adds	r0, r2, r1
 8006094:	42a0      	cmp	r0, r4
 8006096:	d10b      	bne.n	80060b0 <_free_r+0x6c>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	4401      	add	r1, r0
 800609c:	1850      	adds	r0, r2, r1
 800609e:	4283      	cmp	r3, r0
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	d1e0      	bne.n	8006066 <_free_r+0x22>
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	6053      	str	r3, [r2, #4]
 80060aa:	4408      	add	r0, r1
 80060ac:	6010      	str	r0, [r2, #0]
 80060ae:	e7da      	b.n	8006066 <_free_r+0x22>
 80060b0:	d902      	bls.n	80060b8 <_free_r+0x74>
 80060b2:	230c      	movs	r3, #12
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	e7d6      	b.n	8006066 <_free_r+0x22>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	428b      	cmp	r3, r1
 80060be:	bf04      	itt	eq
 80060c0:	6819      	ldreq	r1, [r3, #0]
 80060c2:	685b      	ldreq	r3, [r3, #4]
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	bf04      	itt	eq
 80060c8:	1809      	addeq	r1, r1, r0
 80060ca:	6021      	streq	r1, [r4, #0]
 80060cc:	6054      	str	r4, [r2, #4]
 80060ce:	e7ca      	b.n	8006066 <_free_r+0x22>
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	bf00      	nop
 80060d4:	20000938 	.word	0x20000938

080060d8 <sbrk_aligned>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4e0f      	ldr	r6, [pc, #60]	@ (8006118 <sbrk_aligned+0x40>)
 80060dc:	460c      	mov	r4, r1
 80060de:	6831      	ldr	r1, [r6, #0]
 80060e0:	4605      	mov	r5, r0
 80060e2:	b911      	cbnz	r1, 80060ea <sbrk_aligned+0x12>
 80060e4:	f000 f9d6 	bl	8006494 <_sbrk_r>
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	4621      	mov	r1, r4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 f9d1 	bl	8006494 <_sbrk_r>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d103      	bne.n	80060fe <sbrk_aligned+0x26>
 80060f6:	f04f 34ff 	mov.w	r4, #4294967295
 80060fa:	4620      	mov	r0, r4
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d0f8      	beq.n	80060fa <sbrk_aligned+0x22>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f9c2 	bl	8006494 <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d1f2      	bne.n	80060fa <sbrk_aligned+0x22>
 8006114:	e7ef      	b.n	80060f6 <sbrk_aligned+0x1e>
 8006116:	bf00      	nop
 8006118:	20000934 	.word	0x20000934

0800611c <_malloc_r>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	1ccd      	adds	r5, r1, #3
 8006122:	f025 0503 	bic.w	r5, r5, #3
 8006126:	3508      	adds	r5, #8
 8006128:	2d0c      	cmp	r5, #12
 800612a:	bf38      	it	cc
 800612c:	250c      	movcc	r5, #12
 800612e:	2d00      	cmp	r5, #0
 8006130:	4606      	mov	r6, r0
 8006132:	db01      	blt.n	8006138 <_malloc_r+0x1c>
 8006134:	42a9      	cmp	r1, r5
 8006136:	d904      	bls.n	8006142 <_malloc_r+0x26>
 8006138:	230c      	movs	r3, #12
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	2000      	movs	r0, #0
 800613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006218 <_malloc_r+0xfc>
 8006146:	f000 f869 	bl	800621c <__malloc_lock>
 800614a:	f8d8 3000 	ldr.w	r3, [r8]
 800614e:	461c      	mov	r4, r3
 8006150:	bb44      	cbnz	r4, 80061a4 <_malloc_r+0x88>
 8006152:	4629      	mov	r1, r5
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff ffbf 	bl	80060d8 <sbrk_aligned>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	4604      	mov	r4, r0
 800615e:	d158      	bne.n	8006212 <_malloc_r+0xf6>
 8006160:	f8d8 4000 	ldr.w	r4, [r8]
 8006164:	4627      	mov	r7, r4
 8006166:	2f00      	cmp	r7, #0
 8006168:	d143      	bne.n	80061f2 <_malloc_r+0xd6>
 800616a:	2c00      	cmp	r4, #0
 800616c:	d04b      	beq.n	8006206 <_malloc_r+0xea>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4639      	mov	r1, r7
 8006172:	4630      	mov	r0, r6
 8006174:	eb04 0903 	add.w	r9, r4, r3
 8006178:	f000 f98c 	bl	8006494 <_sbrk_r>
 800617c:	4581      	cmp	r9, r0
 800617e:	d142      	bne.n	8006206 <_malloc_r+0xea>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	1a6d      	subs	r5, r5, r1
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffa6 	bl	80060d8 <sbrk_aligned>
 800618c:	3001      	adds	r0, #1
 800618e:	d03a      	beq.n	8006206 <_malloc_r+0xea>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	442b      	add	r3, r5
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	f8d8 3000 	ldr.w	r3, [r8]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	bb62      	cbnz	r2, 80061f8 <_malloc_r+0xdc>
 800619e:	f8c8 7000 	str.w	r7, [r8]
 80061a2:	e00f      	b.n	80061c4 <_malloc_r+0xa8>
 80061a4:	6822      	ldr	r2, [r4, #0]
 80061a6:	1b52      	subs	r2, r2, r5
 80061a8:	d420      	bmi.n	80061ec <_malloc_r+0xd0>
 80061aa:	2a0b      	cmp	r2, #11
 80061ac:	d917      	bls.n	80061de <_malloc_r+0xc2>
 80061ae:	1961      	adds	r1, r4, r5
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	6025      	str	r5, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	6059      	strne	r1, [r3, #4]
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	bf08      	it	eq
 80061bc:	f8c8 1000 	streq.w	r1, [r8]
 80061c0:	5162      	str	r2, [r4, r5]
 80061c2:	604b      	str	r3, [r1, #4]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f82f 	bl	8006228 <__malloc_unlock>
 80061ca:	f104 000b 	add.w	r0, r4, #11
 80061ce:	1d23      	adds	r3, r4, #4
 80061d0:	f020 0007 	bic.w	r0, r0, #7
 80061d4:	1ac2      	subs	r2, r0, r3
 80061d6:	bf1c      	itt	ne
 80061d8:	1a1b      	subne	r3, r3, r0
 80061da:	50a3      	strne	r3, [r4, r2]
 80061dc:	e7af      	b.n	800613e <_malloc_r+0x22>
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	bf0c      	ite	eq
 80061e4:	f8c8 2000 	streq.w	r2, [r8]
 80061e8:	605a      	strne	r2, [r3, #4]
 80061ea:	e7eb      	b.n	80061c4 <_malloc_r+0xa8>
 80061ec:	4623      	mov	r3, r4
 80061ee:	6864      	ldr	r4, [r4, #4]
 80061f0:	e7ae      	b.n	8006150 <_malloc_r+0x34>
 80061f2:	463c      	mov	r4, r7
 80061f4:	687f      	ldr	r7, [r7, #4]
 80061f6:	e7b6      	b.n	8006166 <_malloc_r+0x4a>
 80061f8:	461a      	mov	r2, r3
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d1fb      	bne.n	80061f8 <_malloc_r+0xdc>
 8006200:	2300      	movs	r3, #0
 8006202:	6053      	str	r3, [r2, #4]
 8006204:	e7de      	b.n	80061c4 <_malloc_r+0xa8>
 8006206:	230c      	movs	r3, #12
 8006208:	6033      	str	r3, [r6, #0]
 800620a:	4630      	mov	r0, r6
 800620c:	f000 f80c 	bl	8006228 <__malloc_unlock>
 8006210:	e794      	b.n	800613c <_malloc_r+0x20>
 8006212:	6005      	str	r5, [r0, #0]
 8006214:	e7d6      	b.n	80061c4 <_malloc_r+0xa8>
 8006216:	bf00      	nop
 8006218:	20000938 	.word	0x20000938

0800621c <__malloc_lock>:
 800621c:	4801      	ldr	r0, [pc, #4]	@ (8006224 <__malloc_lock+0x8>)
 800621e:	f7ff bf00 	b.w	8006022 <__retarget_lock_acquire_recursive>
 8006222:	bf00      	nop
 8006224:	20000930 	.word	0x20000930

08006228 <__malloc_unlock>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__malloc_unlock+0x8>)
 800622a:	f7ff befb 	b.w	8006024 <__retarget_lock_release_recursive>
 800622e:	bf00      	nop
 8006230:	20000930 	.word	0x20000930

08006234 <__sflush_r>:
 8006234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	0716      	lsls	r6, r2, #28
 800623e:	4605      	mov	r5, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d454      	bmi.n	80062ee <__sflush_r+0xba>
 8006244:	684b      	ldr	r3, [r1, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc02      	bgt.n	8006250 <__sflush_r+0x1c>
 800624a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd48      	ble.n	80062e2 <__sflush_r+0xae>
 8006250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006252:	2e00      	cmp	r6, #0
 8006254:	d045      	beq.n	80062e2 <__sflush_r+0xae>
 8006256:	2300      	movs	r3, #0
 8006258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800625c:	682f      	ldr	r7, [r5, #0]
 800625e:	6a21      	ldr	r1, [r4, #32]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	d030      	beq.n	80062c6 <__sflush_r+0x92>
 8006264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	0759      	lsls	r1, r3, #29
 800626a:	d505      	bpl.n	8006278 <__sflush_r+0x44>
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006272:	b10b      	cbz	r3, 8006278 <__sflush_r+0x44>
 8006274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	4628      	mov	r0, r5
 8006280:	47b0      	blx	r6
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	d106      	bne.n	8006296 <__sflush_r+0x62>
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	291d      	cmp	r1, #29
 800628c:	d82b      	bhi.n	80062e6 <__sflush_r+0xb2>
 800628e:	4a2a      	ldr	r2, [pc, #168]	@ (8006338 <__sflush_r+0x104>)
 8006290:	410a      	asrs	r2, r1
 8006292:	07d6      	lsls	r6, r2, #31
 8006294:	d427      	bmi.n	80062e6 <__sflush_r+0xb2>
 8006296:	2200      	movs	r2, #0
 8006298:	6062      	str	r2, [r4, #4]
 800629a:	04d9      	lsls	r1, r3, #19
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	d504      	bpl.n	80062ac <__sflush_r+0x78>
 80062a2:	1c42      	adds	r2, r0, #1
 80062a4:	d101      	bne.n	80062aa <__sflush_r+0x76>
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	b903      	cbnz	r3, 80062ac <__sflush_r+0x78>
 80062aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80062ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ae:	602f      	str	r7, [r5, #0]
 80062b0:	b1b9      	cbz	r1, 80062e2 <__sflush_r+0xae>
 80062b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d002      	beq.n	80062c0 <__sflush_r+0x8c>
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff fec2 	bl	8006044 <_free_r>
 80062c0:	2300      	movs	r3, #0
 80062c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c4:	e00d      	b.n	80062e2 <__sflush_r+0xae>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b0      	blx	r6
 80062cc:	4602      	mov	r2, r0
 80062ce:	1c50      	adds	r0, r2, #1
 80062d0:	d1c9      	bne.n	8006266 <__sflush_r+0x32>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c6      	beq.n	8006266 <__sflush_r+0x32>
 80062d8:	2b1d      	cmp	r3, #29
 80062da:	d001      	beq.n	80062e0 <__sflush_r+0xac>
 80062dc:	2b16      	cmp	r3, #22
 80062de:	d11e      	bne.n	800631e <__sflush_r+0xea>
 80062e0:	602f      	str	r7, [r5, #0]
 80062e2:	2000      	movs	r0, #0
 80062e4:	e022      	b.n	800632c <__sflush_r+0xf8>
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	e01b      	b.n	8006326 <__sflush_r+0xf2>
 80062ee:	690f      	ldr	r7, [r1, #16]
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	d0f6      	beq.n	80062e2 <__sflush_r+0xae>
 80062f4:	0793      	lsls	r3, r2, #30
 80062f6:	680e      	ldr	r6, [r1, #0]
 80062f8:	bf08      	it	eq
 80062fa:	694b      	ldreq	r3, [r1, #20]
 80062fc:	600f      	str	r7, [r1, #0]
 80062fe:	bf18      	it	ne
 8006300:	2300      	movne	r3, #0
 8006302:	eba6 0807 	sub.w	r8, r6, r7
 8006306:	608b      	str	r3, [r1, #8]
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	dde9      	ble.n	80062e2 <__sflush_r+0xae>
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006312:	4643      	mov	r3, r8
 8006314:	463a      	mov	r2, r7
 8006316:	4628      	mov	r0, r5
 8006318:	47b0      	blx	r6
 800631a:	2800      	cmp	r0, #0
 800631c:	dc08      	bgt.n	8006330 <__sflush_r+0xfc>
 800631e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4407      	add	r7, r0
 8006332:	eba8 0800 	sub.w	r8, r8, r0
 8006336:	e7e7      	b.n	8006308 <__sflush_r+0xd4>
 8006338:	dfbffffe 	.word	0xdfbffffe

0800633c <_fflush_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	690b      	ldr	r3, [r1, #16]
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b913      	cbnz	r3, 800634c <_fflush_r+0x10>
 8006346:	2500      	movs	r5, #0
 8006348:	4628      	mov	r0, r5
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	b118      	cbz	r0, 8006356 <_fflush_r+0x1a>
 800634e:	6a03      	ldr	r3, [r0, #32]
 8006350:	b90b      	cbnz	r3, 8006356 <_fflush_r+0x1a>
 8006352:	f7ff fc81 	bl	8005c58 <__sinit>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f3      	beq.n	8006346 <_fflush_r+0xa>
 800635e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006360:	07d0      	lsls	r0, r2, #31
 8006362:	d404      	bmi.n	800636e <_fflush_r+0x32>
 8006364:	0599      	lsls	r1, r3, #22
 8006366:	d402      	bmi.n	800636e <_fflush_r+0x32>
 8006368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636a:	f7ff fe5a 	bl	8006022 <__retarget_lock_acquire_recursive>
 800636e:	4628      	mov	r0, r5
 8006370:	4621      	mov	r1, r4
 8006372:	f7ff ff5f 	bl	8006234 <__sflush_r>
 8006376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006378:	07da      	lsls	r2, r3, #31
 800637a:	4605      	mov	r5, r0
 800637c:	d4e4      	bmi.n	8006348 <_fflush_r+0xc>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	059b      	lsls	r3, r3, #22
 8006382:	d4e1      	bmi.n	8006348 <_fflush_r+0xc>
 8006384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006386:	f7ff fe4d 	bl	8006024 <__retarget_lock_release_recursive>
 800638a:	e7dd      	b.n	8006348 <_fflush_r+0xc>

0800638c <__swhatbuf_r>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	2900      	cmp	r1, #0
 8006396:	b096      	sub	sp, #88	@ 0x58
 8006398:	4615      	mov	r5, r2
 800639a:	461e      	mov	r6, r3
 800639c:	da0d      	bge.n	80063ba <__swhatbuf_r+0x2e>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063a4:	f04f 0100 	mov.w	r1, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2340      	movne	r3, #64	@ 0x40
 80063ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063b0:	2000      	movs	r0, #0
 80063b2:	6031      	str	r1, [r6, #0]
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	b016      	add	sp, #88	@ 0x58
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	466a      	mov	r2, sp
 80063bc:	f000 f848 	bl	8006450 <_fstat_r>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	dbec      	blt.n	800639e <__swhatbuf_r+0x12>
 80063c4:	9901      	ldr	r1, [sp, #4]
 80063c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063ce:	4259      	negs	r1, r3
 80063d0:	4159      	adcs	r1, r3
 80063d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063d6:	e7eb      	b.n	80063b0 <__swhatbuf_r+0x24>

080063d8 <__smakebuf_r>:
 80063d8:	898b      	ldrh	r3, [r1, #12]
 80063da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063dc:	079d      	lsls	r5, r3, #30
 80063de:	4606      	mov	r6, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	d507      	bpl.n	80063f4 <__smakebuf_r+0x1c>
 80063e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	2301      	movs	r3, #1
 80063ee:	6163      	str	r3, [r4, #20]
 80063f0:	b003      	add	sp, #12
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f4:	ab01      	add	r3, sp, #4
 80063f6:	466a      	mov	r2, sp
 80063f8:	f7ff ffc8 	bl	800638c <__swhatbuf_r>
 80063fc:	9f00      	ldr	r7, [sp, #0]
 80063fe:	4605      	mov	r5, r0
 8006400:	4639      	mov	r1, r7
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff fe8a 	bl	800611c <_malloc_r>
 8006408:	b948      	cbnz	r0, 800641e <__smakebuf_r+0x46>
 800640a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640e:	059a      	lsls	r2, r3, #22
 8006410:	d4ee      	bmi.n	80063f0 <__smakebuf_r+0x18>
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	f043 0302 	orr.w	r3, r3, #2
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	e7e2      	b.n	80063e4 <__smakebuf_r+0xc>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	6020      	str	r0, [r4, #0]
 8006422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	9b01      	ldr	r3, [sp, #4]
 800642a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800642e:	b15b      	cbz	r3, 8006448 <__smakebuf_r+0x70>
 8006430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006434:	4630      	mov	r0, r6
 8006436:	f000 f81d 	bl	8006474 <_isatty_r>
 800643a:	b128      	cbz	r0, 8006448 <__smakebuf_r+0x70>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	431d      	orrs	r5, r3
 800644c:	81a5      	strh	r5, [r4, #12]
 800644e:	e7cf      	b.n	80063f0 <__smakebuf_r+0x18>

08006450 <_fstat_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	@ (8006470 <_fstat_r+0x20>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	f7fa ff78 	bl	8001352 <_fstat>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d102      	bne.n	800646c <_fstat_r+0x1c>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	b103      	cbz	r3, 800646c <_fstat_r+0x1c>
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	bd38      	pop	{r3, r4, r5, pc}
 800646e:	bf00      	nop
 8006470:	2000092c 	.word	0x2000092c

08006474 <_isatty_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d06      	ldr	r5, [pc, #24]	@ (8006490 <_isatty_r+0x1c>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	f7fa ff77 	bl	8001372 <_isatty>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_isatty_r+0x1a>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_isatty_r+0x1a>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	2000092c 	.word	0x2000092c

08006494 <_sbrk_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d06      	ldr	r5, [pc, #24]	@ (80064b0 <_sbrk_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f7fa ff80 	bl	80013a4 <_sbrk>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_sbrk_r+0x1a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_sbrk_r+0x1a>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	2000092c 	.word	0x2000092c

080064b4 <_init>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	bf00      	nop
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr

080064c0 <_fini>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr
